#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var wrench = require('wrench');
var grunt = require('grunt');
require('shelljs/global');
var readYaml = require('read-yaml');
var Embark = require('embark-framework');

var run = function(cmd) {
  if (exec(cmd).code != 0) {
    exit();
  }
}

program
  .version('0.5.0')

program.command('new [name]').description('New application').action(function(name) {
  if (name === undefined) {
    console.log("please specify the app name");
    exit;
  }
  var prefPath = path.join(__dirname + '/../boilerplate');

  var targetDir = "./" + name;
  wrench.copyDirSyncRecursive(prefPath, targetDir);
  cd(targetDir);
  run('npm install');
  console.log('\n\ninit complete');
});

program.command('deploy [env]').description('deploy contracts').action(function(env_) {
  var env = env_ || 'development';
  var embarkConfig = readYaml.sync("./embark.yml");

  if (embarkConfig.type === "grunt") {
    run("grunt deploy_contracts:" + env);
  }
  else {
    contractFiles = grunt.file.expand(embarkConfig.contracts);
    destFile = embarkConfig.output
    Embark.init()
    Embark.blockchainConfig.loadConfigFile(embarkConfig.blockchainConfig)
    Embark.contractsConfig.loadConfigFile(embarkConfig.contractsConfig)
    abi = Embark.deployContracts(env, contractFiles, destFile)
    grunt.file.write(destFile, abi);
  }
});

program.command('build [env]').description('build dapp').action(function(env_) {
  var env = env_ || 'development';
  run("grunt clean");
  run("grunt deploy_contracts:" + env);
  run('grunt build:' + env);
});

program.command('ipfs [env]').description('build dapp and make it available in ipfs').action(function(env_) {
  var env = env_ || 'development';
  run("grunt clean")
  run("grunt deploy_contracts:" + env)
  run('grunt build:' + env)
  run('grunt ipfs:' + env)
});

program.command('run [env]').description('run dapp').action(function(env_) {
  var env = env_ || 'development';
  run('grunt deploy:' + env);
});

program.command('spec').description('run specs').action(function() {
  run('jasmine');
});

program.command('blockchain [env]').description('run blockchain').action(function(env_) {
  var env = env_ || 'development';
  run('grunt blockchain:' + env);
});

program.command('demo').description('create a working dapp with a SimpleStorage contract').action(function() {
  var boilerPath = path.join(__dirname + '/../boilerplate');
  var demoPath   = path.join(__dirname + '/../demo');

  var targetDir = "./embark_demo";
  wrench.copyDirSyncRecursive(boilerPath, targetDir);
  wrench.copyDirSyncRecursive(demoPath + "/app",    targetDir + "/app",    {forceDelete: true});
  wrench.copyDirSyncRecursive(demoPath + "/config", targetDir + "/config", {forceDelete: true});
  wrench.copyDirSyncRecursive(demoPath + "/spec",   targetDir + "/spec",   {forceDelete: true});

  cd(targetDir);
  run('npm install');
  console.log('\n\ninit complete');
});

program.parse(process.argv)

if (!process.argv.slice(2).length) {
  program.outputHelp();
}

exit();

