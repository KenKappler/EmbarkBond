//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var web3, BigNumber, require;

(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/ethereum:web3/dist/web3.js                                                                               //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*                                                                                                                   // 2
    This file is part of ethereum.js.                                                                                // 3
                                                                                                                     // 4
    ethereum.js is free software: you can redistribute it and/or modify                                              // 5
    it under the terms of the GNU Lesser General Public License as published by                                      // 6
    the Free Software Foundation, either version 3 of the License, or                                                // 7
    (at your option) any later version.                                                                              // 8
                                                                                                                     // 9
    ethereum.js is distributed in the hope that it will be useful,                                                   // 10
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 11
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 12
    GNU Lesser General Public License for more details.                                                              // 13
                                                                                                                     // 14
    You should have received a copy of the GNU Lesser General Public License                                         // 15
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 16
*/                                                                                                                   // 17
/**                                                                                                                  // 18
 * @file coder.js                                                                                                    // 19
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 20
 * @date 2015                                                                                                        // 21
 */                                                                                                                  // 22
                                                                                                                     // 23
var BigNumber = require('bignumber.js');                                                                             // 24
var utils = require('../utils/utils');                                                                               // 25
var f = require('./formatters');                                                                                     // 26
var SolidityParam = require('./param');                                                                              // 27
                                                                                                                     // 28
/**                                                                                                                  // 29
 * Should be used to check if a type is an array type                                                                // 30
 *                                                                                                                   // 31
 * @method isArrayType                                                                                               // 32
 * @param {String} type                                                                                              // 33
 * @return {Bool} true is the type is an array, otherwise false                                                      // 34
 */                                                                                                                  // 35
var isArrayType = function (type) {                                                                                  // 36
    return type.slice(-2) === '[]';                                                                                  // 37
};                                                                                                                   // 38
                                                                                                                     // 39
/**                                                                                                                  // 40
 * SolidityType prototype is used to encode/decode solidity params of certain type                                   // 41
 */                                                                                                                  // 42
var SolidityType = function (config) {                                                                               // 43
    this._name = config.name;                                                                                        // 44
    this._match = config.match;                                                                                      // 45
    this._mode = config.mode;                                                                                        // 46
    this._inputFormatter = config.inputFormatter;                                                                    // 47
    this._outputFormatter = config.outputFormatter;                                                                  // 48
};                                                                                                                   // 49
                                                                                                                     // 50
/**                                                                                                                  // 51
 * Should be used to determine if this SolidityType do match given type                                              // 52
 *                                                                                                                   // 53
 * @method isType                                                                                                    // 54
 * @param {String} name                                                                                              // 55
 * @return {Bool} true if type match this SolidityType, otherwise false                                              // 56
 */                                                                                                                  // 57
SolidityType.prototype.isType = function (name) {                                                                    // 58
    if (this._match === 'strict') {                                                                                  // 59
        return this._name === name || (name.indexOf(this._name) === 0 && name.slice(this._name.length) === '[]');    // 60
    } else if (this._match === 'prefix') {                                                                           // 61
        // TODO better type detection!                                                                               // 62
        return name.indexOf(this._name) === 0;                                                                       // 63
    }                                                                                                                // 64
};                                                                                                                   // 65
                                                                                                                     // 66
/**                                                                                                                  // 67
 * Should be used to transform plain param to SolidityParam object                                                   // 68
 *                                                                                                                   // 69
 * @method formatInput                                                                                               // 70
 * @param {Object} param - plain object, or an array of objects                                                      // 71
 * @param {Bool} arrayType - true if a param should be encoded as an array                                           // 72
 * @return {SolidityParam} encoded param wrapped in SolidityParam object                                             // 73
 */                                                                                                                  // 74
SolidityType.prototype.formatInput = function (param, arrayType) {                                                   // 75
    if (utils.isArray(param) && arrayType) { // TODO: should fail if this two are not the same                       // 76
        var self = this;                                                                                             // 77
        return param.map(function (p) {                                                                              // 78
            return self._inputFormatter(p);                                                                          // 79
        }).reduce(function (acc, current) {                                                                          // 80
            return acc.combine(current);                                                                             // 81
        }, f.formatInputInt(param.length)).withOffset(32);                                                           // 82
    }                                                                                                                // 83
    return this._inputFormatter(param);                                                                              // 84
};                                                                                                                   // 85
                                                                                                                     // 86
/**                                                                                                                  // 87
 * Should be used to transoform SolidityParam to plain param                                                         // 88
 *                                                                                                                   // 89
 * @method formatOutput                                                                                              // 90
 * @param {SolidityParam} byteArray                                                                                  // 91
 * @param {Bool} arrayType - true if a param should be decoded as an array                                           // 92
 * @return {Object} plain decoded param                                                                              // 93
 */                                                                                                                  // 94
SolidityType.prototype.formatOutput = function (param, arrayType) {                                                  // 95
    if (arrayType) {                                                                                                 // 96
        // let's assume, that we solidity will never return long arrays :P                                           // 97
        var result = [];                                                                                             // 98
        var length = new BigNumber(param.dynamicPart().slice(0, 64), 16);                                            // 99
        for (var i = 0; i < length * 64; i += 64) {                                                                  // 100
            result.push(this._outputFormatter(new SolidityParam(param.dynamicPart().substr(i + 64, 64))));           // 101
        }                                                                                                            // 102
        return result;                                                                                               // 103
    }                                                                                                                // 104
    return this._outputFormatter(param);                                                                             // 105
};                                                                                                                   // 106
                                                                                                                     // 107
/**                                                                                                                  // 108
 * Should be used to slice single param from bytes                                                                   // 109
 *                                                                                                                   // 110
 * @method sliceParam                                                                                                // 111
 * @param {String} bytes                                                                                             // 112
 * @param {Number} index of param to slice                                                                           // 113
 * @param {String} type                                                                                              // 114
 * @returns {SolidityParam} param                                                                                    // 115
 */                                                                                                                  // 116
SolidityType.prototype.sliceParam = function (bytes, index, type) {                                                  // 117
    if (this._mode === 'bytes') {                                                                                    // 118
        return SolidityParam.decodeBytes(bytes, index);                                                              // 119
    } else if (isArrayType(type)) {                                                                                  // 120
        return SolidityParam.decodeArray(bytes, index);                                                              // 121
    }                                                                                                                // 122
    return SolidityParam.decodeParam(bytes, index);                                                                  // 123
};                                                                                                                   // 124
                                                                                                                     // 125
/**                                                                                                                  // 126
 * SolidityCoder prototype should be used to encode/decode solidity params of any type                               // 127
 */                                                                                                                  // 128
var SolidityCoder = function (types) {                                                                               // 129
    this._types = types;                                                                                             // 130
};                                                                                                                   // 131
                                                                                                                     // 132
/**                                                                                                                  // 133
 * This method should be used to transform type to SolidityType                                                      // 134
 *                                                                                                                   // 135
 * @method _requireType                                                                                              // 136
 * @param {String} type                                                                                              // 137
 * @returns {SolidityType}                                                                                           // 138
 * @throws {Error} throws if no matching type is found                                                               // 139
 */                                                                                                                  // 140
SolidityCoder.prototype._requireType = function (type) {                                                             // 141
    var solidityType = this._types.filter(function (t) {                                                             // 142
        return t.isType(type);                                                                                       // 143
    })[0];                                                                                                           // 144
                                                                                                                     // 145
    if (!solidityType) {                                                                                             // 146
        throw Error('invalid solidity type!: ' + type);                                                              // 147
    }                                                                                                                // 148
                                                                                                                     // 149
    return solidityType;                                                                                             // 150
};                                                                                                                   // 151
                                                                                                                     // 152
/**                                                                                                                  // 153
 * Should be used to transform plain param of given type to SolidityParam                                            // 154
 *                                                                                                                   // 155
 * @method _formatInput                                                                                              // 156
 * @param {String} type of param                                                                                     // 157
 * @param {Object} plain param                                                                                       // 158
 * @return {SolidityParam}                                                                                           // 159
 */                                                                                                                  // 160
SolidityCoder.prototype._formatInput = function (type, param) {                                                      // 161
    return this._requireType(type).formatInput(param, isArrayType(type));                                            // 162
};                                                                                                                   // 163
                                                                                                                     // 164
/**                                                                                                                  // 165
 * Should be used to encode plain param                                                                              // 166
 *                                                                                                                   // 167
 * @method encodeParam                                                                                               // 168
 * @param {String} type                                                                                              // 169
 * @param {Object} plain param                                                                                       // 170
 * @return {String} encoded plain param                                                                              // 171
 */                                                                                                                  // 172
SolidityCoder.prototype.encodeParam = function (type, param) {                                                       // 173
    return this._formatInput(type, param).encode();                                                                  // 174
};                                                                                                                   // 175
                                                                                                                     // 176
/**                                                                                                                  // 177
 * Should be used to encode list of params                                                                           // 178
 *                                                                                                                   // 179
 * @method encodeParams                                                                                              // 180
 * @param {Array} types                                                                                              // 181
 * @param {Array} params                                                                                             // 182
 * @return {String} encoded list of params                                                                           // 183
 */                                                                                                                  // 184
SolidityCoder.prototype.encodeParams = function (types, params) {                                                    // 185
    var self = this;                                                                                                 // 186
    var solidityParams = types.map(function (type, index) {                                                          // 187
        return self._formatInput(type, params[index]);                                                               // 188
    });                                                                                                              // 189
                                                                                                                     // 190
    return SolidityParam.encodeList(solidityParams);                                                                 // 191
};                                                                                                                   // 192
                                                                                                                     // 193
/**                                                                                                                  // 194
 * Should be used to decode bytes to plain param                                                                     // 195
 *                                                                                                                   // 196
 * @method decodeParam                                                                                               // 197
 * @param {String} type                                                                                              // 198
 * @param {String} bytes                                                                                             // 199
 * @return {Object} plain param                                                                                      // 200
 */                                                                                                                  // 201
SolidityCoder.prototype.decodeParam = function (type, bytes) {                                                       // 202
    return this.decodeParams([type], bytes)[0];                                                                      // 203
};                                                                                                                   // 204
                                                                                                                     // 205
/**                                                                                                                  // 206
 * Should be used to decode list of params                                                                           // 207
 *                                                                                                                   // 208
 * @method decodeParam                                                                                               // 209
 * @param {Array} types                                                                                              // 210
 * @param {String} bytes                                                                                             // 211
 * @return {Array} array of plain params                                                                             // 212
 */                                                                                                                  // 213
SolidityCoder.prototype.decodeParams = function (types, bytes) {                                                     // 214
    var self = this;                                                                                                 // 215
    return types.map(function (type, index) {                                                                        // 216
        var solidityType = self._requireType(type);                                                                  // 217
        var p = solidityType.sliceParam(bytes, index, type);                                                         // 218
        return solidityType.formatOutput(p, isArrayType(type));                                                      // 219
    });                                                                                                              // 220
};                                                                                                                   // 221
                                                                                                                     // 222
var coder = new SolidityCoder([                                                                                      // 223
    new SolidityType({                                                                                               // 224
        name: 'address',                                                                                             // 225
        match: 'strict',                                                                                             // 226
        mode: 'value',                                                                                               // 227
        inputFormatter: f.formatInputInt,                                                                            // 228
        outputFormatter: f.formatOutputAddress                                                                       // 229
    }),                                                                                                              // 230
    new SolidityType({                                                                                               // 231
        name: 'bool',                                                                                                // 232
        match: 'strict',                                                                                             // 233
        mode: 'value',                                                                                               // 234
        inputFormatter: f.formatInputBool,                                                                           // 235
        outputFormatter: f.formatOutputBool                                                                          // 236
    }),                                                                                                              // 237
    new SolidityType({                                                                                               // 238
        name: 'int',                                                                                                 // 239
        match: 'prefix',                                                                                             // 240
        mode: 'value',                                                                                               // 241
        inputFormatter: f.formatInputInt,                                                                            // 242
        outputFormatter: f.formatOutputInt,                                                                          // 243
    }),                                                                                                              // 244
    new SolidityType({                                                                                               // 245
        name: 'uint',                                                                                                // 246
        match: 'prefix',                                                                                             // 247
        mode: 'value',                                                                                               // 248
        inputFormatter: f.formatInputInt,                                                                            // 249
        outputFormatter: f.formatOutputUInt                                                                          // 250
    }),                                                                                                              // 251
    new SolidityType({                                                                                               // 252
        name: 'bytes',                                                                                               // 253
        match: 'strict',                                                                                             // 254
        mode: 'bytes',                                                                                               // 255
        inputFormatter: f.formatInputDynamicBytes,                                                                   // 256
        outputFormatter: f.formatOutputDynamicBytes                                                                  // 257
    }),                                                                                                              // 258
    new SolidityType({                                                                                               // 259
        name: 'bytes',                                                                                               // 260
        match: 'prefix',                                                                                             // 261
        mode: 'value',                                                                                               // 262
        inputFormatter: f.formatInputBytes,                                                                          // 263
        outputFormatter: f.formatOutputBytes                                                                         // 264
    }),                                                                                                              // 265
    new SolidityType({                                                                                               // 266
        name: 'string',                                                                                              // 267
        match: 'strict',                                                                                             // 268
        mode: 'bytes',                                                                                               // 269
        inputFormatter: f.formatInputString,                                                                         // 270
        outputFormatter: f.formatOutputString                                                                        // 271
    }),                                                                                                              // 272
    new SolidityType({                                                                                               // 273
        name: 'real',                                                                                                // 274
        match: 'prefix',                                                                                             // 275
        mode: 'value',                                                                                               // 276
        inputFormatter: f.formatInputReal,                                                                           // 277
        outputFormatter: f.formatOutputReal                                                                          // 278
    }),                                                                                                              // 279
    new SolidityType({                                                                                               // 280
        name: 'ureal',                                                                                               // 281
        match: 'prefix',                                                                                             // 282
        mode: 'value',                                                                                               // 283
        inputFormatter: f.formatInputReal,                                                                           // 284
        outputFormatter: f.formatOutputUReal                                                                         // 285
    })                                                                                                               // 286
]);                                                                                                                  // 287
                                                                                                                     // 288
module.exports = coder;                                                                                              // 289
                                                                                                                     // 290
                                                                                                                     // 291
},{"../utils/utils":7,"./formatters":2,"./param":3,"bignumber.js":"bignumber.js"}],2:[function(require,module,exports){
/*                                                                                                                   // 293
    This file is part of ethereum.js.                                                                                // 294
                                                                                                                     // 295
    ethereum.js is free software: you can redistribute it and/or modify                                              // 296
    it under the terms of the GNU Lesser General Public License as published by                                      // 297
    the Free Software Foundation, either version 3 of the License, or                                                // 298
    (at your option) any later version.                                                                              // 299
                                                                                                                     // 300
    ethereum.js is distributed in the hope that it will be useful,                                                   // 301
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 302
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 303
    GNU Lesser General Public License for more details.                                                              // 304
                                                                                                                     // 305
    You should have received a copy of the GNU Lesser General Public License                                         // 306
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 307
*/                                                                                                                   // 308
/**                                                                                                                  // 309
 * @file formatters.js                                                                                               // 310
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 311
 * @date 2015                                                                                                        // 312
 */                                                                                                                  // 313
                                                                                                                     // 314
var BigNumber = require('bignumber.js');                                                                             // 315
var utils = require('../utils/utils');                                                                               // 316
var c = require('../utils/config');                                                                                  // 317
var SolidityParam = require('./param');                                                                              // 318
                                                                                                                     // 319
                                                                                                                     // 320
/**                                                                                                                  // 321
 * Formats input value to byte representation of int                                                                 // 322
 * If value is negative, return it's two's complement                                                                // 323
 * If the value is floating point, round it down                                                                     // 324
 *                                                                                                                   // 325
 * @method formatInputInt                                                                                            // 326
 * @param {String|Number|BigNumber} value that needs to be formatted                                                 // 327
 * @returns {SolidityParam}                                                                                          // 328
 */                                                                                                                  // 329
var formatInputInt = function (value) {                                                                              // 330
    var padding = c.ETH_PADDING * 2;                                                                                 // 331
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                 // 332
    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), padding);                         // 333
    return new SolidityParam(result);                                                                                // 334
};                                                                                                                   // 335
                                                                                                                     // 336
/**                                                                                                                  // 337
 * Formats input bytes                                                                                               // 338
 *                                                                                                                   // 339
 * @method formatInputBytes                                                                                          // 340
 * @param {String}                                                                                                   // 341
 * @returns {SolidityParam}                                                                                          // 342
 */                                                                                                                  // 343
var formatInputBytes = function (value) {                                                                            // 344
    var result = utils.padRight(utils.toHex(value).substr(2), 64);                                                   // 345
    return new SolidityParam(result);                                                                                // 346
};                                                                                                                   // 347
                                                                                                                     // 348
/**                                                                                                                  // 349
 * Formats input bytes                                                                                               // 350
 *                                                                                                                   // 351
 * @method formatDynamicInputBytes                                                                                   // 352
 * @param {String}                                                                                                   // 353
 * @returns {SolidityParam}                                                                                          // 354
 */                                                                                                                  // 355
var formatInputDynamicBytes = function (value) {                                                                     // 356
    value = utils.toHex(value).substr(2);                                                                            // 357
    var l = Math.floor((value.length + 63) / 64);                                                                    // 358
    var result = utils.padRight(value, l * 64);                                                                      // 359
    var length = Math.floor(value.length / 2);                                                                       // 360
    return new SolidityParam(formatInputInt(length).value + result, 32);                                             // 361
};                                                                                                                   // 362
                                                                                                                     // 363
/**                                                                                                                  // 364
 * Formats input value to byte representation of string                                                              // 365
 *                                                                                                                   // 366
 * @method formatInputString                                                                                         // 367
 * @param {String}                                                                                                   // 368
 * @returns {SolidityParam}                                                                                          // 369
 */                                                                                                                  // 370
var formatInputString = function (value) {                                                                           // 371
    var result = utils.fromAscii(value).substr(2);                                                                   // 372
    var l = Math.floor((result.length + 63) / 64);                                                                   // 373
    result = utils.padRight(result, l * 64);                                                                         // 374
    return new SolidityParam(formatInputInt(value.length).value + result, 32);                                       // 375
};                                                                                                                   // 376
                                                                                                                     // 377
/**                                                                                                                  // 378
 * Formats input value to byte representation of bool                                                                // 379
 *                                                                                                                   // 380
 * @method formatInputBool                                                                                           // 381
 * @param {Boolean}                                                                                                  // 382
 * @returns {SolidityParam}                                                                                          // 383
 */                                                                                                                  // 384
var formatInputBool = function (value) {                                                                             // 385
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');           // 386
    return new SolidityParam(result);                                                                                // 387
};                                                                                                                   // 388
                                                                                                                     // 389
/**                                                                                                                  // 390
 * Formats input value to byte representation of real                                                                // 391
 * Values are multiplied by 2^m and encoded as integers                                                              // 392
 *                                                                                                                   // 393
 * @method formatInputReal                                                                                           // 394
 * @param {String|Number|BigNumber}                                                                                  // 395
 * @returns {SolidityParam}                                                                                          // 396
 */                                                                                                                  // 397
var formatInputReal = function (value) {                                                                             // 398
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                    // 399
};                                                                                                                   // 400
                                                                                                                     // 401
/**                                                                                                                  // 402
 * Check if input value is negative                                                                                  // 403
 *                                                                                                                   // 404
 * @method signedIsNegative                                                                                          // 405
 * @param {String} value is hex format                                                                               // 406
 * @returns {Boolean} true if it is negative, otherwise false                                                        // 407
 */                                                                                                                  // 408
var signedIsNegative = function (value) {                                                                            // 409
    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                 // 410
};                                                                                                                   // 411
                                                                                                                     // 412
/**                                                                                                                  // 413
 * Formats right-aligned output bytes to int                                                                         // 414
 *                                                                                                                   // 415
 * @method formatOutputInt                                                                                           // 416
 * @param {SolidityParam} param                                                                                      // 417
 * @returns {BigNumber} right-aligned output bytes formatted to big number                                           // 418
 */                                                                                                                  // 419
var formatOutputInt = function (param) {                                                                             // 420
    var value = param.staticPart() || "0";                                                                           // 421
                                                                                                                     // 422
    // check if it's negative number                                                                                 // 423
    // it it is, return two's complement                                                                             // 424
    if (signedIsNegative(value)) {                                                                                   // 425
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }                                                                                                                // 427
    return new BigNumber(value, 16);                                                                                 // 428
};                                                                                                                   // 429
                                                                                                                     // 430
/**                                                                                                                  // 431
 * Formats right-aligned output bytes to uint                                                                        // 432
 *                                                                                                                   // 433
 * @method formatOutputUInt                                                                                          // 434
 * @param {SolidityParam}                                                                                            // 435
 * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                // 436
 */                                                                                                                  // 437
var formatOutputUInt = function (param) {                                                                            // 438
    var value = param.staticPart() || "0";                                                                           // 439
    return new BigNumber(value, 16);                                                                                 // 440
};                                                                                                                   // 441
                                                                                                                     // 442
/**                                                                                                                  // 443
 * Formats right-aligned output bytes to real                                                                        // 444
 *                                                                                                                   // 445
 * @method formatOutputReal                                                                                          // 446
 * @param {SolidityParam}                                                                                            // 447
 * @returns {BigNumber} input bytes formatted to real                                                                // 448
 */                                                                                                                  // 449
var formatOutputReal = function (param) {                                                                            // 450
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                              // 451
};                                                                                                                   // 452
                                                                                                                     // 453
/**                                                                                                                  // 454
 * Formats right-aligned output bytes to ureal                                                                       // 455
 *                                                                                                                   // 456
 * @method formatOutputUReal                                                                                         // 457
 * @param {SolidityParam}                                                                                            // 458
 * @returns {BigNumber} input bytes formatted to ureal                                                               // 459
 */                                                                                                                  // 460
var formatOutputUReal = function (param) {                                                                           // 461
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                             // 462
};                                                                                                                   // 463
                                                                                                                     // 464
/**                                                                                                                  // 465
 * Should be used to format output bool                                                                              // 466
 *                                                                                                                   // 467
 * @method formatOutputBool                                                                                          // 468
 * @param {SolidityParam}                                                                                            // 469
 * @returns {Boolean} right-aligned input bytes formatted to bool                                                    // 470
 */                                                                                                                  // 471
var formatOutputBool = function (param) {                                                                            // 472
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false; // 473
};                                                                                                                   // 474
                                                                                                                     // 475
/**                                                                                                                  // 476
 * Should be used to format output bytes                                                                             // 477
 *                                                                                                                   // 478
 * @method formatOutputBytes                                                                                         // 479
 * @param {SolidityParam} left-aligned hex representation of string                                                  // 480
 * @returns {String} hex string                                                                                      // 481
 */                                                                                                                  // 482
var formatOutputBytes = function (param) {                                                                           // 483
    return '0x' + param.staticPart();                                                                                // 484
};                                                                                                                   // 485
                                                                                                                     // 486
/**                                                                                                                  // 487
 * Should be used to format output bytes                                                                             // 488
 *                                                                                                                   // 489
 * @method formatOutputDynamicBytes                                                                                  // 490
 * @param {SolidityParam} left-aligned hex representation of string                                                  // 491
 * @returns {String} hex string                                                                                      // 492
 */                                                                                                                  // 493
var formatOutputDynamicBytes = function (param) {                                                                    // 494
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                               // 495
    return '0x' + param.dynamicPart().substr(64, length);                                                            // 496
};                                                                                                                   // 497
                                                                                                                     // 498
/**                                                                                                                  // 499
 * Should be used to format output string                                                                            // 500
 *                                                                                                                   // 501
 * @method formatOutputString                                                                                        // 502
 * @param {SolidityParam} left-aligned hex representation of string                                                  // 503
 * @returns {String} ascii string                                                                                    // 504
 */                                                                                                                  // 505
var formatOutputString = function (param) {                                                                          // 506
    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                               // 507
    return utils.toAscii(param.dynamicPart().substr(64, length));                                                    // 508
};                                                                                                                   // 509
                                                                                                                     // 510
/**                                                                                                                  // 511
 * Should be used to format output address                                                                           // 512
 *                                                                                                                   // 513
 * @method formatOutputAddress                                                                                       // 514
 * @param {SolidityParam} right-aligned input bytes                                                                  // 515
 * @returns {String} address                                                                                         // 516
 */                                                                                                                  // 517
var formatOutputAddress = function (param) {                                                                         // 518
    var value = param.staticPart();                                                                                  // 519
    return "0x" + value.slice(value.length - 40, value.length);                                                      // 520
};                                                                                                                   // 521
                                                                                                                     // 522
module.exports = {                                                                                                   // 523
    formatInputInt: formatInputInt,                                                                                  // 524
    formatInputBytes: formatInputBytes,                                                                              // 525
    formatInputDynamicBytes: formatInputDynamicBytes,                                                                // 526
    formatInputString: formatInputString,                                                                            // 527
    formatInputBool: formatInputBool,                                                                                // 528
    formatInputReal: formatInputReal,                                                                                // 529
    formatOutputInt: formatOutputInt,                                                                                // 530
    formatOutputUInt: formatOutputUInt,                                                                              // 531
    formatOutputReal: formatOutputReal,                                                                              // 532
    formatOutputUReal: formatOutputUReal,                                                                            // 533
    formatOutputBool: formatOutputBool,                                                                              // 534
    formatOutputBytes: formatOutputBytes,                                                                            // 535
    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                              // 536
    formatOutputString: formatOutputString,                                                                          // 537
    formatOutputAddress: formatOutputAddress                                                                         // 538
};                                                                                                                   // 539
                                                                                                                     // 540
                                                                                                                     // 541
},{"../utils/config":5,"../utils/utils":7,"./param":3,"bignumber.js":"bignumber.js"}],3:[function(require,module,exports){
/*                                                                                                                   // 543
    This file is part of ethereum.js.                                                                                // 544
                                                                                                                     // 545
    ethereum.js is free software: you can redistribute it and/or modify                                              // 546
    it under the terms of the GNU Lesser General Public License as published by                                      // 547
    the Free Software Foundation, either version 3 of the License, or                                                // 548
    (at your option) any later version.                                                                              // 549
                                                                                                                     // 550
    ethereum.js is distributed in the hope that it will be useful,                                                   // 551
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 552
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 553
    GNU Lesser General Public License for more details.                                                              // 554
                                                                                                                     // 555
    You should have received a copy of the GNU Lesser General Public License                                         // 556
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 557
*/                                                                                                                   // 558
/**                                                                                                                  // 559
 * @file param.js                                                                                                    // 560
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 561
 * @date 2015                                                                                                        // 562
 */                                                                                                                  // 563
                                                                                                                     // 564
var utils = require('../utils/utils');                                                                               // 565
                                                                                                                     // 566
/**                                                                                                                  // 567
 * SolidityParam object prototype.                                                                                   // 568
 * Should be used when encoding, decoding solidity bytes                                                             // 569
 */                                                                                                                  // 570
var SolidityParam = function (value, offset) {                                                                       // 571
    this.value = value || '';                                                                                        // 572
    this.offset = offset; // offset in bytes                                                                         // 573
};                                                                                                                   // 574
                                                                                                                     // 575
/**                                                                                                                  // 576
 * This method should be used to get length of params's dynamic part                                                 // 577
 *                                                                                                                   // 578
 * @method dynamicPartLength                                                                                         // 579
 * @returns {Number} length of dynamic part (in bytes)                                                               // 580
 */                                                                                                                  // 581
SolidityParam.prototype.dynamicPartLength = function () {                                                            // 582
    return this.dynamicPart().length / 2;                                                                            // 583
};                                                                                                                   // 584
                                                                                                                     // 585
/**                                                                                                                  // 586
 * This method should be used to create copy of solidity param with different offset                                 // 587
 *                                                                                                                   // 588
 * @method withOffset                                                                                                // 589
 * @param {Number} offset length in bytes                                                                            // 590
 * @returns {SolidityParam} new solidity param with applied offset                                                   // 591
 */                                                                                                                  // 592
SolidityParam.prototype.withOffset = function (offset) {                                                             // 593
    return new SolidityParam(this.value, offset);                                                                    // 594
};                                                                                                                   // 595
                                                                                                                     // 596
/**                                                                                                                  // 597
 * This method should be used to combine solidity params together                                                    // 598
 * eg. when appending an array                                                                                       // 599
 *                                                                                                                   // 600
 * @method combine                                                                                                   // 601
 * @param {SolidityParam} param with which we should combine                                                         // 602
 * @param {SolidityParam} result of combination                                                                      // 603
 */                                                                                                                  // 604
SolidityParam.prototype.combine = function (param) {                                                                 // 605
    return new SolidityParam(this.value + param.value);                                                              // 606
};                                                                                                                   // 607
                                                                                                                     // 608
/**                                                                                                                  // 609
 * This method should be called to check if param has dynamic size.                                                  // 610
 * If it has, it returns true, otherwise false                                                                       // 611
 *                                                                                                                   // 612
 * @method isDynamic                                                                                                 // 613
 * @returns {Boolean}                                                                                                // 614
 */                                                                                                                  // 615
SolidityParam.prototype.isDynamic = function () {                                                                    // 616
    return this.value.length > 64 || this.offset !== undefined;                                                      // 617
};                                                                                                                   // 618
                                                                                                                     // 619
/**                                                                                                                  // 620
 * This method should be called to transform offset to bytes                                                         // 621
 *                                                                                                                   // 622
 * @method offsetAsBytes                                                                                             // 623
 * @returns {String} bytes representation of offset                                                                  // 624
 */                                                                                                                  // 625
SolidityParam.prototype.offsetAsBytes = function () {                                                                // 626
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);             // 627
};                                                                                                                   // 628
                                                                                                                     // 629
/**                                                                                                                  // 630
 * This method should be called to get static part of param                                                          // 631
 *                                                                                                                   // 632
 * @method staticPart                                                                                                // 633
 * @returns {String} offset if it is a dynamic param, otherwise value                                                // 634
 */                                                                                                                  // 635
SolidityParam.prototype.staticPart = function () {                                                                   // 636
    if (!this.isDynamic()) {                                                                                         // 637
        return this.value;                                                                                           // 638
    }                                                                                                                // 639
    return this.offsetAsBytes();                                                                                     // 640
};                                                                                                                   // 641
                                                                                                                     // 642
/**                                                                                                                  // 643
 * This method should be called to get dynamic part of param                                                         // 644
 *                                                                                                                   // 645
 * @method dynamicPart                                                                                               // 646
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                // 647
 */                                                                                                                  // 648
SolidityParam.prototype.dynamicPart = function () {                                                                  // 649
    return this.isDynamic() ? this.value : '';                                                                       // 650
};                                                                                                                   // 651
                                                                                                                     // 652
/**                                                                                                                  // 653
 * This method should be called to encode param                                                                      // 654
 *                                                                                                                   // 655
 * @method encode                                                                                                    // 656
 * @returns {String}                                                                                                 // 657
 */                                                                                                                  // 658
SolidityParam.prototype.encode = function () {                                                                       // 659
    return this.staticPart() + this.dynamicPart();                                                                   // 660
};                                                                                                                   // 661
                                                                                                                     // 662
/**                                                                                                                  // 663
 * This method should be called to encode array of params                                                            // 664
 *                                                                                                                   // 665
 * @method encodeList                                                                                                // 666
 * @param {Array[SolidityParam]} params                                                                              // 667
 * @returns {String}                                                                                                 // 668
 */                                                                                                                  // 669
SolidityParam.encodeList = function (params) {                                                                       // 670
                                                                                                                     // 671
    // updating offsets                                                                                              // 672
    var totalOffset = params.length * 32;                                                                            // 673
    var offsetParams = params.map(function (param) {                                                                 // 674
        if (!param.isDynamic()) {                                                                                    // 675
            return param;                                                                                            // 676
        }                                                                                                            // 677
        var offset = totalOffset;                                                                                    // 678
        totalOffset += param.dynamicPartLength();                                                                    // 679
        return param.withOffset(offset);                                                                             // 680
    });                                                                                                              // 681
                                                                                                                     // 682
    // encode everything!                                                                                            // 683
    return offsetParams.reduce(function (result, param) {                                                            // 684
        return result + param.dynamicPart();                                                                         // 685
    }, offsetParams.reduce(function (result, param) {                                                                // 686
        return result + param.staticPart();                                                                          // 687
    }, ''));                                                                                                         // 688
};                                                                                                                   // 689
                                                                                                                     // 690
/**                                                                                                                  // 691
 * This method should be used to decode plain (static) solidity param at given index                                 // 692
 *                                                                                                                   // 693
 * @method decodeParam                                                                                               // 694
 * @param {String} bytes                                                                                             // 695
 * @param {Number} index                                                                                             // 696
 * @returns {SolidityParam}                                                                                          // 697
 */                                                                                                                  // 698
SolidityParam.decodeParam = function (bytes, index) {                                                                // 699
    index = index || 0;                                                                                              // 700
    return new SolidityParam(bytes.substr(index * 64, 64));                                                          // 701
};                                                                                                                   // 702
                                                                                                                     // 703
/**                                                                                                                  // 704
 * This method should be called to get offset value from bytes at given index                                        // 705
 *                                                                                                                   // 706
 * @method getOffset                                                                                                 // 707
 * @param {String} bytes                                                                                             // 708
 * @param {Number} index                                                                                             // 709
 * @returns {Number} offset as number                                                                                // 710
 */                                                                                                                  // 711
var getOffset = function (bytes, index) {                                                                            // 712
    // we can do this cause offset is rather small                                                                   // 713
    return parseInt('0x' + bytes.substr(index * 64, 64));                                                            // 714
};                                                                                                                   // 715
                                                                                                                     // 716
/**                                                                                                                  // 717
 * This method should be called to decode solidity bytes param at given index                                        // 718
 *                                                                                                                   // 719
 * @method decodeBytes                                                                                               // 720
 * @param {String} bytes                                                                                             // 721
 * @param {Number} index                                                                                             // 722
 * @returns {SolidityParam}                                                                                          // 723
 */                                                                                                                  // 724
SolidityParam.decodeBytes = function (bytes, index) {                                                                // 725
    index = index || 0;                                                                                              // 726
                                                                                                                     // 727
    var offset = getOffset(bytes, index);                                                                            // 728
                                                                                                                     // 729
    var l = parseInt('0x' + bytes.substr(offset * 2, 64));                                                           // 730
    l = Math.floor((l + 31) / 32);                                                                                   // 731
                                                                                                                     // 732
    // (1 + l) * , cause we also parse length                                                                        // 733
    return new SolidityParam(bytes.substr(offset * 2, (1 + l) * 64), 0);                                             // 734
};                                                                                                                   // 735
                                                                                                                     // 736
/**                                                                                                                  // 737
 * This method should be used to decode solidity array at given index                                                // 738
 *                                                                                                                   // 739
 * @method decodeArray                                                                                               // 740
 * @param {String} bytes                                                                                             // 741
 * @param {Number} index                                                                                             // 742
 * @returns {SolidityParam}                                                                                          // 743
 */                                                                                                                  // 744
SolidityParam.decodeArray = function (bytes, index) {                                                                // 745
    index = index || 0;                                                                                              // 746
    var offset = getOffset(bytes, index);                                                                            // 747
    var length = parseInt('0x' + bytes.substr(offset * 2, 64));                                                      // 748
    return new SolidityParam(bytes.substr(offset * 2, (length + 1) * 64), 0);                                        // 749
};                                                                                                                   // 750
                                                                                                                     // 751
module.exports = SolidityParam;                                                                                      // 752
                                                                                                                     // 753
                                                                                                                     // 754
},{"../utils/utils":7}],4:[function(require,module,exports){                                                         // 755
'use strict';                                                                                                        // 756
                                                                                                                     // 757
// go env doesn't have and need XMLHttpRequest                                                                       // 758
if (typeof XMLHttpRequest === 'undefined') {                                                                         // 759
    exports.XMLHttpRequest = {};                                                                                     // 760
} else {                                                                                                             // 761
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line                                                   // 762
}                                                                                                                    // 763
                                                                                                                     // 764
                                                                                                                     // 765
},{}],5:[function(require,module,exports){                                                                           // 766
/*                                                                                                                   // 767
    This file is part of ethereum.js.                                                                                // 768
                                                                                                                     // 769
    ethereum.js is free software: you can redistribute it and/or modify                                              // 770
    it under the terms of the GNU Lesser General Public License as published by                                      // 771
    the Free Software Foundation, either version 3 of the License, or                                                // 772
    (at your option) any later version.                                                                              // 773
                                                                                                                     // 774
    ethereum.js is distributed in the hope that it will be useful,                                                   // 775
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 776
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 777
    GNU Lesser General Public License for more details.                                                              // 778
                                                                                                                     // 779
    You should have received a copy of the GNU Lesser General Public License                                         // 780
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 781
*/                                                                                                                   // 782
/** @file config.js                                                                                                  // 783
 * @authors:                                                                                                         // 784
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 785
 * @date 2015                                                                                                        // 786
 */                                                                                                                  // 787
                                                                                                                     // 788
/**                                                                                                                  // 789
 * Utils                                                                                                             // 790
 *                                                                                                                   // 791
 * @module utils                                                                                                     // 792
 */                                                                                                                  // 793
                                                                                                                     // 794
/**                                                                                                                  // 795
 * Utility functions                                                                                                 // 796
 *                                                                                                                   // 797
 * @class [utils] config                                                                                             // 798
 * @constructor                                                                                                      // 799
 */                                                                                                                  // 800
                                                                                                                     // 801
/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                   // 802
var BigNumber = require('bignumber.js');                                                                             // 803
                                                                                                                     // 804
var ETH_UNITS = [                                                                                                    // 805
    'wei',                                                                                                           // 806
    'kwei',                                                                                                          // 807
    'Mwei',                                                                                                          // 808
    'Gwei',                                                                                                          // 809
    'szabo',                                                                                                         // 810
    'finney',                                                                                                        // 811
    'femtoether',                                                                                                    // 812
    'picoether',                                                                                                     // 813
    'nanoether',                                                                                                     // 814
    'microether',                                                                                                    // 815
    'milliether',                                                                                                    // 816
    'nano',                                                                                                          // 817
    'micro',                                                                                                         // 818
    'milli',                                                                                                         // 819
    'ether',                                                                                                         // 820
    'grand',                                                                                                         // 821
    'Mether',                                                                                                        // 822
    'Gether',                                                                                                        // 823
    'Tether',                                                                                                        // 824
    'Pether',                                                                                                        // 825
    'Eether',                                                                                                        // 826
    'Zether',                                                                                                        // 827
    'Yether',                                                                                                        // 828
    'Nether',                                                                                                        // 829
    'Dether',                                                                                                        // 830
    'Vether',                                                                                                        // 831
    'Uether'                                                                                                         // 832
];                                                                                                                   // 833
                                                                                                                     // 834
module.exports = {                                                                                                   // 835
    ETH_PADDING: 32,                                                                                                 // 836
    ETH_SIGNATURE_LENGTH: 4,                                                                                         // 837
    ETH_UNITS: ETH_UNITS,                                                                                            // 838
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                            // 839
    ETH_POLLING_TIMEOUT: 1000/2,                                                                                     // 840
    defaultBlock: 'latest',                                                                                          // 841
    defaultAccount: undefined                                                                                        // 842
};                                                                                                                   // 843
                                                                                                                     // 844
                                                                                                                     // 845
},{"bignumber.js":"bignumber.js"}],6:[function(require,module,exports){                                              // 846
/*                                                                                                                   // 847
    This file is part of ethereum.js.                                                                                // 848
                                                                                                                     // 849
    ethereum.js is free software: you can redistribute it and/or modify                                              // 850
    it under the terms of the GNU Lesser General Public License as published by                                      // 851
    the Free Software Foundation, either version 3 of the License, or                                                // 852
    (at your option) any later version.                                                                              // 853
                                                                                                                     // 854
    ethereum.js is distributed in the hope that it will be useful,                                                   // 855
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 856
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 857
    GNU Lesser General Public License for more details.                                                              // 858
                                                                                                                     // 859
    You should have received a copy of the GNU Lesser General Public License                                         // 860
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 861
*/                                                                                                                   // 862
/**                                                                                                                  // 863
 * @file sha3.js                                                                                                     // 864
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 865
 * @date 2015                                                                                                        // 866
 */                                                                                                                  // 867
                                                                                                                     // 868
var utils = require('./utils');                                                                                      // 869
var sha3 = require('crypto-js/sha3');                                                                                // 870
                                                                                                                     // 871
module.exports = function (str, isNew) {                                                                             // 872
    if (str.substr(0, 2) === '0x' && !isNew) {                                                                       // 873
        console.warn('requirement of using web3.fromAscii before sha3 is deprecated');                               // 874
        console.warn('new usage: \'web3.sha3("hello")\'');                                                           // 875
        console.warn('see https://github.com/ethereum/web3.js/pull/205');                                            // 876
        console.warn('if you need to hash hex value, you can do \'sha3("0xfff", true)\'');                           // 877
        str = utils.toAscii(str);                                                                                    // 878
    }                                                                                                                // 879
                                                                                                                     // 880
    return sha3(str, {                                                                                               // 881
        outputLength: 256                                                                                            // 882
    }).toString();                                                                                                   // 883
};                                                                                                                   // 884
                                                                                                                     // 885
                                                                                                                     // 886
},{"./utils":7,"crypto-js/sha3":34}],7:[function(require,module,exports){                                            // 887
/*                                                                                                                   // 888
    This file is part of ethereum.js.                                                                                // 889
                                                                                                                     // 890
    ethereum.js is free software: you can redistribute it and/or modify                                              // 891
    it under the terms of the GNU Lesser General Public License as published by                                      // 892
    the Free Software Foundation, either version 3 of the License, or                                                // 893
    (at your option) any later version.                                                                              // 894
                                                                                                                     // 895
    ethereum.js is distributed in the hope that it will be useful,                                                   // 896
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 897
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 898
    GNU Lesser General Public License for more details.                                                              // 899
                                                                                                                     // 900
    You should have received a copy of the GNU Lesser General Public License                                         // 901
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 902
*/                                                                                                                   // 903
/**                                                                                                                  // 904
 * @file utils.js                                                                                                    // 905
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 906
 * @date 2015                                                                                                        // 907
 */                                                                                                                  // 908
                                                                                                                     // 909
/**                                                                                                                  // 910
 * Utils                                                                                                             // 911
 *                                                                                                                   // 912
 * @module utils                                                                                                     // 913
 */                                                                                                                  // 914
                                                                                                                     // 915
/**                                                                                                                  // 916
 * Utility functions                                                                                                 // 917
 *                                                                                                                   // 918
 * @class [utils] utils                                                                                              // 919
 * @constructor                                                                                                      // 920
 */                                                                                                                  // 921
                                                                                                                     // 922
var BigNumber = require('bignumber.js');                                                                             // 923
                                                                                                                     // 924
var unitMap = {                                                                                                      // 925
    'wei':          '1',                                                                                             // 926
    'kwei':         '1000',                                                                                          // 927
    'ada':          '1000',                                                                                          // 928
    'femtoether':   '1000',                                                                                          // 929
    'mwei':         '1000000',                                                                                       // 930
    'babbage':      '1000000',                                                                                       // 931
    'picoether':    '1000000',                                                                                       // 932
    'gwei':         '1000000000',                                                                                    // 933
    'shannon':      '1000000000',                                                                                    // 934
    'nanoether':    '1000000000',                                                                                    // 935
    'nano':         '1000000000',                                                                                    // 936
    'szabo':        '1000000000000',                                                                                 // 937
    'microether':   '1000000000000',                                                                                 // 938
    'micro':        '1000000000000',                                                                                 // 939
    'finney':       '1000000000000000',                                                                              // 940
    'milliether':    '1000000000000000',                                                                             // 941
    'milli':         '1000000000000000',                                                                             // 942
    'ether':        '1000000000000000000',                                                                           // 943
    'kether':       '1000000000000000000000',                                                                        // 944
    'grand':        '1000000000000000000000',                                                                        // 945
    'einstein':     '1000000000000000000000',                                                                        // 946
    'mether':       '1000000000000000000000000',                                                                     // 947
    'gether':       '1000000000000000000000000000',                                                                  // 948
    'tether':       '1000000000000000000000000000000'                                                                // 949
};                                                                                                                   // 950
                                                                                                                     // 951
/**                                                                                                                  // 952
 * Should be called to pad string to expected length                                                                 // 953
 *                                                                                                                   // 954
 * @method padLeft                                                                                                   // 955
 * @param {String} string to be padded                                                                               // 956
 * @param {Number} characters that result string should have                                                         // 957
 * @param {String} sign, by default 0                                                                                // 958
 * @returns {String} right aligned string                                                                            // 959
 */                                                                                                                  // 960
var padLeft = function (string, chars, sign) {                                                                       // 961
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;                                    // 962
};                                                                                                                   // 963
                                                                                                                     // 964
/**                                                                                                                  // 965
 * Should be called to pad string to expected length                                                                 // 966
 *                                                                                                                   // 967
 * @method padRight                                                                                                  // 968
 * @param {String} string to be padded                                                                               // 969
 * @param {Number} characters that result string should have                                                         // 970
 * @param {String} sign, by default 0                                                                                // 971
 * @returns {String} right aligned string                                                                            // 972
 */                                                                                                                  // 973
var padRight = function (string, chars, sign) {                                                                      // 974
    return string + (new Array(chars - string.length + 1).join(sign ? sign : "0"));                                  // 975
};                                                                                                                   // 976
                                                                                                                     // 977
/**                                                                                                                  // 978
 * Should be called to get sting from it's hex representation                                                        // 979
 *                                                                                                                   // 980
 * @method toAscii                                                                                                   // 981
 * @param {String} string in hex                                                                                     // 982
 * @returns {String} ascii string representation of hex value                                                        // 983
 */                                                                                                                  // 984
var toAscii = function(hex) {                                                                                        // 985
// Find termination                                                                                                  // 986
    var str = "";                                                                                                    // 987
    var i = 0, l = hex.length;                                                                                       // 988
    if (hex.substring(0, 2) === '0x') {                                                                              // 989
        i = 2;                                                                                                       // 990
    }                                                                                                                // 991
    for (; i < l; i+=2) {                                                                                            // 992
        var code = parseInt(hex.substr(i, 2), 16);                                                                   // 993
        str += String.fromCharCode(code);                                                                            // 994
    }                                                                                                                // 995
                                                                                                                     // 996
    return str;                                                                                                      // 997
};                                                                                                                   // 998
                                                                                                                     // 999
/**                                                                                                                  // 1000
 * Shold be called to get hex representation (prefixed by 0x) of ascii string                                        // 1001
 *                                                                                                                   // 1002
 * @method toHexNative                                                                                               // 1003
 * @param {String} string                                                                                            // 1004
 * @returns {String} hex representation of input string                                                              // 1005
 */                                                                                                                  // 1006
var toHexNative = function(str) {                                                                                    // 1007
    var hex = "";                                                                                                    // 1008
    for(var i = 0; i < str.length; i++) {                                                                            // 1009
        var n = str.charCodeAt(i).toString(16);                                                                      // 1010
        hex += n.length < 2 ? '0' + n : n;                                                                           // 1011
    }                                                                                                                // 1012
                                                                                                                     // 1013
    return hex;                                                                                                      // 1014
};                                                                                                                   // 1015
                                                                                                                     // 1016
/**                                                                                                                  // 1017
 * Shold be called to get hex representation (prefixed by 0x) of ascii string                                        // 1018
 *                                                                                                                   // 1019
 * @method fromAscii                                                                                                 // 1020
 * @param {String} string                                                                                            // 1021
 * @param {Number} optional padding                                                                                  // 1022
 * @returns {String} hex representation of input string                                                              // 1023
 */                                                                                                                  // 1024
var fromAscii = function(str, pad) {                                                                                 // 1025
    pad = pad === undefined ? 0 : pad;                                                                               // 1026
    var hex = toHexNative(str);                                                                                      // 1027
    while (hex.length < pad*2)                                                                                       // 1028
        hex += "00";                                                                                                 // 1029
    return "0x" + hex;                                                                                               // 1030
};                                                                                                                   // 1031
                                                                                                                     // 1032
/**                                                                                                                  // 1033
 * Should be used to create full function/event name from json abi                                                   // 1034
 *                                                                                                                   // 1035
 * @method transformToFullName                                                                                       // 1036
 * @param {Object} json-abi                                                                                          // 1037
 * @return {String} full fnction/event name                                                                          // 1038
 */                                                                                                                  // 1039
var transformToFullName = function (json) {                                                                          // 1040
    if (json.name.indexOf('(') !== -1) {                                                                             // 1041
        return json.name;                                                                                            // 1042
    }                                                                                                                // 1043
                                                                                                                     // 1044
    var typeName = json.inputs.map(function(i){return i.type; }).join();                                             // 1045
    return json.name + '(' + typeName + ')';                                                                         // 1046
};                                                                                                                   // 1047
                                                                                                                     // 1048
/**                                                                                                                  // 1049
 * Should be called to get display name of contract function                                                         // 1050
 *                                                                                                                   // 1051
 * @method extractDisplayName                                                                                        // 1052
 * @param {String} name of function/event                                                                            // 1053
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                               // 1054
 */                                                                                                                  // 1055
var extractDisplayName = function (name) {                                                                           // 1056
    var length = name.indexOf('(');                                                                                  // 1057
    return length !== -1 ? name.substr(0, length) : name;                                                            // 1058
};                                                                                                                   // 1059
                                                                                                                     // 1060
/// @returns overloaded part of function/event name                                                                  // 1061
var extractTypeName = function (name) {                                                                              // 1062
    /// TODO: make it invulnerable                                                                                   // 1063
    var length = name.indexOf('(');                                                                                  // 1064
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";            // 1065
};                                                                                                                   // 1066
                                                                                                                     // 1067
/**                                                                                                                  // 1068
 * Converts value to it's decimal representation in string                                                           // 1069
 *                                                                                                                   // 1070
 * @method toDecimal                                                                                                 // 1071
 * @param {String|Number|BigNumber}                                                                                  // 1072
 * @return {String}                                                                                                  // 1073
 */                                                                                                                  // 1074
var toDecimal = function (value) {                                                                                   // 1075
    return toBigNumber(value).toNumber();                                                                            // 1076
};                                                                                                                   // 1077
                                                                                                                     // 1078
/**                                                                                                                  // 1079
 * Converts value to it's hex representation                                                                         // 1080
 *                                                                                                                   // 1081
 * @method fromDecimal                                                                                               // 1082
 * @param {String|Number|BigNumber}                                                                                  // 1083
 * @return {String}                                                                                                  // 1084
 */                                                                                                                  // 1085
var fromDecimal = function (value) {                                                                                 // 1086
    var number = toBigNumber(value);                                                                                 // 1087
    var result = number.toString(16);                                                                                // 1088
                                                                                                                     // 1089
    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                            // 1090
};                                                                                                                   // 1091
                                                                                                                     // 1092
/**                                                                                                                  // 1093
 * Auto converts any given value into it's hex representation.                                                       // 1094
 *                                                                                                                   // 1095
 * And even stringifys objects before.                                                                               // 1096
 *                                                                                                                   // 1097
 * @method toHex                                                                                                     // 1098
 * @param {String|Number|BigNumber|Object}                                                                           // 1099
 * @return {String}                                                                                                  // 1100
 */                                                                                                                  // 1101
var toHex = function (val) {                                                                                         // 1102
    /*jshint maxcomplexity: 8 */                                                                                     // 1103
                                                                                                                     // 1104
    if (isBoolean(val))                                                                                              // 1105
        return fromDecimal(+val);                                                                                    // 1106
                                                                                                                     // 1107
    if (isBigNumber(val))                                                                                            // 1108
        return fromDecimal(val);                                                                                     // 1109
                                                                                                                     // 1110
    if (isObject(val))                                                                                               // 1111
        return fromAscii(JSON.stringify(val));                                                                       // 1112
                                                                                                                     // 1113
    // if its a negative number, pass it through fromDecimal                                                         // 1114
    if (isString(val)) {                                                                                             // 1115
        if (val.indexOf('-0x') === 0)                                                                                // 1116
            return fromDecimal(val);                                                                                 // 1117
        else if (!isFinite(val))                                                                                     // 1118
            return fromAscii(val);                                                                                   // 1119
        else if(val.indexOf('0x') === 0)                                                                             // 1120
            return val;                                                                                              // 1121
    }                                                                                                                // 1122
                                                                                                                     // 1123
    return fromDecimal(val);                                                                                         // 1124
};                                                                                                                   // 1125
                                                                                                                     // 1126
/**                                                                                                                  // 1127
 * Returns value of unit in Wei                                                                                      // 1128
 *                                                                                                                   // 1129
 * @method getValueOfUnit                                                                                            // 1130
 * @param {String} unit the unit to convert to, default ether                                                        // 1131
 * @returns {BigNumber} value of the unit (in Wei)                                                                   // 1132
 * @throws error if the unit is not correct:w                                                                        // 1133
 */                                                                                                                  // 1134
var getValueOfUnit = function (unit) {                                                                               // 1135
    unit = unit ? unit.toLowerCase() : 'ether';                                                                      // 1136
    var unitValue = unitMap[unit];                                                                                   // 1137
    if (unitValue === undefined) {                                                                                   // 1138
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }                                                                                                                // 1140
    return new BigNumber(unitValue, 10);                                                                             // 1141
};                                                                                                                   // 1142
                                                                                                                     // 1143
/**                                                                                                                  // 1144
 * Takes a number of wei and converts it to any other ether unit.                                                    // 1145
 *                                                                                                                   // 1146
 * Possible units are:                                                                                               // 1147
 *   SI Short   SI Full        Effigy       Other                                                                    // 1148
 * - kwei       femtoether     ada                                                                                   // 1149
 * - mwei       picoether      babbage                                                                               // 1150
 * - gwei       nanoether      shannon      nano                                                                     // 1151
 * - --         microether     szabo        micro                                                                    // 1152
 * - --         milliether     finney       milli                                                                    // 1153
 * - ether      --             --                                                                                    // 1154
 * - kether                    einstein     grand                                                                    // 1155
 * - mether                                                                                                          // 1156
 * - gether                                                                                                          // 1157
 * - tether                                                                                                          // 1158
 *                                                                                                                   // 1159
 * @method fromWei                                                                                                   // 1160
 * @param {Number|String} number can be a number, number string or a HEX of a decimal                                // 1161
 * @param {String} unit the unit to convert to, default ether                                                        // 1162
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                  // 1163
*/                                                                                                                   // 1164
var fromWei = function(number, unit) {                                                                               // 1165
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                           // 1166
                                                                                                                     // 1167
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                             // 1168
};                                                                                                                   // 1169
                                                                                                                     // 1170
/**                                                                                                                  // 1171
 * Takes a number of a unit and converts it to wei.                                                                  // 1172
 *                                                                                                                   // 1173
 * Possible units are:                                                                                               // 1174
 *   SI Short   SI Full        Effigy       Other                                                                    // 1175
 * - kwei       femtoether     ada                                                                                   // 1176
 * - mwei       picoether      babbage                                                                               // 1177
 * - gwei       nanoether      shannon      nano                                                                     // 1178
 * - --         microether     szabo        micro                                                                    // 1179
 * - --         milliether     finney       milli                                                                    // 1180
 * - ether      --             --                                                                                    // 1181
 * - kether                    einstein     grand                                                                    // 1182
 * - mether                                                                                                          // 1183
 * - gether                                                                                                          // 1184
 * - tether                                                                                                          // 1185
 *                                                                                                                   // 1186
 * @method toWei                                                                                                     // 1187
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                      // 1188
 * @param {String} unit the unit to convert from, default ether                                                      // 1189
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                  // 1190
*/                                                                                                                   // 1191
var toWei = function(number, unit) {                                                                                 // 1192
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                               // 1193
                                                                                                                     // 1194
    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                             // 1195
};                                                                                                                   // 1196
                                                                                                                     // 1197
/**                                                                                                                  // 1198
 * Takes an input and transforms it into an bignumber                                                                // 1199
 *                                                                                                                   // 1200
 * @method toBigNumber                                                                                               // 1201
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                        // 1202
 * @return {BigNumber} BigNumber                                                                                     // 1203
*/                                                                                                                   // 1204
var toBigNumber = function(number) {                                                                                 // 1205
    /*jshint maxcomplexity:5 */                                                                                      // 1206
    number = number || 0;                                                                                            // 1207
    if (isBigNumber(number))                                                                                         // 1208
        return number;                                                                                               // 1209
                                                                                                                     // 1210
    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                           // 1211
        return new BigNumber(number.replace('0x',''), 16);                                                           // 1212
    }                                                                                                                // 1213
                                                                                                                     // 1214
    return new BigNumber(number.toString(10), 10);                                                                   // 1215
};                                                                                                                   // 1216
                                                                                                                     // 1217
/**                                                                                                                  // 1218
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement                   // 1219
 *                                                                                                                   // 1220
 * @method toTwosComplement                                                                                          // 1221
 * @param {Number|String|BigNumber}                                                                                  // 1222
 * @return {BigNumber}                                                                                               // 1223
 */                                                                                                                  // 1224
var toTwosComplement = function (number) {                                                                           // 1225
    var bigNumber = toBigNumber(number);                                                                             // 1226
    if (bigNumber.lessThan(0)) {                                                                                     // 1227
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }                                                                                                                // 1229
    return bigNumber;                                                                                                // 1230
};                                                                                                                   // 1231
                                                                                                                     // 1232
/**                                                                                                                  // 1233
 * Checks if the given string is strictly an address                                                                 // 1234
 *                                                                                                                   // 1235
 * @method isStrictAddress                                                                                           // 1236
 * @param {String} address the given HEX adress                                                                      // 1237
 * @return {Boolean}                                                                                                 // 1238
*/                                                                                                                   // 1239
var isStrictAddress = function (address) {                                                                           // 1240
    return /^0x[0-9a-f]{40}$/.test(address);                                                                         // 1241
};                                                                                                                   // 1242
                                                                                                                     // 1243
/**                                                                                                                  // 1244
 * Checks if the given string is an address                                                                          // 1245
 *                                                                                                                   // 1246
 * @method isAddress                                                                                                 // 1247
 * @param {String} address the given HEX adress                                                                      // 1248
 * @return {Boolean}                                                                                                 // 1249
*/                                                                                                                   // 1250
var isAddress = function (address) {                                                                                 // 1251
    return /^(0x)?[0-9a-f]{40}$/.test(address);                                                                      // 1252
};                                                                                                                   // 1253
                                                                                                                     // 1254
/**                                                                                                                  // 1255
 * Transforms given string to valid 20 bytes-length addres with 0x prefix                                            // 1256
 *                                                                                                                   // 1257
 * @method toAddress                                                                                                 // 1258
 * @param {String} address                                                                                           // 1259
 * @return {String} formatted address                                                                                // 1260
 */                                                                                                                  // 1261
var toAddress = function (address) {                                                                                 // 1262
    if (isStrictAddress(address)) {                                                                                  // 1263
        return address;                                                                                              // 1264
    }                                                                                                                // 1265
                                                                                                                     // 1266
    if (/^[0-9a-f]{40}$/.test(address)) {                                                                            // 1267
        return '0x' + address;                                                                                       // 1268
    }                                                                                                                // 1269
                                                                                                                     // 1270
    return '0x' + padLeft(toHex(address).substr(2), 40);                                                             // 1271
};                                                                                                                   // 1272
                                                                                                                     // 1273
                                                                                                                     // 1274
/**                                                                                                                  // 1275
 * Returns true if object is BigNumber, otherwise false                                                              // 1276
 *                                                                                                                   // 1277
 * @method isBigNumber                                                                                               // 1278
 * @param {Object}                                                                                                   // 1279
 * @return {Boolean}                                                                                                 // 1280
 */                                                                                                                  // 1281
var isBigNumber = function (object) {                                                                                // 1282
    return object instanceof BigNumber ||                                                                            // 1283
        (object && object.constructor && object.constructor.name === 'BigNumber');                                   // 1284
};                                                                                                                   // 1285
                                                                                                                     // 1286
/**                                                                                                                  // 1287
 * Returns true if object is string, otherwise false                                                                 // 1288
 *                                                                                                                   // 1289
 * @method isString                                                                                                  // 1290
 * @param {Object}                                                                                                   // 1291
 * @return {Boolean}                                                                                                 // 1292
 */                                                                                                                  // 1293
var isString = function (object) {                                                                                   // 1294
    return typeof object === 'string' ||                                                                             // 1295
        (object && object.constructor && object.constructor.name === 'String');                                      // 1296
};                                                                                                                   // 1297
                                                                                                                     // 1298
/**                                                                                                                  // 1299
 * Returns true if object is function, otherwise false                                                               // 1300
 *                                                                                                                   // 1301
 * @method isFunction                                                                                                // 1302
 * @param {Object}                                                                                                   // 1303
 * @return {Boolean}                                                                                                 // 1304
 */                                                                                                                  // 1305
var isFunction = function (object) {                                                                                 // 1306
    return typeof object === 'function';                                                                             // 1307
};                                                                                                                   // 1308
                                                                                                                     // 1309
/**                                                                                                                  // 1310
 * Returns true if object is Objet, otherwise false                                                                  // 1311
 *                                                                                                                   // 1312
 * @method isObject                                                                                                  // 1313
 * @param {Object}                                                                                                   // 1314
 * @return {Boolean}                                                                                                 // 1315
 */                                                                                                                  // 1316
var isObject = function (object) {                                                                                   // 1317
    return typeof object === 'object';                                                                               // 1318
};                                                                                                                   // 1319
                                                                                                                     // 1320
/**                                                                                                                  // 1321
 * Returns true if object is boolean, otherwise false                                                                // 1322
 *                                                                                                                   // 1323
 * @method isBoolean                                                                                                 // 1324
 * @param {Object}                                                                                                   // 1325
 * @return {Boolean}                                                                                                 // 1326
 */                                                                                                                  // 1327
var isBoolean = function (object) {                                                                                  // 1328
    return typeof object === 'boolean';                                                                              // 1329
};                                                                                                                   // 1330
                                                                                                                     // 1331
/**                                                                                                                  // 1332
 * Returns true if object is array, otherwise false                                                                  // 1333
 *                                                                                                                   // 1334
 * @method isArray                                                                                                   // 1335
 * @param {Object}                                                                                                   // 1336
 * @return {Boolean}                                                                                                 // 1337
 */                                                                                                                  // 1338
var isArray = function (object) {                                                                                    // 1339
    return object instanceof Array;                                                                                  // 1340
};                                                                                                                   // 1341
                                                                                                                     // 1342
/**                                                                                                                  // 1343
 * Returns true if given string is valid json object                                                                 // 1344
 *                                                                                                                   // 1345
 * @method isJson                                                                                                    // 1346
 * @param {String}                                                                                                   // 1347
 * @return {Boolean}                                                                                                 // 1348
 */                                                                                                                  // 1349
var isJson = function (str) {                                                                                        // 1350
    try {                                                                                                            // 1351
        return !!JSON.parse(str);                                                                                    // 1352
    } catch (e) {                                                                                                    // 1353
        return false;                                                                                                // 1354
    }                                                                                                                // 1355
};                                                                                                                   // 1356
                                                                                                                     // 1357
/**                                                                                                                  // 1358
 * This method should be called to check if string is valid ethereum IBAN number                                     // 1359
 * Supports direct and indirect IBANs                                                                                // 1360
 *                                                                                                                   // 1361
 * @method isIBAN                                                                                                    // 1362
 * @param {String}                                                                                                   // 1363
 * @return {Boolean}                                                                                                 // 1364
 */                                                                                                                  // 1365
var isIBAN = function (iban) {                                                                                       // 1366
    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30})$/.test(iban);                                                  // 1367
};                                                                                                                   // 1368
                                                                                                                     // 1369
module.exports = {                                                                                                   // 1370
    padLeft: padLeft,                                                                                                // 1371
    padRight: padRight,                                                                                              // 1372
    toHex: toHex,                                                                                                    // 1373
    toDecimal: toDecimal,                                                                                            // 1374
    fromDecimal: fromDecimal,                                                                                        // 1375
    toAscii: toAscii,                                                                                                // 1376
    fromAscii: fromAscii,                                                                                            // 1377
    transformToFullName: transformToFullName,                                                                        // 1378
    extractDisplayName: extractDisplayName,                                                                          // 1379
    extractTypeName: extractTypeName,                                                                                // 1380
    toWei: toWei,                                                                                                    // 1381
    fromWei: fromWei,                                                                                                // 1382
    toBigNumber: toBigNumber,                                                                                        // 1383
    toTwosComplement: toTwosComplement,                                                                              // 1384
    toAddress: toAddress,                                                                                            // 1385
    isBigNumber: isBigNumber,                                                                                        // 1386
    isStrictAddress: isStrictAddress,                                                                                // 1387
    isAddress: isAddress,                                                                                            // 1388
    isFunction: isFunction,                                                                                          // 1389
    isString: isString,                                                                                              // 1390
    isObject: isObject,                                                                                              // 1391
    isBoolean: isBoolean,                                                                                            // 1392
    isArray: isArray,                                                                                                // 1393
    isJson: isJson,                                                                                                  // 1394
    isIBAN: isIBAN                                                                                                   // 1395
};                                                                                                                   // 1396
                                                                                                                     // 1397
                                                                                                                     // 1398
},{"bignumber.js":"bignumber.js"}],8:[function(require,module,exports){                                              // 1399
module.exports={                                                                                                     // 1400
    "version": "0.8.1"                                                                                               // 1401
}                                                                                                                    // 1402
                                                                                                                     // 1403
},{}],9:[function(require,module,exports){                                                                           // 1404
/*                                                                                                                   // 1405
    This file is part of ethereum.js.                                                                                // 1406
                                                                                                                     // 1407
    ethereum.js is free software: you can redistribute it and/or modify                                              // 1408
    it under the terms of the GNU Lesser General Public License as published by                                      // 1409
    the Free Software Foundation, either version 3 of the License, or                                                // 1410
    (at your option) any later version.                                                                              // 1411
                                                                                                                     // 1412
    ethereum.js is distributed in the hope that it will be useful,                                                   // 1413
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 1414
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 1415
    GNU Lesser General Public License for more details.                                                              // 1416
                                                                                                                     // 1417
    You should have received a copy of the GNU Lesser General Public License                                         // 1418
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 1419
*/                                                                                                                   // 1420
/** @file web3.js                                                                                                    // 1421
 * @authors:                                                                                                         // 1422
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                // 1423
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 1424
 *   Marian Oancea <marian@ethdev.com>                                                                               // 1425
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                         // 1426
 *   Gav Wood <g@ethdev.com>                                                                                         // 1427
 * @date 2014                                                                                                        // 1428
 */                                                                                                                  // 1429
                                                                                                                     // 1430
var version = require('./version.json');                                                                             // 1431
var net = require('./web3/net');                                                                                     // 1432
var eth = require('./web3/eth');                                                                                     // 1433
var db = require('./web3/db');                                                                                       // 1434
var shh = require('./web3/shh');                                                                                     // 1435
var watches = require('./web3/watches');                                                                             // 1436
var Filter = require('./web3/filter');                                                                               // 1437
var utils = require('./utils/utils');                                                                                // 1438
var formatters = require('./web3/formatters');                                                                       // 1439
var RequestManager = require('./web3/requestmanager');                                                               // 1440
var c = require('./utils/config');                                                                                   // 1441
var Property = require('./web3/property');                                                                           // 1442
var Batch = require('./web3/batch');                                                                                 // 1443
var sha3 = require('./utils/sha3');                                                                                  // 1444
                                                                                                                     // 1445
var web3Properties = [                                                                                               // 1446
    new Property({                                                                                                   // 1447
        name: 'version.client',                                                                                      // 1448
        getter: 'web3_clientVersion'                                                                                 // 1449
    }),                                                                                                              // 1450
    new Property({                                                                                                   // 1451
        name: 'version.network',                                                                                     // 1452
        getter: 'net_version',                                                                                       // 1453
        inputFormatter: utils.toDecimal                                                                              // 1454
    }),                                                                                                              // 1455
    new Property({                                                                                                   // 1456
        name: 'version.ethereum',                                                                                    // 1457
        getter: 'eth_protocolVersion',                                                                               // 1458
        inputFormatter: utils.toDecimal                                                                              // 1459
    }),                                                                                                              // 1460
    new Property({                                                                                                   // 1461
        name: 'version.whisper',                                                                                     // 1462
        getter: 'shh_version',                                                                                       // 1463
        inputFormatter: utils.toDecimal                                                                              // 1464
    })                                                                                                               // 1465
];                                                                                                                   // 1466
                                                                                                                     // 1467
/// creates methods in a given object based on method description on input                                           // 1468
/// setups api calls for these methods                                                                               // 1469
var setupMethods = function (obj, methods) {                                                                         // 1470
    methods.forEach(function (method) {                                                                              // 1471
        method.attachToObject(obj);                                                                                  // 1472
    });                                                                                                              // 1473
};                                                                                                                   // 1474
                                                                                                                     // 1475
/// creates properties in a given object based on properties description on input                                    // 1476
/// setups api calls for these properties                                                                            // 1477
var setupProperties = function (obj, properties) {                                                                   // 1478
    properties.forEach(function (property) {                                                                         // 1479
        property.attachToObject(obj);                                                                                // 1480
    });                                                                                                              // 1481
};                                                                                                                   // 1482
                                                                                                                     // 1483
/// setups web3 object, and it's in-browser executed methods                                                         // 1484
var web3 = {};                                                                                                       // 1485
web3.providers = {};                                                                                                 // 1486
web3.currentProvider = null;                                                                                         // 1487
web3.version = {};                                                                                                   // 1488
web3.version.api = version.version;                                                                                  // 1489
web3.eth = {};                                                                                                       // 1490
                                                                                                                     // 1491
/*jshint maxparams:4 */                                                                                              // 1492
web3.eth.filter = function (fil, callback) {                                                                         // 1493
    return new Filter(fil, watches.eth(), formatters.outputLogFormatter, callback);                                  // 1494
};                                                                                                                   // 1495
/*jshint maxparams:3 */                                                                                              // 1496
                                                                                                                     // 1497
web3.shh = {};                                                                                                       // 1498
web3.shh.filter = function (fil, callback) {                                                                         // 1499
    return new Filter(fil, watches.shh(), formatters.outputPostFormatter, callback);                                 // 1500
};                                                                                                                   // 1501
web3.net = {};                                                                                                       // 1502
web3.db = {};                                                                                                        // 1503
web3.setProvider = function (provider) {                                                                             // 1504
    this.currentProvider = provider;                                                                                 // 1505
    RequestManager.getInstance().setProvider(provider);                                                              // 1506
};                                                                                                                   // 1507
web3.reset = function () {                                                                                           // 1508
    RequestManager.getInstance().reset();                                                                            // 1509
    c.defaultBlock = 'latest';                                                                                       // 1510
    c.defaultAccount = undefined;                                                                                    // 1511
};                                                                                                                   // 1512
web3.toHex = utils.toHex;                                                                                            // 1513
web3.toAscii = utils.toAscii;                                                                                        // 1514
web3.fromAscii = utils.fromAscii;                                                                                    // 1515
web3.toDecimal = utils.toDecimal;                                                                                    // 1516
web3.fromDecimal = utils.fromDecimal;                                                                                // 1517
web3.toBigNumber = utils.toBigNumber;                                                                                // 1518
web3.toWei = utils.toWei;                                                                                            // 1519
web3.fromWei = utils.fromWei;                                                                                        // 1520
web3.isAddress = utils.isAddress;                                                                                    // 1521
web3.isIBAN = utils.isIBAN;                                                                                          // 1522
web3.sha3 = sha3;                                                                                                    // 1523
web3.createBatch = function () {                                                                                     // 1524
    return new Batch();                                                                                              // 1525
};                                                                                                                   // 1526
                                                                                                                     // 1527
// ADD defaultblock                                                                                                  // 1528
Object.defineProperty(web3.eth, 'defaultBlock', {                                                                    // 1529
    get: function () {                                                                                               // 1530
        return c.defaultBlock;                                                                                       // 1531
    },                                                                                                               // 1532
    set: function (val) {                                                                                            // 1533
        c.defaultBlock = val;                                                                                        // 1534
        return val;                                                                                                  // 1535
    }                                                                                                                // 1536
});                                                                                                                  // 1537
                                                                                                                     // 1538
Object.defineProperty(web3.eth, 'defaultAccount', {                                                                  // 1539
    get: function () {                                                                                               // 1540
        return c.defaultAccount;                                                                                     // 1541
    },                                                                                                               // 1542
    set: function (val) {                                                                                            // 1543
        c.defaultAccount = val;                                                                                      // 1544
        return val;                                                                                                  // 1545
    }                                                                                                                // 1546
});                                                                                                                  // 1547
                                                                                                                     // 1548
                                                                                                                     // 1549
// EXTEND                                                                                                            // 1550
web3._extend = function(extension){                                                                                  // 1551
    /*jshint maxcomplexity: 6 */                                                                                     // 1552
                                                                                                                     // 1553
    if(extension.property && !web3[extension.property])                                                              // 1554
        web3[extension.property] = {};                                                                               // 1555
                                                                                                                     // 1556
    setupMethods(web3[extension.property] || web3, extension.methods || []);                                         // 1557
    setupProperties(web3[extension.property] || web3, extension.properties || []);                                   // 1558
};                                                                                                                   // 1559
web3._extend.formatters = formatters;                                                                                // 1560
web3._extend.utils = utils;                                                                                          // 1561
web3._extend.Method = require('./web3/method');                                                                      // 1562
web3._extend.Property = require('./web3/property');                                                                  // 1563
                                                                                                                     // 1564
                                                                                                                     // 1565
/// setups all api methods                                                                                           // 1566
setupProperties(web3, web3Properties);                                                                               // 1567
setupMethods(web3.net, net.methods);                                                                                 // 1568
setupProperties(web3.net, net.properties);                                                                           // 1569
setupMethods(web3.eth, eth.methods);                                                                                 // 1570
setupProperties(web3.eth, eth.properties);                                                                           // 1571
setupMethods(web3.db, db.methods);                                                                                   // 1572
setupMethods(web3.shh, shh.methods);                                                                                 // 1573
                                                                                                                     // 1574
module.exports = web3;                                                                                               // 1575
                                                                                                                     // 1576
                                                                                                                     // 1577
},{"./utils/config":5,"./utils/sha3":6,"./utils/utils":7,"./version.json":8,"./web3/batch":11,"./web3/db":13,"./web3/eth":15,"./web3/filter":17,"./web3/formatters":18,"./web3/method":23,"./web3/net":25,"./web3/property":26,"./web3/requestmanager":28,"./web3/shh":29,"./web3/watches":31}],10:[function(require,module,exports){
/*                                                                                                                   // 1579
    This file is part of ethereum.js.                                                                                // 1580
                                                                                                                     // 1581
    ethereum.js is free software: you can redistribute it and/or modify                                              // 1582
    it under the terms of the GNU Lesser General Public License as published by                                      // 1583
    the Free Software Foundation, either version 3 of the License, or                                                // 1584
    (at your option) any later version.                                                                              // 1585
                                                                                                                     // 1586
    ethereum.js is distributed in the hope that it will be useful,                                                   // 1587
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 1588
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 1589
    GNU Lesser General Public License for more details.                                                              // 1590
                                                                                                                     // 1591
    You should have received a copy of the GNU Lesser General Public License                                         // 1592
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 1593
*/                                                                                                                   // 1594
/**                                                                                                                  // 1595
 * @file allevents.js                                                                                                // 1596
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 1597
 * @date 2014                                                                                                        // 1598
 */                                                                                                                  // 1599
                                                                                                                     // 1600
var sha3 = require('../utils/sha3');                                                                                 // 1601
var SolidityEvent = require('./event');                                                                              // 1602
var formatters = require('./formatters');                                                                            // 1603
var utils = require('../utils/utils');                                                                               // 1604
var Filter = require('./filter');                                                                                    // 1605
var watches = require('./watches');                                                                                  // 1606
                                                                                                                     // 1607
var AllSolidityEvents = function (json, address) {                                                                   // 1608
    this._json = json;                                                                                               // 1609
    this._address = address;                                                                                         // 1610
};                                                                                                                   // 1611
                                                                                                                     // 1612
AllSolidityEvents.prototype.encode = function (options) {                                                            // 1613
    options = options || {};                                                                                         // 1614
    var result = {};                                                                                                 // 1615
                                                                                                                     // 1616
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                   // 1617
        return options[f] !== undefined;                                                                             // 1618
    }).forEach(function (f) {                                                                                        // 1619
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                // 1620
    });                                                                                                              // 1621
                                                                                                                     // 1622
    result.topics = [null, null, null, null, null]; // match all topics                                              // 1623
    result.address = this._address;                                                                                  // 1624
                                                                                                                     // 1625
    return result;                                                                                                   // 1626
};                                                                                                                   // 1627
                                                                                                                     // 1628
AllSolidityEvents.prototype.decode = function (data) {                                                               // 1629
    data.data = data.data || '';                                                                                     // 1630
    data.topics = data.topics || [];                                                                                 // 1631
                                                                                                                     // 1632
    var eventTopic = data.topics[0].slice(2);                                                                        // 1633
    var match = this._json.filter(function (j) {                                                                     // 1634
        return eventTopic === sha3(utils.transformToFullName(j));                                                    // 1635
    })[0];                                                                                                           // 1636
                                                                                                                     // 1637
    if (!match) { // cannot find matching event?                                                                     // 1638
        console.warn('cannot find event for log');                                                                   // 1639
        return data;                                                                                                 // 1640
    }                                                                                                                // 1641
                                                                                                                     // 1642
    var event = new SolidityEvent(match, this._address);                                                             // 1643
    return event.decode(data);                                                                                       // 1644
};                                                                                                                   // 1645
                                                                                                                     // 1646
AllSolidityEvents.prototype.execute = function (options, callback) {                                                 // 1647
    var o = this.encode(options);                                                                                    // 1648
    var formatter = this.decode.bind(this);                                                                          // 1649
    return new Filter(o, watches.eth(), formatter, callback);                                                        // 1650
};                                                                                                                   // 1651
                                                                                                                     // 1652
AllSolidityEvents.prototype.attachToContract = function (contract) {                                                 // 1653
    var execute = this.execute.bind(this);                                                                           // 1654
    contract.allEvents = execute;                                                                                    // 1655
};                                                                                                                   // 1656
                                                                                                                     // 1657
module.exports = AllSolidityEvents;                                                                                  // 1658
                                                                                                                     // 1659
                                                                                                                     // 1660
},{"../utils/sha3":6,"../utils/utils":7,"./event":16,"./filter":17,"./formatters":18,"./watches":31}],11:[function(require,module,exports){
/*                                                                                                                   // 1662
    This file is part of ethereum.js.                                                                                // 1663
                                                                                                                     // 1664
    ethereum.js is free software: you can redistribute it and/or modify                                              // 1665
    it under the terms of the GNU Lesser General Public License as published by                                      // 1666
    the Free Software Foundation, either version 3 of the License, or                                                // 1667
    (at your option) any later version.                                                                              // 1668
                                                                                                                     // 1669
    ethereum.js is distributed in the hope that it will be useful,                                                   // 1670
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 1671
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 1672
    GNU Lesser General Public License for more details.                                                              // 1673
                                                                                                                     // 1674
    You should have received a copy of the GNU Lesser General Public License                                         // 1675
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 1676
*/                                                                                                                   // 1677
/**                                                                                                                  // 1678
 * @file batch.js                                                                                                    // 1679
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 1680
 * @date 2015                                                                                                        // 1681
 */                                                                                                                  // 1682
                                                                                                                     // 1683
var RequestManager = require('./requestmanager');                                                                    // 1684
                                                                                                                     // 1685
var Batch = function () {                                                                                            // 1686
    this.requests = [];                                                                                              // 1687
};                                                                                                                   // 1688
                                                                                                                     // 1689
/**                                                                                                                  // 1690
 * Should be called to add create new request to batch request                                                       // 1691
 *                                                                                                                   // 1692
 * @method add                                                                                                       // 1693
 * @param {Object} jsonrpc requet object                                                                             // 1694
 */                                                                                                                  // 1695
Batch.prototype.add = function (request) {                                                                           // 1696
    this.requests.push(request);                                                                                     // 1697
};                                                                                                                   // 1698
                                                                                                                     // 1699
/**                                                                                                                  // 1700
 * Should be called to execute batch request                                                                         // 1701
 *                                                                                                                   // 1702
 * @method execute                                                                                                   // 1703
 */                                                                                                                  // 1704
Batch.prototype.execute = function () {                                                                              // 1705
    var requests = this.requests;                                                                                    // 1706
    RequestManager.getInstance().sendBatch(requests, function (err, results) {                                       // 1707
        results = results || [];                                                                                     // 1708
        requests.map(function (request, index) {                                                                     // 1709
            return results[index] || {};                                                                             // 1710
        }).map(function (result, index) {                                                                            // 1711
            return requests[index].format ? requests[index].format(result.result) : result.result;                   // 1712
        }).forEach(function (result, index) {                                                                        // 1713
            if (requests[index].callback) {                                                                          // 1714
                requests[index].callback(err, result);                                                               // 1715
            }                                                                                                        // 1716
        });                                                                                                          // 1717
    });                                                                                                              // 1718
};                                                                                                                   // 1719
                                                                                                                     // 1720
module.exports = Batch;                                                                                              // 1721
                                                                                                                     // 1722
                                                                                                                     // 1723
},{"./requestmanager":28}],12:[function(require,module,exports){                                                     // 1724
/*                                                                                                                   // 1725
    This file is part of ethereum.js.                                                                                // 1726
                                                                                                                     // 1727
    ethereum.js is free software: you can redistribute it and/or modify                                              // 1728
    it under the terms of the GNU Lesser General Public License as published by                                      // 1729
    the Free Software Foundation, either version 3 of the License, or                                                // 1730
    (at your option) any later version.                                                                              // 1731
                                                                                                                     // 1732
    ethereum.js is distributed in the hope that it will be useful,                                                   // 1733
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 1734
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 1735
    GNU Lesser General Public License for more details.                                                              // 1736
                                                                                                                     // 1737
    You should have received a copy of the GNU Lesser General Public License                                         // 1738
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 1739
*/                                                                                                                   // 1740
/**                                                                                                                  // 1741
 * @file contract.js                                                                                                 // 1742
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 1743
 * @date 2014                                                                                                        // 1744
 */                                                                                                                  // 1745
                                                                                                                     // 1746
var web3 = require('../web3');                                                                                       // 1747
var utils = require('../utils/utils');                                                                               // 1748
var coder = require('../solidity/coder');                                                                            // 1749
var SolidityEvent = require('./event');                                                                              // 1750
var SolidityFunction = require('./function');                                                                        // 1751
var AllEvents = require('./allevents');                                                                              // 1752
                                                                                                                     // 1753
/**                                                                                                                  // 1754
 * Should be called to encode constructor params                                                                     // 1755
 *                                                                                                                   // 1756
 * @method encodeConstructorParams                                                                                   // 1757
 * @param {Array} abi                                                                                                // 1758
 * @param {Array} constructor params                                                                                 // 1759
 */                                                                                                                  // 1760
var encodeConstructorParams = function (abi, params) {                                                               // 1761
    return abi.filter(function (json) {                                                                              // 1762
        return json.type === 'constructor' && json.inputs.length === params.length;                                  // 1763
    }).map(function (json) {                                                                                         // 1764
        return json.inputs.map(function (input) {                                                                    // 1765
            return input.type;                                                                                       // 1766
        });                                                                                                          // 1767
    }).map(function (types) {                                                                                        // 1768
        return coder.encodeParams(types, params);                                                                    // 1769
    })[0] || '';                                                                                                     // 1770
};                                                                                                                   // 1771
                                                                                                                     // 1772
/**                                                                                                                  // 1773
 * Should be called to add functions to contract object                                                              // 1774
 *                                                                                                                   // 1775
 * @method addFunctionsToContract                                                                                    // 1776
 * @param {Contract} contract                                                                                        // 1777
 * @param {Array} abi                                                                                                // 1778
 */                                                                                                                  // 1779
var addFunctionsToContract = function (contract, abi) {                                                              // 1780
    abi.filter(function (json) {                                                                                     // 1781
        return json.type === 'function';                                                                             // 1782
    }).map(function (json) {                                                                                         // 1783
        return new SolidityFunction(json, contract.address);                                                         // 1784
    }).forEach(function (f) {                                                                                        // 1785
        f.attachToContract(contract);                                                                                // 1786
    });                                                                                                              // 1787
};                                                                                                                   // 1788
                                                                                                                     // 1789
/**                                                                                                                  // 1790
 * Should be called to add events to contract object                                                                 // 1791
 *                                                                                                                   // 1792
 * @method addEventsToContract                                                                                       // 1793
 * @param {Contract} contract                                                                                        // 1794
 * @param {Array} abi                                                                                                // 1795
 */                                                                                                                  // 1796
var addEventsToContract = function (contract, abi) {                                                                 // 1797
    var events = abi.filter(function (json) {                                                                        // 1798
        return json.type === 'event';                                                                                // 1799
    });                                                                                                              // 1800
                                                                                                                     // 1801
    var All = new AllEvents(events, contract.address);                                                               // 1802
    All.attachToContract(contract);                                                                                  // 1803
                                                                                                                     // 1804
    events.map(function (json) {                                                                                     // 1805
        return new SolidityEvent(json, contract.address);                                                            // 1806
    }).forEach(function (e) {                                                                                        // 1807
        e.attachToContract(contract);                                                                                // 1808
    });                                                                                                              // 1809
};                                                                                                                   // 1810
                                                                                                                     // 1811
/**                                                                                                                  // 1812
 * Should be called to create new ContractFactory                                                                    // 1813
 *                                                                                                                   // 1814
 * @method contract                                                                                                  // 1815
 * @param {Array} abi                                                                                                // 1816
 * @returns {ContractFactory} new contract factory                                                                   // 1817
 */                                                                                                                  // 1818
var contract = function (abi) {                                                                                      // 1819
    return new ContractFactory(abi);                                                                                 // 1820
};                                                                                                                   // 1821
                                                                                                                     // 1822
/**                                                                                                                  // 1823
 * Should be called to check if the contract gets properly deployed on the blockchain.                               // 1824
 *                                                                                                                   // 1825
 * @method checkForContractAddress                                                                                   // 1826
 * @param {Object} contract                                                                                          // 1827
 * @param {Function} callback                                                                                        // 1828
 * @returns {Undefined}                                                                                              // 1829
 */                                                                                                                  // 1830
var checkForContractAddress = function(contract, abi, callback){                                                     // 1831
    var count = 0;                                                                                                   // 1832
                                                                                                                     // 1833
    // wait for receipt                                                                                              // 1834
    var filter = web3.eth.filter('latest', function(e){                                                              // 1835
        if(!e) {                                                                                                     // 1836
            count++;                                                                                                 // 1837
                                                                                                                     // 1838
            // console.log('Checking for contract address', count);                                                  // 1839
                                                                                                                     // 1840
            // stop watching after 50 blocks (timeout)                                                               // 1841
            if(count > 50) {                                                                                         // 1842
                if(callback)                                                                                         // 1843
                    callback(new Error('Contract couldn\'t be deployed'));                                           // 1844
                                                                                                                     // 1845
                filter.stopWatching();                                                                               // 1846
                                                                                                                     // 1847
            } else {                                                                                                 // 1848
                                                                                                                     // 1849
                web3.eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                       // 1850
                    if(receipt) {                                                                                    // 1851
                                                                                                                     // 1852
                        web3.eth.getCode(receipt.contractAddress, function(e, code){                                 // 1853
                            if(code.length > 2) {                                                                    // 1854
                                                                                                                     // 1855
                                // console.log('Contract code deployed!');                                           // 1856
                                                                                                                     // 1857
                                contract.address = receipt.contractAddress;                                          // 1858
                                                                                                                     // 1859
                                // attach events and methods                                                         // 1860
                                addFunctionsToContract(contract, abi);                                               // 1861
                                addEventsToContract(contract, abi);                                                  // 1862
                                                                                                                     // 1863
                                if(callback)                                                                         // 1864
                                    callback(null, contract);                                                        // 1865
                                                                                                                     // 1866
                            } else if(callback) {                                                                    // 1867
                                callback(new Error('The contract code couldn\'t be stored'));                        // 1868
                            }                                                                                        // 1869
                                                                                                                     // 1870
                            filter.stopWatching();                                                                   // 1871
                        });                                                                                          // 1872
                    }                                                                                                // 1873
                });                                                                                                  // 1874
            }                                                                                                        // 1875
        }                                                                                                            // 1876
    });                                                                                                              // 1877
};                                                                                                                   // 1878
                                                                                                                     // 1879
/**                                                                                                                  // 1880
 * Should be called to create new ContractFactory instance                                                           // 1881
 *                                                                                                                   // 1882
 * @method ContractFactory                                                                                           // 1883
 * @param {Array} abi                                                                                                // 1884
 */                                                                                                                  // 1885
var ContractFactory = function (abi) {                                                                               // 1886
    this.abi = abi;                                                                                                  // 1887
};                                                                                                                   // 1888
                                                                                                                     // 1889
/**                                                                                                                  // 1890
 * Should be called to create new contract on a blockchain                                                           // 1891
 *                                                                                                                   // 1892
 * @method new                                                                                                       // 1893
 * @param {Any} contract constructor param1 (optional)                                                               // 1894
 * @param {Any} contract constructor param2 (optional)                                                               // 1895
 * @param {Object} contract transaction object (required)                                                            // 1896
 * @param {Function} callback                                                                                        // 1897
 * @returns {Contract} returns contract instance                                                                     // 1898
 */                                                                                                                  // 1899
ContractFactory.prototype.new = function () {                                                                        // 1900
    var _this = this;                                                                                                // 1901
    var contract = new Contract(this.abi);                                                                           // 1902
                                                                                                                     // 1903
    // parse arguments                                                                                               // 1904
    var options = {}; // required!                                                                                   // 1905
    var callback;                                                                                                    // 1906
                                                                                                                     // 1907
    var args = Array.prototype.slice.call(arguments);                                                                // 1908
    if (utils.isFunction(args[args.length - 1])) {                                                                   // 1909
        callback = args.pop();                                                                                       // 1910
    }                                                                                                                // 1911
                                                                                                                     // 1912
    var last = args[args.length - 1];                                                                                // 1913
    if (utils.isObject(last) && !utils.isArray(last)) {                                                              // 1914
        options = args.pop();                                                                                        // 1915
    }                                                                                                                // 1916
                                                                                                                     // 1917
    // throw an error if there are no options                                                                        // 1918
                                                                                                                     // 1919
    var bytes = encodeConstructorParams(this.abi, args);                                                             // 1920
    options.data += bytes;                                                                                           // 1921
                                                                                                                     // 1922
                                                                                                                     // 1923
    if(callback) {                                                                                                   // 1924
                                                                                                                     // 1925
        // wait for the contract address adn check if the code was deployed                                          // 1926
        web3.eth.sendTransaction(options, function (err, hash) {                                                     // 1927
            if (err) {                                                                                               // 1928
                callback(err);                                                                                       // 1929
            } else {                                                                                                 // 1930
                // add the transaction hash                                                                          // 1931
                contract.transactionHash = hash;                                                                     // 1932
                checkForContractAddress(contract, _this.abi, callback);                                              // 1933
            }                                                                                                        // 1934
        });                                                                                                          // 1935
    } else {                                                                                                         // 1936
        var hash = web3.eth.sendTransaction(options);                                                                // 1937
        // add the transaction hash                                                                                  // 1938
        contract.transactionHash = hash;                                                                             // 1939
        checkForContractAddress(contract, _this.abi);                                                                // 1940
    }                                                                                                                // 1941
                                                                                                                     // 1942
    return contract;                                                                                                 // 1943
};                                                                                                                   // 1944
                                                                                                                     // 1945
/**                                                                                                                  // 1946
 * Should be called to get access to existing contract on a blockchain                                               // 1947
 *                                                                                                                   // 1948
 * @method at                                                                                                        // 1949
 * @param {Address} contract address (required)                                                                      // 1950
 * @param {Function} callback {optional)                                                                             // 1951
 * @returns {Contract} returns contract if no callback was passed,                                                   // 1952
 * otherwise calls callback function (err, contract)                                                                 // 1953
 */                                                                                                                  // 1954
ContractFactory.prototype.at = function (address, callback) {                                                        // 1955
    var contract = new Contract(this.abi, address);                                                                  // 1956
    // TODO: address is required                                                                                     // 1957
                                                                                                                     // 1958
    // attach functions                                                                                              // 1959
    addFunctionsToContract(contract, this.abi);                                                                      // 1960
    addEventsToContract(contract, this.abi);                                                                         // 1961
                                                                                                                     // 1962
    if (callback) {                                                                                                  // 1963
        callback(null, contract);                                                                                    // 1964
    }                                                                                                                // 1965
    return contract;                                                                                                 // 1966
};                                                                                                                   // 1967
                                                                                                                     // 1968
/**                                                                                                                  // 1969
 * Should be called to create new contract instance                                                                  // 1970
 *                                                                                                                   // 1971
 * @method Contract                                                                                                  // 1972
 * @param {Array} abi                                                                                                // 1973
 * @param {Address} contract address                                                                                 // 1974
 */                                                                                                                  // 1975
var Contract = function (abi, address) {                                                                             // 1976
    this.address = address;                                                                                          // 1977
};                                                                                                                   // 1978
                                                                                                                     // 1979
module.exports = contract;                                                                                           // 1980
                                                                                                                     // 1981
                                                                                                                     // 1982
},{"../solidity/coder":1,"../utils/utils":7,"../web3":9,"./allevents":10,"./event":16,"./function":19}],13:[function(require,module,exports){
/*                                                                                                                   // 1984
    This file is part of ethereum.js.                                                                                // 1985
                                                                                                                     // 1986
    ethereum.js is free software: you can redistribute it and/or modify                                              // 1987
    it under the terms of the GNU Lesser General Public License as published by                                      // 1988
    the Free Software Foundation, either version 3 of the License, or                                                // 1989
    (at your option) any later version.                                                                              // 1990
                                                                                                                     // 1991
    ethereum.js is distributed in the hope that it will be useful,                                                   // 1992
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 1993
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 1994
    GNU Lesser General Public License for more details.                                                              // 1995
                                                                                                                     // 1996
    You should have received a copy of the GNU Lesser General Public License                                         // 1997
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 1998
*/                                                                                                                   // 1999
/** @file db.js                                                                                                      // 2000
 * @authors:                                                                                                         // 2001
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 2002
 * @date 2015                                                                                                        // 2003
 */                                                                                                                  // 2004
                                                                                                                     // 2005
var Method = require('./method');                                                                                    // 2006
                                                                                                                     // 2007
var putString = new Method({                                                                                         // 2008
    name: 'putString',                                                                                               // 2009
    call: 'db_putString',                                                                                            // 2010
    params: 3                                                                                                        // 2011
});                                                                                                                  // 2012
                                                                                                                     // 2013
                                                                                                                     // 2014
var getString = new Method({                                                                                         // 2015
    name: 'getString',                                                                                               // 2016
    call: 'db_getString',                                                                                            // 2017
    params: 2                                                                                                        // 2018
});                                                                                                                  // 2019
                                                                                                                     // 2020
var putHex = new Method({                                                                                            // 2021
    name: 'putHex',                                                                                                  // 2022
    call: 'db_putHex',                                                                                               // 2023
    params: 3                                                                                                        // 2024
});                                                                                                                  // 2025
                                                                                                                     // 2026
var getHex = new Method({                                                                                            // 2027
    name: 'getHex',                                                                                                  // 2028
    call: 'db_getHex',                                                                                               // 2029
    params: 2                                                                                                        // 2030
});                                                                                                                  // 2031
                                                                                                                     // 2032
var methods = [                                                                                                      // 2033
    putString, getString, putHex, getHex                                                                             // 2034
];                                                                                                                   // 2035
                                                                                                                     // 2036
module.exports = {                                                                                                   // 2037
    methods: methods                                                                                                 // 2038
};                                                                                                                   // 2039
                                                                                                                     // 2040
},{"./method":23}],14:[function(require,module,exports){                                                             // 2041
/*                                                                                                                   // 2042
    This file is part of ethereum.js.                                                                                // 2043
                                                                                                                     // 2044
    ethereum.js is free software: you can redistribute it and/or modify                                              // 2045
    it under the terms of the GNU Lesser General Public License as published by                                      // 2046
    the Free Software Foundation, either version 3 of the License, or                                                // 2047
    (at your option) any later version.                                                                              // 2048
                                                                                                                     // 2049
    ethereum.js is distributed in the hope that it will be useful,                                                   // 2050
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 2051
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 2052
    GNU Lesser General Public License for more details.                                                              // 2053
                                                                                                                     // 2054
    You should have received a copy of the GNU Lesser General Public License                                         // 2055
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 2056
*/                                                                                                                   // 2057
/**                                                                                                                  // 2058
 * @file errors.js                                                                                                   // 2059
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 2060
 * @date 2015                                                                                                        // 2061
 */                                                                                                                  // 2062
                                                                                                                     // 2063
module.exports = {                                                                                                   // 2064
    InvalidNumberOfParams: function () {                                                                             // 2065
        return new Error('Invalid number of input parameters');                                                      // 2066
    },                                                                                                               // 2067
    InvalidConnection: function (host){                                                                              // 2068
        return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +', is it running?');                  // 2069
    },                                                                                                               // 2070
    InvalidProvider: function () {                                                                                   // 2071
        return new Error('Providor not set or invalid');                                                             // 2072
    },                                                                                                               // 2073
    InvalidResponse: function (result){                                                                              // 2074
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response';
        return new Error(message);                                                                                   // 2076
    }                                                                                                                // 2077
};                                                                                                                   // 2078
                                                                                                                     // 2079
                                                                                                                     // 2080
},{}],15:[function(require,module,exports){                                                                          // 2081
/*                                                                                                                   // 2082
    This file is part of ethereum.js.                                                                                // 2083
                                                                                                                     // 2084
    ethereum.js is free software: you can redistribute it and/or modify                                              // 2085
    it under the terms of the GNU Lesser General Public License as published by                                      // 2086
    the Free Software Foundation, either version 3 of the License, or                                                // 2087
    (at your option) any later version.                                                                              // 2088
                                                                                                                     // 2089
    ethereum.js is distributed in the hope that it will be useful,                                                   // 2090
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 2091
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 2092
    GNU Lesser General Public License for more details.                                                              // 2093
                                                                                                                     // 2094
    You should have received a copy of the GNU Lesser General Public License                                         // 2095
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 2096
*/                                                                                                                   // 2097
/**                                                                                                                  // 2098
 * @file eth.js                                                                                                      // 2099
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 2100
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                   // 2101
 * @date 2015                                                                                                        // 2102
 */                                                                                                                  // 2103
                                                                                                                     // 2104
/**                                                                                                                  // 2105
 * Web3                                                                                                              // 2106
 *                                                                                                                   // 2107
 * @module web3                                                                                                      // 2108
 */                                                                                                                  // 2109
                                                                                                                     // 2110
/**                                                                                                                  // 2111
 * Eth methods and properties                                                                                        // 2112
 *                                                                                                                   // 2113
 * An example method object can look as follows:                                                                     // 2114
 *                                                                                                                   // 2115
 *      {                                                                                                            // 2116
 *      name: 'getBlock',                                                                                            // 2117
 *      call: blockCall,                                                                                             // 2118
 *      params: 2,                                                                                                   // 2119
 *      outputFormatter: formatters.outputBlockFormatter,                                                            // 2120
 *      inputFormatter: [ // can be a formatter funciton or an array of functions. Where each item in the array will be used for one parameter
 *           utils.toHex, // formats paramter 1                                                                      // 2122
 *           function(param){ return !!param; } // formats paramter 2                                                // 2123
 *         ]                                                                                                         // 2124
 *       },                                                                                                          // 2125
 *                                                                                                                   // 2126
 * @class [web3] eth                                                                                                 // 2127
 * @constructor                                                                                                      // 2128
 */                                                                                                                  // 2129
                                                                                                                     // 2130
"use strict";                                                                                                        // 2131
                                                                                                                     // 2132
var formatters = require('./formatters');                                                                            // 2133
var utils = require('../utils/utils');                                                                               // 2134
var Method = require('./method');                                                                                    // 2135
var Property = require('./property');                                                                                // 2136
                                                                                                                     // 2137
var blockCall = function (args) {                                                                                    // 2138
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber"; // 2139
};                                                                                                                   // 2140
                                                                                                                     // 2141
var transactionFromBlockCall = function (args) {                                                                     // 2142
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};                                                                                                                   // 2144
                                                                                                                     // 2145
var uncleCall = function (args) {                                                                                    // 2146
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};                                                                                                                   // 2148
                                                                                                                     // 2149
var getBlockTransactionCountCall = function (args) {                                                                 // 2150
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};                                                                                                                   // 2152
                                                                                                                     // 2153
var uncleCountCall = function (args) {                                                                               // 2154
    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};                                                                                                                   // 2156
                                                                                                                     // 2157
/// @returns an array of objects describing web3.eth api methods                                                     // 2158
                                                                                                                     // 2159
var getBalance = new Method({                                                                                        // 2160
    name: 'getBalance',                                                                                              // 2161
    call: 'eth_getBalance',                                                                                          // 2162
    params: 2,                                                                                                       // 2163
    inputFormatter: [utils.toAddress, formatters.inputDefaultBlockNumberFormatter],                                  // 2164
    outputFormatter: formatters.outputBigNumberFormatter                                                             // 2165
});                                                                                                                  // 2166
                                                                                                                     // 2167
var getStorageAt = new Method({                                                                                      // 2168
    name: 'getStorageAt',                                                                                            // 2169
    call: 'eth_getStorageAt',                                                                                        // 2170
    params: 3,                                                                                                       // 2171
    inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                                 // 2172
});                                                                                                                  // 2173
                                                                                                                     // 2174
var getCode = new Method({                                                                                           // 2175
    name: 'getCode',                                                                                                 // 2176
    call: 'eth_getCode',                                                                                             // 2177
    params: 2,                                                                                                       // 2178
    inputFormatter: [utils.toAddress, formatters.inputDefaultBlockNumberFormatter]                                   // 2179
});                                                                                                                  // 2180
                                                                                                                     // 2181
var getBlock = new Method({                                                                                          // 2182
    name: 'getBlock',                                                                                                // 2183
    call: blockCall,                                                                                                 // 2184
    params: 2,                                                                                                       // 2185
    inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                        // 2186
    outputFormatter: formatters.outputBlockFormatter                                                                 // 2187
});                                                                                                                  // 2188
                                                                                                                     // 2189
var getUncle = new Method({                                                                                          // 2190
    name: 'getUncle',                                                                                                // 2191
    call: uncleCall,                                                                                                 // 2192
    params: 2,                                                                                                       // 2193
    inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                             // 2194
    outputFormatter: formatters.outputBlockFormatter,                                                                // 2195
                                                                                                                     // 2196
});                                                                                                                  // 2197
                                                                                                                     // 2198
var getCompilers = new Method({                                                                                      // 2199
    name: 'getCompilers',                                                                                            // 2200
    call: 'eth_getCompilers',                                                                                        // 2201
    params: 0                                                                                                        // 2202
});                                                                                                                  // 2203
                                                                                                                     // 2204
var getBlockTransactionCount = new Method({                                                                          // 2205
    name: 'getBlockTransactionCount',                                                                                // 2206
    call: getBlockTransactionCountCall,                                                                              // 2207
    params: 1,                                                                                                       // 2208
    inputFormatter: [formatters.inputBlockNumberFormatter],                                                          // 2209
    outputFormatter: utils.toDecimal                                                                                 // 2210
});                                                                                                                  // 2211
                                                                                                                     // 2212
var getBlockUncleCount = new Method({                                                                                // 2213
    name: 'getBlockUncleCount',                                                                                      // 2214
    call: uncleCountCall,                                                                                            // 2215
    params: 1,                                                                                                       // 2216
    inputFormatter: [formatters.inputBlockNumberFormatter],                                                          // 2217
    outputFormatter: utils.toDecimal                                                                                 // 2218
});                                                                                                                  // 2219
                                                                                                                     // 2220
var getTransaction = new Method({                                                                                    // 2221
    name: 'getTransaction',                                                                                          // 2222
    call: 'eth_getTransactionByHash',                                                                                // 2223
    params: 1,                                                                                                       // 2224
    outputFormatter: formatters.outputTransactionFormatter                                                           // 2225
});                                                                                                                  // 2226
                                                                                                                     // 2227
var getTransactionFromBlock = new Method({                                                                           // 2228
    name: 'getTransactionFromBlock',                                                                                 // 2229
    call: transactionFromBlockCall,                                                                                  // 2230
    params: 2,                                                                                                       // 2231
    inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                             // 2232
    outputFormatter: formatters.outputTransactionFormatter                                                           // 2233
});                                                                                                                  // 2234
                                                                                                                     // 2235
var getTransactionReceipt = new Method({                                                                             // 2236
    name: 'getTransactionReceipt',                                                                                   // 2237
    call: 'eth_getTransactionReceipt',                                                                               // 2238
    params: 1,                                                                                                       // 2239
    outputFormatter: formatters.outputTransactionReceiptFormatter                                                    // 2240
});                                                                                                                  // 2241
                                                                                                                     // 2242
var getTransactionCount = new Method({                                                                               // 2243
    name: 'getTransactionCount',                                                                                     // 2244
    call: 'eth_getTransactionCount',                                                                                 // 2245
    params: 2,                                                                                                       // 2246
    inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                             // 2247
    outputFormatter: utils.toDecimal                                                                                 // 2248
});                                                                                                                  // 2249
                                                                                                                     // 2250
var sendRawTransaction = new Method({                                                                                // 2251
    name: 'sendRawTransaction',                                                                                      // 2252
    call: 'eth_sendRawTransaction',                                                                                  // 2253
    params: 1,                                                                                                       // 2254
    inputFormatter: []                                                                                               // 2255
});                                                                                                                  // 2256
                                                                                                                     // 2257
var sendTransaction = new Method({                                                                                   // 2258
    name: 'sendTransaction',                                                                                         // 2259
    call: 'eth_sendTransaction',                                                                                     // 2260
    params: 1,                                                                                                       // 2261
    inputFormatter: [formatters.inputTransactionFormatter]                                                           // 2262
});                                                                                                                  // 2263
                                                                                                                     // 2264
var call = new Method({                                                                                              // 2265
    name: 'call',                                                                                                    // 2266
    call: 'eth_call',                                                                                                // 2267
    params: 2,                                                                                                       // 2268
    inputFormatter: [formatters.inputTransactionFormatter, formatters.inputDefaultBlockNumberFormatter]              // 2269
});                                                                                                                  // 2270
                                                                                                                     // 2271
var estimateGas = new Method({                                                                                       // 2272
    name: 'estimateGas',                                                                                             // 2273
    call: 'eth_estimateGas',                                                                                         // 2274
    params: 1,                                                                                                       // 2275
    inputFormatter: [formatters.inputTransactionFormatter],                                                          // 2276
    outputFormatter: utils.toDecimal                                                                                 // 2277
});                                                                                                                  // 2278
                                                                                                                     // 2279
var compileSolidity = new Method({                                                                                   // 2280
    name: 'compile.solidity',                                                                                        // 2281
    call: 'eth_compileSolidity',                                                                                     // 2282
    params: 1                                                                                                        // 2283
});                                                                                                                  // 2284
                                                                                                                     // 2285
var compileLLL = new Method({                                                                                        // 2286
    name: 'compile.lll',                                                                                             // 2287
    call: 'eth_compileLLL',                                                                                          // 2288
    params: 1                                                                                                        // 2289
});                                                                                                                  // 2290
                                                                                                                     // 2291
var compileSerpent = new Method({                                                                                    // 2292
    name: 'compile.serpent',                                                                                         // 2293
    call: 'eth_compileSerpent',                                                                                      // 2294
    params: 1                                                                                                        // 2295
});                                                                                                                  // 2296
                                                                                                                     // 2297
var submitWork = new Method({                                                                                        // 2298
    name: 'submitWork',                                                                                              // 2299
    call: 'eth_submitWork',                                                                                          // 2300
    params: 3                                                                                                        // 2301
});                                                                                                                  // 2302
                                                                                                                     // 2303
var getWork = new Method({                                                                                           // 2304
    name: 'getWork',                                                                                                 // 2305
    call: 'eth_getWork',                                                                                             // 2306
    params: 0                                                                                                        // 2307
});                                                                                                                  // 2308
                                                                                                                     // 2309
var methods = [                                                                                                      // 2310
    getBalance,                                                                                                      // 2311
    getStorageAt,                                                                                                    // 2312
    getCode,                                                                                                         // 2313
    getBlock,                                                                                                        // 2314
    getUncle,                                                                                                        // 2315
    getCompilers,                                                                                                    // 2316
    getBlockTransactionCount,                                                                                        // 2317
    getBlockUncleCount,                                                                                              // 2318
    getTransaction,                                                                                                  // 2319
    getTransactionFromBlock,                                                                                         // 2320
    getTransactionReceipt,                                                                                           // 2321
    getTransactionCount,                                                                                             // 2322
    call,                                                                                                            // 2323
    estimateGas,                                                                                                     // 2324
    sendRawTransaction,                                                                                              // 2325
    sendTransaction,                                                                                                 // 2326
    compileSolidity,                                                                                                 // 2327
    compileLLL,                                                                                                      // 2328
    compileSerpent,                                                                                                  // 2329
    submitWork,                                                                                                      // 2330
    getWork                                                                                                          // 2331
];                                                                                                                   // 2332
                                                                                                                     // 2333
/// @returns an array of objects describing web3.eth api properties                                                  // 2334
                                                                                                                     // 2335
                                                                                                                     // 2336
                                                                                                                     // 2337
var properties = [                                                                                                   // 2338
    new Property({                                                                                                   // 2339
        name: 'coinbase',                                                                                            // 2340
        getter: 'eth_coinbase'                                                                                       // 2341
    }),                                                                                                              // 2342
    new Property({                                                                                                   // 2343
        name: 'mining',                                                                                              // 2344
        getter: 'eth_mining'                                                                                         // 2345
    }),                                                                                                              // 2346
    new Property({                                                                                                   // 2347
        name: 'hashrate',                                                                                            // 2348
        getter: 'eth_hashrate',                                                                                      // 2349
        outputFormatter: utils.toDecimal                                                                             // 2350
    }),                                                                                                              // 2351
    new Property({                                                                                                   // 2352
        name: 'gasPrice',                                                                                            // 2353
        getter: 'eth_gasPrice',                                                                                      // 2354
        outputFormatter: formatters.outputBigNumberFormatter                                                         // 2355
    }),                                                                                                              // 2356
    new Property({                                                                                                   // 2357
        name: 'accounts',                                                                                            // 2358
        getter: 'eth_accounts'                                                                                       // 2359
    }),                                                                                                              // 2360
    new Property({                                                                                                   // 2361
        name: 'blockNumber',                                                                                         // 2362
        getter: 'eth_blockNumber',                                                                                   // 2363
        outputFormatter: utils.toDecimal                                                                             // 2364
    })                                                                                                               // 2365
];                                                                                                                   // 2366
                                                                                                                     // 2367
module.exports = {                                                                                                   // 2368
    methods: methods,                                                                                                // 2369
    properties: properties                                                                                           // 2370
};                                                                                                                   // 2371
                                                                                                                     // 2372
                                                                                                                     // 2373
},{"../utils/utils":7,"./formatters":18,"./method":23,"./property":26}],16:[function(require,module,exports){        // 2374
/*                                                                                                                   // 2375
    This file is part of ethereum.js.                                                                                // 2376
                                                                                                                     // 2377
    ethereum.js is free software: you can redistribute it and/or modify                                              // 2378
    it under the terms of the GNU Lesser General Public License as published by                                      // 2379
    the Free Software Foundation, either version 3 of the License, or                                                // 2380
    (at your option) any later version.                                                                              // 2381
                                                                                                                     // 2382
    ethereum.js is distributed in the hope that it will be useful,                                                   // 2383
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 2384
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 2385
    GNU Lesser General Public License for more details.                                                              // 2386
                                                                                                                     // 2387
    You should have received a copy of the GNU Lesser General Public License                                         // 2388
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 2389
*/                                                                                                                   // 2390
/**                                                                                                                  // 2391
 * @file event.js                                                                                                    // 2392
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 2393
 * @date 2014                                                                                                        // 2394
 */                                                                                                                  // 2395
                                                                                                                     // 2396
var utils = require('../utils/utils');                                                                               // 2397
var coder = require('../solidity/coder');                                                                            // 2398
var formatters = require('./formatters');                                                                            // 2399
var sha3 = require('../utils/sha3');                                                                                 // 2400
var Filter = require('./filter');                                                                                    // 2401
var watches = require('./watches');                                                                                  // 2402
                                                                                                                     // 2403
/**                                                                                                                  // 2404
 * This prototype should be used to create event filters                                                             // 2405
 */                                                                                                                  // 2406
var SolidityEvent = function (json, address) {                                                                       // 2407
    this._params = json.inputs;                                                                                      // 2408
    this._name = utils.transformToFullName(json);                                                                    // 2409
    this._address = address;                                                                                         // 2410
    this._anonymous = json.anonymous;                                                                                // 2411
};                                                                                                                   // 2412
                                                                                                                     // 2413
/**                                                                                                                  // 2414
 * Should be used to get filtered param types                                                                        // 2415
 *                                                                                                                   // 2416
 * @method types                                                                                                     // 2417
 * @param {Bool} decide if returned typed should be indexed                                                          // 2418
 * @return {Array} array of types                                                                                    // 2419
 */                                                                                                                  // 2420
SolidityEvent.prototype.types = function (indexed) {                                                                 // 2421
    return this._params.filter(function (i) {                                                                        // 2422
        return i.indexed === indexed;                                                                                // 2423
    }).map(function (i) {                                                                                            // 2424
        return i.type;                                                                                               // 2425
    });                                                                                                              // 2426
};                                                                                                                   // 2427
                                                                                                                     // 2428
/**                                                                                                                  // 2429
 * Should be used to get event display name                                                                          // 2430
 *                                                                                                                   // 2431
 * @method displayName                                                                                               // 2432
 * @return {String} event display name                                                                               // 2433
 */                                                                                                                  // 2434
SolidityEvent.prototype.displayName = function () {                                                                  // 2435
    return utils.extractDisplayName(this._name);                                                                     // 2436
};                                                                                                                   // 2437
                                                                                                                     // 2438
/**                                                                                                                  // 2439
 * Should be used to get event type name                                                                             // 2440
 *                                                                                                                   // 2441
 * @method typeName                                                                                                  // 2442
 * @return {String} event type name                                                                                  // 2443
 */                                                                                                                  // 2444
SolidityEvent.prototype.typeName = function () {                                                                     // 2445
    return utils.extractTypeName(this._name);                                                                        // 2446
};                                                                                                                   // 2447
                                                                                                                     // 2448
/**                                                                                                                  // 2449
 * Should be used to get event signature                                                                             // 2450
 *                                                                                                                   // 2451
 * @method signature                                                                                                 // 2452
 * @return {String} event signature                                                                                  // 2453
 */                                                                                                                  // 2454
SolidityEvent.prototype.signature = function () {                                                                    // 2455
    return sha3(this._name);                                                                                         // 2456
};                                                                                                                   // 2457
                                                                                                                     // 2458
/**                                                                                                                  // 2459
 * Should be used to encode indexed params and options to one final object                                           // 2460
 *                                                                                                                   // 2461
 * @method encode                                                                                                    // 2462
 * @param {Object} indexed                                                                                           // 2463
 * @param {Object} options                                                                                           // 2464
 * @return {Object} everything combined together and encoded                                                         // 2465
 */                                                                                                                  // 2466
SolidityEvent.prototype.encode = function (indexed, options) {                                                       // 2467
    indexed = indexed || {};                                                                                         // 2468
    options = options || {};                                                                                         // 2469
    var result = {};                                                                                                 // 2470
                                                                                                                     // 2471
    ['fromBlock', 'toBlock'].filter(function (f) {                                                                   // 2472
        return options[f] !== undefined;                                                                             // 2473
    }).forEach(function (f) {                                                                                        // 2474
        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                // 2475
    });                                                                                                              // 2476
                                                                                                                     // 2477
    result.topics = [];                                                                                              // 2478
                                                                                                                     // 2479
    result.address = this._address;                                                                                  // 2480
    if (!this._anonymous) {                                                                                          // 2481
        result.topics.push('0x' + this.signature());                                                                 // 2482
    }                                                                                                                // 2483
                                                                                                                     // 2484
    var indexedTopics = this._params.filter(function (i) {                                                           // 2485
        return i.indexed === true;                                                                                   // 2486
    }).map(function (i) {                                                                                            // 2487
        var value = indexed[i.name];                                                                                 // 2488
        if (value === undefined || value === null) {                                                                 // 2489
            return null;                                                                                             // 2490
        }                                                                                                            // 2491
                                                                                                                     // 2492
        if (utils.isArray(value)) {                                                                                  // 2493
            return value.map(function (v) {                                                                          // 2494
                return '0x' + coder.encodeParam(i.type, v);                                                          // 2495
            });                                                                                                      // 2496
        }                                                                                                            // 2497
        return '0x' + coder.encodeParam(i.type, value);                                                              // 2498
    });                                                                                                              // 2499
                                                                                                                     // 2500
    result.topics = result.topics.concat(indexedTopics);                                                             // 2501
                                                                                                                     // 2502
    return result;                                                                                                   // 2503
};                                                                                                                   // 2504
                                                                                                                     // 2505
/**                                                                                                                  // 2506
 * Should be used to decode indexed params and options                                                               // 2507
 *                                                                                                                   // 2508
 * @method decode                                                                                                    // 2509
 * @param {Object} data                                                                                              // 2510
 * @return {Object} result object with decoded indexed && not indexed params                                         // 2511
 */                                                                                                                  // 2512
SolidityEvent.prototype.decode = function (data) {                                                                   // 2513
                                                                                                                     // 2514
    data.data = data.data || '';                                                                                     // 2515
    data.topics = data.topics || [];                                                                                 // 2516
                                                                                                                     // 2517
    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                            // 2518
    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join("");                         // 2519
    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                           // 2520
                                                                                                                     // 2521
    var notIndexedData = data.data.slice(2);                                                                         // 2522
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                    // 2523
                                                                                                                     // 2524
    var result = formatters.outputLogFormatter(data);                                                                // 2525
    result.event = this.displayName();                                                                               // 2526
    result.address = data.address;                                                                                   // 2527
                                                                                                                     // 2528
    result.args = this._params.reduce(function (acc, current) {                                                      // 2529
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                      // 2530
        return acc;                                                                                                  // 2531
    }, {});                                                                                                          // 2532
                                                                                                                     // 2533
    delete result.data;                                                                                              // 2534
    delete result.topics;                                                                                            // 2535
                                                                                                                     // 2536
    return result;                                                                                                   // 2537
};                                                                                                                   // 2538
                                                                                                                     // 2539
/**                                                                                                                  // 2540
 * Should be used to create new filter object from event                                                             // 2541
 *                                                                                                                   // 2542
 * @method execute                                                                                                   // 2543
 * @param {Object} indexed                                                                                           // 2544
 * @param {Object} options                                                                                           // 2545
 * @return {Object} filter object                                                                                    // 2546
 */                                                                                                                  // 2547
SolidityEvent.prototype.execute = function (indexed, options, callback) {                                            // 2548
                                                                                                                     // 2549
    if (utils.isFunction(arguments[arguments.length - 1])) {                                                         // 2550
        callback = arguments[arguments.length - 1];                                                                  // 2551
        if(arguments.length === 2)                                                                                   // 2552
            options = null;                                                                                          // 2553
        if(arguments.length === 1) {                                                                                 // 2554
            options = null;                                                                                          // 2555
            indexed = {};                                                                                            // 2556
        }                                                                                                            // 2557
    }                                                                                                                // 2558
                                                                                                                     // 2559
    var o = this.encode(indexed, options);                                                                           // 2560
    var formatter = this.decode.bind(this);                                                                          // 2561
    return new Filter(o, watches.eth(), formatter, callback);                                                        // 2562
};                                                                                                                   // 2563
                                                                                                                     // 2564
/**                                                                                                                  // 2565
 * Should be used to attach event to contract object                                                                 // 2566
 *                                                                                                                   // 2567
 * @method attachToContract                                                                                          // 2568
 * @param {Contract}                                                                                                 // 2569
 */                                                                                                                  // 2570
SolidityEvent.prototype.attachToContract = function (contract) {                                                     // 2571
    var execute = this.execute.bind(this);                                                                           // 2572
    var displayName = this.displayName();                                                                            // 2573
    if (!contract[displayName]) {                                                                                    // 2574
        contract[displayName] = execute;                                                                             // 2575
    }                                                                                                                // 2576
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                      // 2577
};                                                                                                                   // 2578
                                                                                                                     // 2579
module.exports = SolidityEvent;                                                                                      // 2580
                                                                                                                     // 2581
                                                                                                                     // 2582
},{"../solidity/coder":1,"../utils/sha3":6,"../utils/utils":7,"./filter":17,"./formatters":18,"./watches":31}],17:[function(require,module,exports){
/*                                                                                                                   // 2584
    This file is part of ethereum.js.                                                                                // 2585
                                                                                                                     // 2586
    ethereum.js is free software: you can redistribute it and/or modify                                              // 2587
    it under the terms of the GNU Lesser General Public License as published by                                      // 2588
    the Free Software Foundation, either version 3 of the License, or                                                // 2589
    (at your option) any later version.                                                                              // 2590
                                                                                                                     // 2591
    ethereum.js is distributed in the hope that it will be useful,                                                   // 2592
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 2593
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 2594
    GNU Lesser General Public License for more details.                                                              // 2595
                                                                                                                     // 2596
    You should have received a copy of the GNU Lesser General Public License                                         // 2597
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 2598
*/                                                                                                                   // 2599
/** @file filter.js                                                                                                  // 2600
 * @authors:                                                                                                         // 2601
 *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                // 2602
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 2603
 *   Marian Oancea <marian@ethdev.com>                                                                               // 2604
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                         // 2605
 *   Gav Wood <g@ethdev.com>                                                                                         // 2606
 * @date 2014                                                                                                        // 2607
 */                                                                                                                  // 2608
                                                                                                                     // 2609
var RequestManager = require('./requestmanager');                                                                    // 2610
var formatters = require('./formatters');                                                                            // 2611
var utils = require('../utils/utils');                                                                               // 2612
                                                                                                                     // 2613
/**                                                                                                                  // 2614
* Converts a given topic to a hex string, but also allows null values.                                               // 2615
*                                                                                                                    // 2616
* @param {Mixed} value                                                                                               // 2617
* @return {String}                                                                                                   // 2618
*/                                                                                                                   // 2619
var toTopic = function(value){                                                                                       // 2620
                                                                                                                     // 2621
    if(value === null || typeof value === 'undefined')                                                               // 2622
        return null;                                                                                                 // 2623
                                                                                                                     // 2624
    value = String(value);                                                                                           // 2625
                                                                                                                     // 2626
    if(value.indexOf('0x') === 0)                                                                                    // 2627
        return value;                                                                                                // 2628
    else                                                                                                             // 2629
        return utils.fromAscii(value);                                                                               // 2630
};                                                                                                                   // 2631
                                                                                                                     // 2632
/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones        // 2633
/// @param should be string or object                                                                                // 2634
/// @returns options string or object                                                                                // 2635
var getOptions = function (options) {                                                                                // 2636
                                                                                                                     // 2637
    if (utils.isString(options)) {                                                                                   // 2638
        return options;                                                                                              // 2639
    }                                                                                                                // 2640
                                                                                                                     // 2641
    options = options || {};                                                                                         // 2642
                                                                                                                     // 2643
    // make sure topics, get converted to hex                                                                        // 2644
    options.topics = options.topics || [];                                                                           // 2645
    options.topics = options.topics.map(function(topic){                                                             // 2646
        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                         // 2647
    });                                                                                                              // 2648
                                                                                                                     // 2649
    // lazy load                                                                                                     // 2650
    return {                                                                                                         // 2651
        topics: options.topics,                                                                                      // 2652
        to: options.to,                                                                                              // 2653
        address: options.address,                                                                                    // 2654
        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                          // 2655
        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                               // 2656
    };                                                                                                               // 2657
};                                                                                                                   // 2658
                                                                                                                     // 2659
/**                                                                                                                  // 2660
Adds the callback and sets up the methods, to iterate over the results.                                              // 2661
                                                                                                                     // 2662
@method getLogsAtStart                                                                                               // 2663
@param {Object} self                                                                                                 // 2664
@param {funciton}                                                                                                    // 2665
*/                                                                                                                   // 2666
var getLogsAtStart = function(self, callback){                                                                       // 2667
    // call getFilterLogs for the first watch callback start                                                         // 2668
    if (!utils.isString(self.options)) {                                                                             // 2669
        self.get(function (err, messages) {                                                                          // 2670
            // don't send all the responses to all the watches again... just to self one                             // 2671
            if (err) {                                                                                               // 2672
                callback(err);                                                                                       // 2673
            }                                                                                                        // 2674
                                                                                                                     // 2675
            messages.forEach(function (message) {                                                                    // 2676
                callback(null, message);                                                                             // 2677
            });                                                                                                      // 2678
        });                                                                                                          // 2679
    }                                                                                                                // 2680
};                                                                                                                   // 2681
                                                                                                                     // 2682
/**                                                                                                                  // 2683
Adds the callback and sets up the methods, to iterate over the results.                                              // 2684
                                                                                                                     // 2685
@method pollFilter                                                                                                   // 2686
@param {Object} self                                                                                                 // 2687
*/                                                                                                                   // 2688
var pollFilter = function(self) {                                                                                    // 2689
                                                                                                                     // 2690
    var onMessage = function (error, messages) {                                                                     // 2691
        if (error) {                                                                                                 // 2692
            return self.callbacks.forEach(function (callback) {                                                      // 2693
                callback(error);                                                                                     // 2694
            });                                                                                                      // 2695
        }                                                                                                            // 2696
                                                                                                                     // 2697
        messages.forEach(function (message) {                                                                        // 2698
            message = self.formatter ? self.formatter(message) : message;                                            // 2699
            self.callbacks.forEach(function (callback) {                                                             // 2700
                callback(null, message);                                                                             // 2701
            });                                                                                                      // 2702
        });                                                                                                          // 2703
    };                                                                                                               // 2704
                                                                                                                     // 2705
    RequestManager.getInstance().startPolling({                                                                      // 2706
        method: self.implementation.poll.call,                                                                       // 2707
        params: [self.filterId],                                                                                     // 2708
    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                      // 2709
                                                                                                                     // 2710
};                                                                                                                   // 2711
                                                                                                                     // 2712
var Filter = function (options, methods, formatter, callback) {                                                      // 2713
    var self = this;                                                                                                 // 2714
    var implementation = {};                                                                                         // 2715
    methods.forEach(function (method) {                                                                              // 2716
        method.attachToObject(implementation);                                                                       // 2717
    });                                                                                                              // 2718
    this.options = getOptions(options);                                                                              // 2719
    this.implementation = implementation;                                                                            // 2720
    this.filterId = null;                                                                                            // 2721
    this.callbacks = [];                                                                                             // 2722
    this.pollFilters = [];                                                                                           // 2723
    this.formatter = formatter;                                                                                      // 2724
    this.implementation.newFilter(this.options, function(error, id){                                                 // 2725
        if(error) {                                                                                                  // 2726
            self.callbacks.forEach(function(cb){                                                                     // 2727
                cb(error);                                                                                           // 2728
            });                                                                                                      // 2729
        } else {                                                                                                     // 2730
            self.filterId = id;                                                                                      // 2731
                                                                                                                     // 2732
            // get filter logs for the already existing watch calls                                                  // 2733
            self.callbacks.forEach(function(cb){                                                                     // 2734
                getLogsAtStart(self, cb);                                                                            // 2735
            });                                                                                                      // 2736
            if(self.callbacks.length > 0)                                                                            // 2737
                pollFilter(self);                                                                                    // 2738
                                                                                                                     // 2739
            // start to watch immediately                                                                            // 2740
            if(callback) {                                                                                           // 2741
                return self.watch(callback);                                                                         // 2742
            }                                                                                                        // 2743
        }                                                                                                            // 2744
    });                                                                                                              // 2745
                                                                                                                     // 2746
};                                                                                                                   // 2747
                                                                                                                     // 2748
Filter.prototype.watch = function (callback) {                                                                       // 2749
    this.callbacks.push(callback);                                                                                   // 2750
                                                                                                                     // 2751
    if(this.filterId) {                                                                                              // 2752
        getLogsAtStart(this, callback);                                                                              // 2753
        pollFilter(this);                                                                                            // 2754
    }                                                                                                                // 2755
                                                                                                                     // 2756
    return this;                                                                                                     // 2757
};                                                                                                                   // 2758
                                                                                                                     // 2759
Filter.prototype.stopWatching = function () {                                                                        // 2760
    RequestManager.getInstance().stopPolling(this.filterId);                                                         // 2761
    // remove filter async                                                                                           // 2762
    this.implementation.uninstallFilter(this.filterId, function(){});                                                // 2763
    this.callbacks = [];                                                                                             // 2764
};                                                                                                                   // 2765
                                                                                                                     // 2766
Filter.prototype.get = function (callback) {                                                                         // 2767
    var self = this;                                                                                                 // 2768
    if (utils.isFunction(callback)) {                                                                                // 2769
        this.implementation.getLogs(this.filterId, function(err, res){                                               // 2770
            if (err) {                                                                                               // 2771
                callback(err);                                                                                       // 2772
            } else {                                                                                                 // 2773
                callback(null, res.map(function (log) {                                                              // 2774
                    return self.formatter ? self.formatter(log) : log;                                               // 2775
                }));                                                                                                 // 2776
            }                                                                                                        // 2777
        });                                                                                                          // 2778
    } else {                                                                                                         // 2779
        var logs = this.implementation.getLogs(this.filterId);                                                       // 2780
        return logs.map(function (log) {                                                                             // 2781
            return self.formatter ? self.formatter(log) : log;                                                       // 2782
        });                                                                                                          // 2783
    }                                                                                                                // 2784
                                                                                                                     // 2785
    return this;                                                                                                     // 2786
};                                                                                                                   // 2787
                                                                                                                     // 2788
module.exports = Filter;                                                                                             // 2789
                                                                                                                     // 2790
                                                                                                                     // 2791
},{"../utils/utils":7,"./formatters":18,"./requestmanager":28}],18:[function(require,module,exports){                // 2792
/*                                                                                                                   // 2793
    This file is part of ethereum.js.                                                                                // 2794
                                                                                                                     // 2795
    ethereum.js is free software: you can redistribute it and/or modify                                              // 2796
    it under the terms of the GNU Lesser General Public License as published by                                      // 2797
    the Free Software Foundation, either version 3 of the License, or                                                // 2798
    (at your option) any later version.                                                                              // 2799
                                                                                                                     // 2800
    ethereum.js is distributed in the hope that it will be useful,                                                   // 2801
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 2802
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 2803
    GNU Lesser General Public License for more details.                                                              // 2804
                                                                                                                     // 2805
    You should have received a copy of the GNU Lesser General Public License                                         // 2806
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 2807
*/                                                                                                                   // 2808
/**                                                                                                                  // 2809
 * @file formatters.js                                                                                               // 2810
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 2811
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                   // 2812
 * @date 2015                                                                                                        // 2813
 */                                                                                                                  // 2814
                                                                                                                     // 2815
var utils = require('../utils/utils');                                                                               // 2816
var config = require('../utils/config');                                                                             // 2817
                                                                                                                     // 2818
/**                                                                                                                  // 2819
 * Should the format output to a big number                                                                          // 2820
 *                                                                                                                   // 2821
 * @method outputBigNumberFormatter                                                                                  // 2822
 * @param {String|Number|BigNumber}                                                                                  // 2823
 * @returns {BigNumber} object                                                                                       // 2824
 */                                                                                                                  // 2825
var outputBigNumberFormatter = function (number) {                                                                   // 2826
    return utils.toBigNumber(number);                                                                                // 2827
};                                                                                                                   // 2828
                                                                                                                     // 2829
var isPredefinedBlockNumber = function (blockNumber) {                                                               // 2830
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                      // 2831
};                                                                                                                   // 2832
                                                                                                                     // 2833
var inputDefaultBlockNumberFormatter = function (blockNumber) {                                                      // 2834
    if (blockNumber === undefined) {                                                                                 // 2835
        return config.defaultBlock;                                                                                  // 2836
    }                                                                                                                // 2837
    return inputBlockNumberFormatter(blockNumber);                                                                   // 2838
};                                                                                                                   // 2839
                                                                                                                     // 2840
var inputBlockNumberFormatter = function (blockNumber) {                                                             // 2841
    if (blockNumber === undefined) {                                                                                 // 2842
        return undefined;                                                                                            // 2843
    } else if (isPredefinedBlockNumber(blockNumber)) {                                                               // 2844
        return blockNumber;                                                                                          // 2845
    }                                                                                                                // 2846
    return utils.toHex(blockNumber);                                                                                 // 2847
};                                                                                                                   // 2848
                                                                                                                     // 2849
/**                                                                                                                  // 2850
 * Formats the input of a transaction and converts all values to HEX                                                 // 2851
 *                                                                                                                   // 2852
 * @method inputTransactionFormatter                                                                                 // 2853
 * @param {Object} transaction options                                                                               // 2854
 * @returns object                                                                                                   // 2855
*/                                                                                                                   // 2856
var inputTransactionFormatter = function (options){                                                                  // 2857
                                                                                                                     // 2858
    options.from = options.from || config.defaultAccount;                                                            // 2859
                                                                                                                     // 2860
    // make code -> data                                                                                             // 2861
    if (options.code) {                                                                                              // 2862
        options.data = options.code;                                                                                 // 2863
        delete options.code;                                                                                         // 2864
    }                                                                                                                // 2865
                                                                                                                     // 2866
    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                    // 2867
        return options[key] !== undefined;                                                                           // 2868
    }).forEach(function(key){                                                                                        // 2869
        options[key] = utils.fromDecimal(options[key]);                                                              // 2870
    });                                                                                                              // 2871
                                                                                                                     // 2872
    return options;                                                                                                  // 2873
};                                                                                                                   // 2874
                                                                                                                     // 2875
/**                                                                                                                  // 2876
 * Formats the output of a transaction to its proper values                                                          // 2877
 *                                                                                                                   // 2878
 * @method outputTransactionFormatter                                                                                // 2879
 * @param {Object} tx                                                                                                // 2880
 * @returns {Object}                                                                                                 // 2881
*/                                                                                                                   // 2882
var outputTransactionFormatter = function (tx){                                                                      // 2883
    if(tx.blockNumber !== null)                                                                                      // 2884
        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                            // 2885
    if(tx.transactionIndex !== null)                                                                                 // 2886
        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                  // 2887
    tx.nonce = utils.toDecimal(tx.nonce);                                                                            // 2888
    tx.gas = utils.toDecimal(tx.gas);                                                                                // 2889
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                    // 2890
    tx.value = utils.toBigNumber(tx.value);                                                                          // 2891
    return tx;                                                                                                       // 2892
};                                                                                                                   // 2893
                                                                                                                     // 2894
/**                                                                                                                  // 2895
 * Formats the output of a transaction receipt to its proper values                                                  // 2896
 *                                                                                                                   // 2897
 * @method outputTransactionReceiptFormatter                                                                         // 2898
 * @param {Object} receipt                                                                                           // 2899
 * @returns {Object}                                                                                                 // 2900
*/                                                                                                                   // 2901
var outputTransactionReceiptFormatter = function (receipt){                                                          // 2902
    if(receipt.blockNumber !== null)                                                                                 // 2903
        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                  // 2904
    if(receipt.transactionIndex !== null)                                                                            // 2905
        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                        // 2906
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                          // 2907
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                              // 2908
                                                                                                                     // 2909
    if(utils.isArray(receipt.logs)) {                                                                                // 2910
        receipt.logs = receipt.logs.map(function(log){                                                               // 2911
            return outputLogFormatter(log);                                                                          // 2912
        });                                                                                                          // 2913
    }                                                                                                                // 2914
                                                                                                                     // 2915
    return receipt;                                                                                                  // 2916
};                                                                                                                   // 2917
                                                                                                                     // 2918
/**                                                                                                                  // 2919
 * Formats the output of a block to its proper values                                                                // 2920
 *                                                                                                                   // 2921
 * @method outputBlockFormatter                                                                                      // 2922
 * @param {Object} block                                                                                             // 2923
 * @returns {Object}                                                                                                 // 2924
*/                                                                                                                   // 2925
var outputBlockFormatter = function(block) {                                                                         // 2926
                                                                                                                     // 2927
    // transform to number                                                                                           // 2928
    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                // 2929
    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                  // 2930
    block.size = utils.toDecimal(block.size);                                                                        // 2931
    block.timestamp = utils.toDecimal(block.timestamp);                                                              // 2932
    if(block.number !== null)                                                                                        // 2933
        block.number = utils.toDecimal(block.number);                                                                // 2934
                                                                                                                     // 2935
    block.difficulty = utils.toBigNumber(block.difficulty);                                                          // 2936
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                // 2937
                                                                                                                     // 2938
    if (utils.isArray(block.transactions)) {                                                                         // 2939
        block.transactions.forEach(function(item){                                                                   // 2940
            if(!utils.isString(item))                                                                                // 2941
                return outputTransactionFormatter(item);                                                             // 2942
        });                                                                                                          // 2943
    }                                                                                                                // 2944
                                                                                                                     // 2945
    return block;                                                                                                    // 2946
};                                                                                                                   // 2947
                                                                                                                     // 2948
/**                                                                                                                  // 2949
 * Formats the output of a log                                                                                       // 2950
 *                                                                                                                   // 2951
 * @method outputLogFormatter                                                                                        // 2952
 * @param {Object} log object                                                                                        // 2953
 * @returns {Object} log                                                                                             // 2954
*/                                                                                                                   // 2955
var outputLogFormatter = function(log) {                                                                             // 2956
    if(log.blockNumber !== null)                                                                                     // 2957
        log.blockNumber = utils.toDecimal(log.blockNumber);                                                          // 2958
    if(log.transactionIndex !== null)                                                                                // 2959
        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                // 2960
    if(log.logIndex !== null)                                                                                        // 2961
        log.logIndex = utils.toDecimal(log.logIndex);                                                                // 2962
                                                                                                                     // 2963
    return log;                                                                                                      // 2964
};                                                                                                                   // 2965
                                                                                                                     // 2966
/**                                                                                                                  // 2967
 * Formats the input of a whisper post and converts all values to HEX                                                // 2968
 *                                                                                                                   // 2969
 * @method inputPostFormatter                                                                                        // 2970
 * @param {Object} transaction object                                                                                // 2971
 * @returns {Object}                                                                                                 // 2972
*/                                                                                                                   // 2973
var inputPostFormatter = function(post) {                                                                            // 2974
                                                                                                                     // 2975
    post.payload = utils.toHex(post.payload);                                                                        // 2976
    post.ttl = utils.fromDecimal(post.ttl);                                                                          // 2977
    post.workToProve = utils.fromDecimal(post.workToProve);                                                          // 2978
    post.priority = utils.fromDecimal(post.priority);                                                                // 2979
                                                                                                                     // 2980
    // fallback                                                                                                      // 2981
    if (!utils.isArray(post.topics)) {                                                                               // 2982
        post.topics = post.topics ? [post.topics] : [];                                                              // 2983
    }                                                                                                                // 2984
                                                                                                                     // 2985
    // format the following options                                                                                  // 2986
    post.topics = post.topics.map(function(topic){                                                                   // 2987
        return utils.fromAscii(topic);                                                                               // 2988
    });                                                                                                              // 2989
                                                                                                                     // 2990
    return post;                                                                                                     // 2991
};                                                                                                                   // 2992
                                                                                                                     // 2993
/**                                                                                                                  // 2994
 * Formats the output of a received post message                                                                     // 2995
 *                                                                                                                   // 2996
 * @method outputPostFormatter                                                                                       // 2997
 * @param {Object}                                                                                                   // 2998
 * @returns {Object}                                                                                                 // 2999
 */                                                                                                                  // 3000
var outputPostFormatter = function(post){                                                                            // 3001
                                                                                                                     // 3002
    post.expiry = utils.toDecimal(post.expiry);                                                                      // 3003
    post.sent = utils.toDecimal(post.sent);                                                                          // 3004
    post.ttl = utils.toDecimal(post.ttl);                                                                            // 3005
    post.workProved = utils.toDecimal(post.workProved);                                                              // 3006
    post.payloadRaw = post.payload;                                                                                  // 3007
    post.payload = utils.toAscii(post.payload);                                                                      // 3008
                                                                                                                     // 3009
    if (utils.isJson(post.payload)) {                                                                                // 3010
        post.payload = JSON.parse(post.payload);                                                                     // 3011
    }                                                                                                                // 3012
                                                                                                                     // 3013
    // format the following options                                                                                  // 3014
    if (!post.topics) {                                                                                              // 3015
        post.topics = [];                                                                                            // 3016
    }                                                                                                                // 3017
    post.topics = post.topics.map(function(topic){                                                                   // 3018
        return utils.toAscii(topic);                                                                                 // 3019
    });                                                                                                              // 3020
                                                                                                                     // 3021
    return post;                                                                                                     // 3022
};                                                                                                                   // 3023
                                                                                                                     // 3024
module.exports = {                                                                                                   // 3025
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                              // 3026
    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                            // 3027
    inputTransactionFormatter: inputTransactionFormatter,                                                            // 3028
    inputPostFormatter: inputPostFormatter,                                                                          // 3029
    outputBigNumberFormatter: outputBigNumberFormatter,                                                              // 3030
    outputTransactionFormatter: outputTransactionFormatter,                                                          // 3031
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                            // 3032
    outputBlockFormatter: outputBlockFormatter,                                                                      // 3033
    outputLogFormatter: outputLogFormatter,                                                                          // 3034
    outputPostFormatter: outputPostFormatter                                                                         // 3035
};                                                                                                                   // 3036
                                                                                                                     // 3037
                                                                                                                     // 3038
},{"../utils/config":5,"../utils/utils":7}],19:[function(require,module,exports){                                    // 3039
/*                                                                                                                   // 3040
    This file is part of ethereum.js.                                                                                // 3041
                                                                                                                     // 3042
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3043
    it under the terms of the GNU Lesser General Public License as published by                                      // 3044
    the Free Software Foundation, either version 3 of the License, or                                                // 3045
    (at your option) any later version.                                                                              // 3046
                                                                                                                     // 3047
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3048
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3049
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3050
    GNU Lesser General Public License for more details.                                                              // 3051
                                                                                                                     // 3052
    You should have received a copy of the GNU Lesser General Public License                                         // 3053
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3054
*/                                                                                                                   // 3055
/**                                                                                                                  // 3056
 * @file function.js                                                                                                 // 3057
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 3058
 * @date 2015                                                                                                        // 3059
 */                                                                                                                  // 3060
                                                                                                                     // 3061
var web3 = require('../web3');                                                                                       // 3062
var coder = require('../solidity/coder');                                                                            // 3063
var utils = require('../utils/utils');                                                                               // 3064
var formatters = require('./formatters');                                                                            // 3065
var sha3 = require('../utils/sha3');                                                                                 // 3066
                                                                                                                     // 3067
/**                                                                                                                  // 3068
 * This prototype should be used to call/sendTransaction to solidity functions                                       // 3069
 */                                                                                                                  // 3070
var SolidityFunction = function (json, address) {                                                                    // 3071
    this._inputTypes = json.inputs.map(function (i) {                                                                // 3072
        return i.type;                                                                                               // 3073
    });                                                                                                              // 3074
    this._outputTypes = json.outputs.map(function (i) {                                                              // 3075
        return i.type;                                                                                               // 3076
    });                                                                                                              // 3077
    this._constant = json.constant;                                                                                  // 3078
    this._name = utils.transformToFullName(json);                                                                    // 3079
    this._address = address;                                                                                         // 3080
};                                                                                                                   // 3081
                                                                                                                     // 3082
SolidityFunction.prototype.extractCallback = function (args) {                                                       // 3083
    if (utils.isFunction(args[args.length - 1])) {                                                                   // 3084
        return args.pop(); // modify the args array!                                                                 // 3085
    }                                                                                                                // 3086
};                                                                                                                   // 3087
                                                                                                                     // 3088
SolidityFunction.prototype.extractDefaultBlock = function (args) {                                                   // 3089
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                            // 3090
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                    // 3091
    }                                                                                                                // 3092
};                                                                                                                   // 3093
                                                                                                                     // 3094
/**                                                                                                                  // 3095
 * Should be used to create payload from arguments                                                                   // 3096
 *                                                                                                                   // 3097
 * @method toPayload                                                                                                 // 3098
 * @param {Array} solidity function params                                                                           // 3099
 * @param {Object} optional payload options                                                                          // 3100
 */                                                                                                                  // 3101
SolidityFunction.prototype.toPayload = function (args) {                                                             // 3102
    var options = {};                                                                                                // 3103
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                             // 3104
        options = args[args.length - 1];                                                                             // 3105
    }                                                                                                                // 3106
    options.to = this._address;                                                                                      // 3107
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                             // 3108
    return options;                                                                                                  // 3109
};                                                                                                                   // 3110
                                                                                                                     // 3111
/**                                                                                                                  // 3112
 * Should be used to get function signature                                                                          // 3113
 *                                                                                                                   // 3114
 * @method signature                                                                                                 // 3115
 * @return {String} function signature                                                                               // 3116
 */                                                                                                                  // 3117
SolidityFunction.prototype.signature = function () {                                                                 // 3118
    return sha3(this._name).slice(0, 8);                                                                             // 3119
};                                                                                                                   // 3120
                                                                                                                     // 3121
                                                                                                                     // 3122
SolidityFunction.prototype.unpackOutput = function (output) {                                                        // 3123
    if (!output) {                                                                                                   // 3124
        return;                                                                                                      // 3125
    }                                                                                                                // 3126
                                                                                                                     // 3127
    output = output.length >= 2 ? output.slice(2) : output;                                                          // 3128
    var result = coder.decodeParams(this._outputTypes, output);                                                      // 3129
    return result.length === 1 ? result[0] : result;                                                                 // 3130
};                                                                                                                   // 3131
                                                                                                                     // 3132
/**                                                                                                                  // 3133
 * Calls a contract function.                                                                                        // 3134
 *                                                                                                                   // 3135
 * @method call                                                                                                      // 3136
 * @param {...Object} Contract function arguments                                                                    // 3137
 * @param {function} If the last argument is a function, the contract function                                       // 3138
 *   call will be asynchronous, and the callback will be passed the                                                  // 3139
 *   error and result.                                                                                               // 3140
 * @return {String} output bytes                                                                                     // 3141
 */                                                                                                                  // 3142
SolidityFunction.prototype.call = function () {                                                                      // 3143
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                // 3144
    var callback = this.extractCallback(args);                                                                       // 3145
    var defaultBlock = this.extractDefaultBlock(args);                                                               // 3146
    var payload = this.toPayload(args);                                                                              // 3147
                                                                                                                     // 3148
                                                                                                                     // 3149
    if (!callback) {                                                                                                 // 3150
        var output = web3.eth.call(payload, defaultBlock);                                                           // 3151
        return this.unpackOutput(output);                                                                            // 3152
    }                                                                                                                // 3153
                                                                                                                     // 3154
    var self = this;                                                                                                 // 3155
    web3.eth.call(payload, defaultBlock, function (error, output) {                                                  // 3156
        callback(error, self.unpackOutput(output));                                                                  // 3157
    });                                                                                                              // 3158
};                                                                                                                   // 3159
                                                                                                                     // 3160
/**                                                                                                                  // 3161
 * Should be used to sendTransaction to solidity function                                                            // 3162
 *                                                                                                                   // 3163
 * @method sendTransaction                                                                                           // 3164
 * @param {Object} options                                                                                           // 3165
 */                                                                                                                  // 3166
SolidityFunction.prototype.sendTransaction = function () {                                                           // 3167
    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                // 3168
    var callback = this.extractCallback(args);                                                                       // 3169
    var payload = this.toPayload(args);                                                                              // 3170
                                                                                                                     // 3171
    if (!callback) {                                                                                                 // 3172
        return web3.eth.sendTransaction(payload);                                                                    // 3173
    }                                                                                                                // 3174
                                                                                                                     // 3175
    web3.eth.sendTransaction(payload, callback);                                                                     // 3176
};                                                                                                                   // 3177
                                                                                                                     // 3178
/**                                                                                                                  // 3179
 * Should be used to estimateGas of solidity function                                                                // 3180
 *                                                                                                                   // 3181
 * @method estimateGas                                                                                               // 3182
 * @param {Object} options                                                                                           // 3183
 */                                                                                                                  // 3184
SolidityFunction.prototype.estimateGas = function () {                                                               // 3185
    var args = Array.prototype.slice.call(arguments);                                                                // 3186
    var callback = this.extractCallback(args);                                                                       // 3187
    var payload = this.toPayload(args);                                                                              // 3188
                                                                                                                     // 3189
    if (!callback) {                                                                                                 // 3190
        return web3.eth.estimateGas(payload);                                                                        // 3191
    }                                                                                                                // 3192
                                                                                                                     // 3193
    web3.eth.estimateGas(payload, callback);                                                                         // 3194
};                                                                                                                   // 3195
                                                                                                                     // 3196
/**                                                                                                                  // 3197
 * Should be used to get function display name                                                                       // 3198
 *                                                                                                                   // 3199
 * @method displayName                                                                                               // 3200
 * @return {String} display name of the function                                                                     // 3201
 */                                                                                                                  // 3202
SolidityFunction.prototype.displayName = function () {                                                               // 3203
    return utils.extractDisplayName(this._name);                                                                     // 3204
};                                                                                                                   // 3205
                                                                                                                     // 3206
/**                                                                                                                  // 3207
 * Should be used to get function type name                                                                          // 3208
 *                                                                                                                   // 3209
 * @method typeName                                                                                                  // 3210
 * @return {String} type name of the function                                                                        // 3211
 */                                                                                                                  // 3212
SolidityFunction.prototype.typeName = function () {                                                                  // 3213
    return utils.extractTypeName(this._name);                                                                        // 3214
};                                                                                                                   // 3215
                                                                                                                     // 3216
/**                                                                                                                  // 3217
 * Should be called to get rpc requests from solidity function                                                       // 3218
 *                                                                                                                   // 3219
 * @method request                                                                                                   // 3220
 * @returns {Object}                                                                                                 // 3221
 */                                                                                                                  // 3222
SolidityFunction.prototype.request = function () {                                                                   // 3223
    var args = Array.prototype.slice.call(arguments);                                                                // 3224
    var callback = this.extractCallback(args);                                                                       // 3225
    var payload = this.toPayload(args);                                                                              // 3226
    var format = this.unpackOutput.bind(this);                                                                       // 3227
                                                                                                                     // 3228
    return {                                                                                                         // 3229
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                 // 3230
        callback: callback,                                                                                          // 3231
        params: [payload],                                                                                           // 3232
        format: format                                                                                               // 3233
    };                                                                                                               // 3234
};                                                                                                                   // 3235
                                                                                                                     // 3236
/**                                                                                                                  // 3237
 * Should be called to execute function                                                                              // 3238
 *                                                                                                                   // 3239
 * @method execute                                                                                                   // 3240
 */                                                                                                                  // 3241
SolidityFunction.prototype.execute = function () {                                                                   // 3242
    var transaction = !this._constant;                                                                               // 3243
                                                                                                                     // 3244
    // send transaction                                                                                              // 3245
    if (transaction) {                                                                                               // 3246
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                              // 3247
    }                                                                                                                // 3248
                                                                                                                     // 3249
    // call                                                                                                          // 3250
    return this.call.apply(this, Array.prototype.slice.call(arguments));                                             // 3251
};                                                                                                                   // 3252
                                                                                                                     // 3253
/**                                                                                                                  // 3254
 * Should be called to attach function to contract                                                                   // 3255
 *                                                                                                                   // 3256
 * @method attachToContract                                                                                          // 3257
 * @param {Contract}                                                                                                 // 3258
 */                                                                                                                  // 3259
SolidityFunction.prototype.attachToContract = function (contract) {                                                  // 3260
    var execute = this.execute.bind(this);                                                                           // 3261
    execute.request = this.request.bind(this);                                                                       // 3262
    execute.call = this.call.bind(this);                                                                             // 3263
    execute.sendTransaction = this.sendTransaction.bind(this);                                                       // 3264
    execute.estimateGas = this.estimateGas.bind(this);                                                               // 3265
    var displayName = this.displayName();                                                                            // 3266
    if (!contract[displayName]) {                                                                                    // 3267
        contract[displayName] = execute;                                                                             // 3268
    }                                                                                                                // 3269
    contract[displayName][this.typeName()] = execute; // circular!!!!                                                // 3270
};                                                                                                                   // 3271
                                                                                                                     // 3272
module.exports = SolidityFunction;                                                                                   // 3273
                                                                                                                     // 3274
                                                                                                                     // 3275
},{"../solidity/coder":1,"../utils/sha3":6,"../utils/utils":7,"../web3":9,"./formatters":18}],20:[function(require,module,exports){
/*                                                                                                                   // 3277
    This file is part of ethereum.js.                                                                                // 3278
                                                                                                                     // 3279
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3280
    it under the terms of the GNU Lesser General Public License as published by                                      // 3281
    the Free Software Foundation, either version 3 of the License, or                                                // 3282
    (at your option) any later version.                                                                              // 3283
                                                                                                                     // 3284
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3285
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3286
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3287
    GNU Lesser General Public License for more details.                                                              // 3288
                                                                                                                     // 3289
    You should have received a copy of the GNU Lesser General Public License                                         // 3290
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3291
*/                                                                                                                   // 3292
/** @file httpprovider.js                                                                                            // 3293
 * @authors:                                                                                                         // 3294
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 3295
 *   Marian Oancea <marian@ethdev.com>                                                                               // 3296
 *   Fabian Vogelsteller <fabian@ethdev.com>                                                                         // 3297
 * @date 2014                                                                                                        // 3298
 */                                                                                                                  // 3299
                                                                                                                     // 3300
"use strict";                                                                                                        // 3301
                                                                                                                     // 3302
// resolves the problem for electron/atom shell environments, which use node integration, but have no process variable available
var XMLHttpRequest = (typeof window !== 'undefined' && window.XMLHttpRequest) ? window.XMLHttpRequest : require('xmlhttprequest').XMLHttpRequest; // jshint ignore:line
var errors = require('./errors');                                                                                    // 3305
                                                                                                                     // 3306
var HttpProvider = function (host) {                                                                                 // 3307
    this.host = host || 'http://localhost:8545';                                                                     // 3308
};                                                                                                                   // 3309
                                                                                                                     // 3310
HttpProvider.prototype.send = function (payload) {                                                                   // 3311
    var request = new XMLHttpRequest();                                                                              // 3312
                                                                                                                     // 3313
    request.open('POST', this.host, false);                                                                          // 3314
    request.setRequestHeader('Content-type','application/json');                                                     // 3315
                                                                                                                     // 3316
    try {                                                                                                            // 3317
        request.send(JSON.stringify(payload));                                                                       // 3318
    } catch(error) {                                                                                                 // 3319
        throw errors.InvalidConnection(this.host);                                                                   // 3320
    }                                                                                                                // 3321
                                                                                                                     // 3322
                                                                                                                     // 3323
    // check request.status                                                                                          // 3324
    // TODO: throw an error here! it cannot silently fail!!!                                                         // 3325
    //if (request.status !== 200) {                                                                                  // 3326
        //return;                                                                                                    // 3327
    //}                                                                                                              // 3328
                                                                                                                     // 3329
    var result = request.responseText;                                                                               // 3330
                                                                                                                     // 3331
    try {                                                                                                            // 3332
        result = JSON.parse(result);                                                                                 // 3333
    } catch(e) {                                                                                                     // 3334
        throw errors.InvalidResponse(result);                                                                        // 3335
    }                                                                                                                // 3336
                                                                                                                     // 3337
    return result;                                                                                                   // 3338
};                                                                                                                   // 3339
                                                                                                                     // 3340
HttpProvider.prototype.sendAsync = function (payload, callback) {                                                    // 3341
    var request = new XMLHttpRequest();                                                                              // 3342
    request.onreadystatechange = function() {                                                                        // 3343
        if (request.readyState === 4) {                                                                              // 3344
            var result = request.responseText;                                                                       // 3345
            var error = null;                                                                                        // 3346
                                                                                                                     // 3347
            try {                                                                                                    // 3348
                result = JSON.parse(result);                                                                         // 3349
            } catch(e) {                                                                                             // 3350
                error = errors.InvalidResponse(result);                                                              // 3351
            }                                                                                                        // 3352
                                                                                                                     // 3353
            callback(error, result);                                                                                 // 3354
        }                                                                                                            // 3355
    };                                                                                                               // 3356
                                                                                                                     // 3357
    request.open('POST', this.host, true);                                                                           // 3358
    request.setRequestHeader('Content-type','application/json');                                                     // 3359
                                                                                                                     // 3360
    try {                                                                                                            // 3361
        request.send(JSON.stringify(payload));                                                                       // 3362
    } catch(error) {                                                                                                 // 3363
        callback(errors.InvalidConnection(this.host));                                                               // 3364
    }                                                                                                                // 3365
};                                                                                                                   // 3366
                                                                                                                     // 3367
module.exports = HttpProvider;                                                                                       // 3368
                                                                                                                     // 3369
                                                                                                                     // 3370
},{"./errors":14,"xmlhttprequest":4}],21:[function(require,module,exports){                                          // 3371
/*                                                                                                                   // 3372
    This file is part of ethereum.js.                                                                                // 3373
                                                                                                                     // 3374
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3375
    it under the terms of the GNU Lesser General Public License as published by                                      // 3376
    the Free Software Foundation, either version 3 of the License, or                                                // 3377
    (at your option) any later version.                                                                              // 3378
                                                                                                                     // 3379
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3380
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3381
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3382
    GNU Lesser General Public License for more details.                                                              // 3383
                                                                                                                     // 3384
    You should have received a copy of the GNU Lesser General Public License                                         // 3385
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3386
*/                                                                                                                   // 3387
/**                                                                                                                  // 3388
 * @file icap.js                                                                                                     // 3389
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 3390
 * @date 2015                                                                                                        // 3391
 */                                                                                                                  // 3392
                                                                                                                     // 3393
var utils = require('../utils/utils');                                                                               // 3394
                                                                                                                     // 3395
/**                                                                                                                  // 3396
 * This prototype should be used to extract necessary information from iban address                                  // 3397
 *                                                                                                                   // 3398
 * @param {String} iban                                                                                              // 3399
 */                                                                                                                  // 3400
var ICAP = function (iban) {                                                                                         // 3401
    this._iban = iban;                                                                                               // 3402
};                                                                                                                   // 3403
                                                                                                                     // 3404
/**                                                                                                                  // 3405
 * Should be called to check if icap is correct                                                                      // 3406
 *                                                                                                                   // 3407
 * @method isValid                                                                                                   // 3408
 * @returns {Boolean} true if it is, otherwise false                                                                 // 3409
 */                                                                                                                  // 3410
ICAP.prototype.isValid = function () {                                                                               // 3411
    return utils.isIBAN(this._iban);                                                                                 // 3412
};                                                                                                                   // 3413
                                                                                                                     // 3414
/**                                                                                                                  // 3415
 * Should be called to check if iban number is direct                                                                // 3416
 *                                                                                                                   // 3417
 * @method isDirect                                                                                                  // 3418
 * @returns {Boolean} true if it is, otherwise false                                                                 // 3419
 */                                                                                                                  // 3420
ICAP.prototype.isDirect = function () {                                                                              // 3421
    return this._iban.length === 34;                                                                                 // 3422
};                                                                                                                   // 3423
                                                                                                                     // 3424
/**                                                                                                                  // 3425
 * Should be called to check if iban number if indirect                                                              // 3426
 *                                                                                                                   // 3427
 * @method isIndirect                                                                                                // 3428
 * @returns {Boolean} true if it is, otherwise false                                                                 // 3429
 */                                                                                                                  // 3430
ICAP.prototype.isIndirect = function () {                                                                            // 3431
    return this._iban.length === 20;                                                                                 // 3432
};                                                                                                                   // 3433
                                                                                                                     // 3434
/**                                                                                                                  // 3435
 * Should be called to get iban checksum                                                                             // 3436
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                      // 3437
 *                                                                                                                   // 3438
 * @method checksum                                                                                                  // 3439
 * @returns {String} checksum                                                                                        // 3440
 */                                                                                                                  // 3441
ICAP.prototype.checksum = function () {                                                                              // 3442
    return this._iban.substr(2, 2);                                                                                  // 3443
};                                                                                                                   // 3444
                                                                                                                     // 3445
/**                                                                                                                  // 3446
 * Should be called to get institution identifier                                                                    // 3447
 * eg. XREG                                                                                                          // 3448
 *                                                                                                                   // 3449
 * @method institution                                                                                               // 3450
 * @returns {String} institution identifier                                                                          // 3451
 */                                                                                                                  // 3452
ICAP.prototype.institution = function () {                                                                           // 3453
    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                         // 3454
};                                                                                                                   // 3455
                                                                                                                     // 3456
/**                                                                                                                  // 3457
 * Should be called to get client identifier within institution                                                      // 3458
 * eg. GAVOFYORK                                                                                                     // 3459
 *                                                                                                                   // 3460
 * @method client                                                                                                    // 3461
 * @returns {String} client identifier                                                                               // 3462
 */                                                                                                                  // 3463
ICAP.prototype.client = function () {                                                                                // 3464
    return this.isIndirect() ? this._iban.substr(11) : '';                                                           // 3465
};                                                                                                                   // 3466
                                                                                                                     // 3467
/**                                                                                                                  // 3468
 * Should be called to get client direct address                                                                     // 3469
 *                                                                                                                   // 3470
 * @method address                                                                                                   // 3471
 * @returns {String} client direct address                                                                           // 3472
 */                                                                                                                  // 3473
ICAP.prototype.address = function () {                                                                               // 3474
    return this.isDirect() ? this._iban.substr(4) : '';                                                              // 3475
};                                                                                                                   // 3476
                                                                                                                     // 3477
module.exports = ICAP;                                                                                               // 3478
                                                                                                                     // 3479
                                                                                                                     // 3480
},{"../utils/utils":7}],22:[function(require,module,exports){                                                        // 3481
/*                                                                                                                   // 3482
    This file is part of ethereum.js.                                                                                // 3483
                                                                                                                     // 3484
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3485
    it under the terms of the GNU Lesser General Public License as published by                                      // 3486
    the Free Software Foundation, either version 3 of the License, or                                                // 3487
    (at your option) any later version.                                                                              // 3488
                                                                                                                     // 3489
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3490
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3491
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3492
    GNU Lesser General Public License for more details.                                                              // 3493
                                                                                                                     // 3494
    You should have received a copy of the GNU Lesser General Public License                                         // 3495
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3496
*/                                                                                                                   // 3497
/** @file jsonrpc.js                                                                                                 // 3498
 * @authors:                                                                                                         // 3499
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 3500
 * @date 2015                                                                                                        // 3501
 */                                                                                                                  // 3502
                                                                                                                     // 3503
var Jsonrpc = function () {                                                                                          // 3504
    // singleton pattern                                                                                             // 3505
    if (arguments.callee._singletonInstance) {                                                                       // 3506
        return arguments.callee._singletonInstance;                                                                  // 3507
    }                                                                                                                // 3508
    arguments.callee._singletonInstance = this;                                                                      // 3509
                                                                                                                     // 3510
    this.messageId = 1;                                                                                              // 3511
};                                                                                                                   // 3512
                                                                                                                     // 3513
/**                                                                                                                  // 3514
 * @return {Jsonrpc} singleton                                                                                       // 3515
 */                                                                                                                  // 3516
Jsonrpc.getInstance = function () {                                                                                  // 3517
    var instance = new Jsonrpc();                                                                                    // 3518
    return instance;                                                                                                 // 3519
};                                                                                                                   // 3520
                                                                                                                     // 3521
/**                                                                                                                  // 3522
 * Should be called to valid json create payload object                                                              // 3523
 *                                                                                                                   // 3524
 * @method toPayload                                                                                                 // 3525
 * @param {Function} method of jsonrpc call, required                                                                // 3526
 * @param {Array} params, an array of method params, optional                                                        // 3527
 * @returns {Object} valid jsonrpc payload object                                                                    // 3528
 */                                                                                                                  // 3529
Jsonrpc.prototype.toPayload = function (method, params) {                                                            // 3530
    if (!method)                                                                                                     // 3531
        console.error('jsonrpc method should be specified!');                                                        // 3532
                                                                                                                     // 3533
    return {                                                                                                         // 3534
        jsonrpc: '2.0',                                                                                              // 3535
        method: method,                                                                                              // 3536
        params: params || [],                                                                                        // 3537
        id: this.messageId++                                                                                         // 3538
    };                                                                                                               // 3539
};                                                                                                                   // 3540
                                                                                                                     // 3541
/**                                                                                                                  // 3542
 * Should be called to check if jsonrpc response is valid                                                            // 3543
 *                                                                                                                   // 3544
 * @method isValidResponse                                                                                           // 3545
 * @param {Object}                                                                                                   // 3546
 * @returns {Boolean} true if response is valid, otherwise false                                                     // 3547
 */                                                                                                                  // 3548
Jsonrpc.prototype.isValidResponse = function (response) {                                                            // 3549
    return !!response &&                                                                                             // 3550
        !response.error &&                                                                                           // 3551
        response.jsonrpc === '2.0' &&                                                                                // 3552
        typeof response.id === 'number' &&                                                                           // 3553
        response.result !== undefined; // only undefined is not valid json object                                    // 3554
};                                                                                                                   // 3555
                                                                                                                     // 3556
/**                                                                                                                  // 3557
 * Should be called to create batch payload object                                                                   // 3558
 *                                                                                                                   // 3559
 * @method toBatchPayload                                                                                            // 3560
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields                  // 3561
 * @returns {Array} batch payload                                                                                    // 3562
 */                                                                                                                  // 3563
Jsonrpc.prototype.toBatchPayload = function (messages) {                                                             // 3564
    var self = this;                                                                                                 // 3565
    return messages.map(function (message) {                                                                         // 3566
        return self.toPayload(message.method, message.params);                                                       // 3567
    });                                                                                                              // 3568
};                                                                                                                   // 3569
                                                                                                                     // 3570
module.exports = Jsonrpc;                                                                                            // 3571
                                                                                                                     // 3572
                                                                                                                     // 3573
},{}],23:[function(require,module,exports){                                                                          // 3574
/*                                                                                                                   // 3575
    This file is part of ethereum.js.                                                                                // 3576
                                                                                                                     // 3577
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3578
    it under the terms of the GNU Lesser General Public License as published by                                      // 3579
    the Free Software Foundation, either version 3 of the License, or                                                // 3580
    (at your option) any later version.                                                                              // 3581
                                                                                                                     // 3582
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3583
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3584
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3585
    GNU Lesser General Public License for more details.                                                              // 3586
                                                                                                                     // 3587
    You should have received a copy of the GNU Lesser General Public License                                         // 3588
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3589
*/                                                                                                                   // 3590
/**                                                                                                                  // 3591
 * @file method.js                                                                                                   // 3592
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 3593
 * @date 2015                                                                                                        // 3594
 */                                                                                                                  // 3595
                                                                                                                     // 3596
var RequestManager = require('./requestmanager');                                                                    // 3597
var utils = require('../utils/utils');                                                                               // 3598
var errors = require('./errors');                                                                                    // 3599
                                                                                                                     // 3600
var Method = function (options) {                                                                                    // 3601
    this.name = options.name;                                                                                        // 3602
    this.call = options.call;                                                                                        // 3603
    this.params = options.params || 0;                                                                               // 3604
    this.inputFormatter = options.inputFormatter;                                                                    // 3605
    this.outputFormatter = options.outputFormatter;                                                                  // 3606
};                                                                                                                   // 3607
                                                                                                                     // 3608
/**                                                                                                                  // 3609
 * Should be used to determine name of the jsonrpc method based on arguments                                         // 3610
 *                                                                                                                   // 3611
 * @method getCall                                                                                                   // 3612
 * @param {Array} arguments                                                                                          // 3613
 * @return {String} name of jsonrpc method                                                                           // 3614
 */                                                                                                                  // 3615
Method.prototype.getCall = function (args) {                                                                         // 3616
    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                // 3617
};                                                                                                                   // 3618
                                                                                                                     // 3619
/**                                                                                                                  // 3620
 * Should be used to extract callback from array of arguments. Modifies input param                                  // 3621
 *                                                                                                                   // 3622
 * @method extractCallback                                                                                           // 3623
 * @param {Array} arguments                                                                                          // 3624
 * @return {Function|Null} callback, if exists                                                                       // 3625
 */                                                                                                                  // 3626
Method.prototype.extractCallback = function (args) {                                                                 // 3627
    if (utils.isFunction(args[args.length - 1])) {                                                                   // 3628
        return args.pop(); // modify the args array!                                                                 // 3629
    }                                                                                                                // 3630
};                                                                                                                   // 3631
                                                                                                                     // 3632
/**                                                                                                                  // 3633
 * Should be called to check if the number of arguments is correct                                                   // 3634
 *                                                                                                                   // 3635
 * @method validateArgs                                                                                              // 3636
 * @param {Array} arguments                                                                                          // 3637
 * @throws {Error} if it is not                                                                                      // 3638
 */                                                                                                                  // 3639
Method.prototype.validateArgs = function (args) {                                                                    // 3640
    if (args.length !== this.params) {                                                                               // 3641
        throw errors.InvalidNumberOfParams();                                                                        // 3642
    }                                                                                                                // 3643
};                                                                                                                   // 3644
                                                                                                                     // 3645
/**                                                                                                                  // 3646
 * Should be called to format input args of method                                                                   // 3647
 *                                                                                                                   // 3648
 * @method formatInput                                                                                               // 3649
 * @param {Array}                                                                                                    // 3650
 * @return {Array}                                                                                                   // 3651
 */                                                                                                                  // 3652
Method.prototype.formatInput = function (args) {                                                                     // 3653
    if (!this.inputFormatter) {                                                                                      // 3654
        return args;                                                                                                 // 3655
    }                                                                                                                // 3656
                                                                                                                     // 3657
    return this.inputFormatter.map(function (formatter, index) {                                                     // 3658
        return formatter ? formatter(args[index]) : args[index];                                                     // 3659
    });                                                                                                              // 3660
};                                                                                                                   // 3661
                                                                                                                     // 3662
/**                                                                                                                  // 3663
 * Should be called to format output(result) of method                                                               // 3664
 *                                                                                                                   // 3665
 * @method formatOutput                                                                                              // 3666
 * @param {Object}                                                                                                   // 3667
 * @return {Object}                                                                                                  // 3668
 */                                                                                                                  // 3669
Method.prototype.formatOutput = function (result) {                                                                  // 3670
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                          // 3671
};                                                                                                                   // 3672
                                                                                                                     // 3673
/**                                                                                                                  // 3674
 * Should attach function to method                                                                                  // 3675
 *                                                                                                                   // 3676
 * @method attachToObject                                                                                            // 3677
 * @param {Object}                                                                                                   // 3678
 * @param {Function}                                                                                                 // 3679
 */                                                                                                                  // 3680
Method.prototype.attachToObject = function (obj) {                                                                   // 3681
    var func = this.send.bind(this);                                                                                 // 3682
    func.request = this.request.bind(this);                                                                          // 3683
    func.call = this.call; // that's ugly. filter.js uses it                                                         // 3684
    var name = this.name.split('.');                                                                                 // 3685
    if (name.length > 1) {                                                                                           // 3686
        obj[name[0]] = obj[name[0]] || {};                                                                           // 3687
        obj[name[0]][name[1]] = func;                                                                                // 3688
    } else {                                                                                                         // 3689
        obj[name[0]] = func;                                                                                         // 3690
    }                                                                                                                // 3691
};                                                                                                                   // 3692
                                                                                                                     // 3693
/**                                                                                                                  // 3694
 * Should create payload from given input args                                                                       // 3695
 *                                                                                                                   // 3696
 * @method toPayload                                                                                                 // 3697
 * @param {Array} args                                                                                               // 3698
 * @return {Object}                                                                                                  // 3699
 */                                                                                                                  // 3700
Method.prototype.toPayload = function (args) {                                                                       // 3701
    var call = this.getCall(args);                                                                                   // 3702
    var callback = this.extractCallback(args);                                                                       // 3703
    var params = this.formatInput(args);                                                                             // 3704
    this.validateArgs(params);                                                                                       // 3705
                                                                                                                     // 3706
    return {                                                                                                         // 3707
        method: call,                                                                                                // 3708
        params: params,                                                                                              // 3709
        callback: callback                                                                                           // 3710
    };                                                                                                               // 3711
};                                                                                                                   // 3712
                                                                                                                     // 3713
/**                                                                                                                  // 3714
 * Should be called to create pure JSONRPC request which can be used in batch request                                // 3715
 *                                                                                                                   // 3716
 * @method request                                                                                                   // 3717
 * @param {...} params                                                                                               // 3718
 * @return {Object} jsonrpc request                                                                                  // 3719
 */                                                                                                                  // 3720
Method.prototype.request = function () {                                                                             // 3721
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                             // 3722
    payload.format = this.formatOutput.bind(this);                                                                   // 3723
    return payload;                                                                                                  // 3724
};                                                                                                                   // 3725
                                                                                                                     // 3726
/**                                                                                                                  // 3727
 * Should send request to the API                                                                                    // 3728
 *                                                                                                                   // 3729
 * @method send                                                                                                      // 3730
 * @param list of params                                                                                             // 3731
 * @return result                                                                                                    // 3732
 */                                                                                                                  // 3733
Method.prototype.send = function () {                                                                                // 3734
    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                             // 3735
    if (payload.callback) {                                                                                          // 3736
        var self = this;                                                                                             // 3737
        return RequestManager.getInstance().sendAsync(payload, function (err, result) {                              // 3738
            payload.callback(err, self.formatOutput(result));                                                        // 3739
        });                                                                                                          // 3740
    }                                                                                                                // 3741
    return this.formatOutput(RequestManager.getInstance().send(payload));                                            // 3742
};                                                                                                                   // 3743
                                                                                                                     // 3744
module.exports = Method;                                                                                             // 3745
                                                                                                                     // 3746
                                                                                                                     // 3747
},{"../utils/utils":7,"./errors":14,"./requestmanager":28}],24:[function(require,module,exports){                    // 3748
/*                                                                                                                   // 3749
    This file is part of ethereum.js.                                                                                // 3750
                                                                                                                     // 3751
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3752
    it under the terms of the GNU Lesser General Public License as published by                                      // 3753
    the Free Software Foundation, either version 3 of the License, or                                                // 3754
    (at your option) any later version.                                                                              // 3755
                                                                                                                     // 3756
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3757
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3758
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3759
    GNU Lesser General Public License for more details.                                                              // 3760
                                                                                                                     // 3761
    You should have received a copy of the GNU Lesser General Public License                                         // 3762
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3763
*/                                                                                                                   // 3764
/**                                                                                                                  // 3765
 * @file namereg.js                                                                                                  // 3766
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 3767
 * @date 2015                                                                                                        // 3768
 */                                                                                                                  // 3769
                                                                                                                     // 3770
var contract = require('./contract');                                                                                // 3771
                                                                                                                     // 3772
var address = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                                          // 3773
                                                                                                                     // 3774
var abi = [                                                                                                          // 3775
    {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"name","outputs":[{"name":"o_name","type":"bytes32"}],"type":"function"},
    {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},
    {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"type":"function"},
    {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"addr","outputs":[{"name":"","type":"address"}],"type":"function"},
    {"constant":false,"inputs":[{"name":"_name","type":"bytes32"}],"name":"reserve","outputs":[],"type":"function"}, // 3780
    {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"subRegistrar","outputs":[{"name":"o_subRegistrar","type":"address"}],"type":"function"},
    {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_newOwner","type":"address"}],"name":"transfer","outputs":[],"type":"function"},
    {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_registrar","type":"address"}],"name":"setSubRegistrar","outputs":[],"type":"function"},
    {"constant":false,"inputs":[],"name":"Registrar","outputs":[],"type":"function"},                                // 3784
    {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_a","type":"address"},{"name":"_primary","type":"bool"}],"name":"setAddress","outputs":[],"type":"function"},
    {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_content","type":"bytes32"}],"name":"setContent","outputs":[],"type":"function"},
    {"constant":false,"inputs":[{"name":"_name","type":"bytes32"}],"name":"disown","outputs":[],"type":"function"},  // 3787
    {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"register","outputs":[{"name":"","type":"address"}],"type":"function"},
    {"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"bytes32"}],"name":"Changed","type":"event"},  // 3789
    {"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"bytes32"},{"indexed":true,"name":"addr","type":"address"}],"name":"PrimaryChanged","type":"event"}
];                                                                                                                   // 3791
                                                                                                                     // 3792
module.exports = contract(abi).at(address);                                                                          // 3793
                                                                                                                     // 3794
                                                                                                                     // 3795
},{"./contract":12}],25:[function(require,module,exports){                                                           // 3796
/*                                                                                                                   // 3797
    This file is part of ethereum.js.                                                                                // 3798
                                                                                                                     // 3799
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3800
    it under the terms of the GNU Lesser General Public License as published by                                      // 3801
    the Free Software Foundation, either version 3 of the License, or                                                // 3802
    (at your option) any later version.                                                                              // 3803
                                                                                                                     // 3804
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3805
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3806
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3807
    GNU Lesser General Public License for more details.                                                              // 3808
                                                                                                                     // 3809
    You should have received a copy of the GNU Lesser General Public License                                         // 3810
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3811
*/                                                                                                                   // 3812
/** @file eth.js                                                                                                     // 3813
 * @authors:                                                                                                         // 3814
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 3815
 * @date 2015                                                                                                        // 3816
 */                                                                                                                  // 3817
                                                                                                                     // 3818
var utils = require('../utils/utils');                                                                               // 3819
var Property = require('./property');                                                                                // 3820
                                                                                                                     // 3821
/// @returns an array of objects describing web3.eth api methods                                                     // 3822
var methods = [                                                                                                      // 3823
];                                                                                                                   // 3824
                                                                                                                     // 3825
/// @returns an array of objects describing web3.eth api properties                                                  // 3826
var properties = [                                                                                                   // 3827
    new Property({                                                                                                   // 3828
        name: 'listening',                                                                                           // 3829
        getter: 'net_listening'                                                                                      // 3830
    }),                                                                                                              // 3831
    new Property({                                                                                                   // 3832
        name: 'peerCount',                                                                                           // 3833
        getter: 'net_peerCount',                                                                                     // 3834
        outputFormatter: utils.toDecimal                                                                             // 3835
    })                                                                                                               // 3836
];                                                                                                                   // 3837
                                                                                                                     // 3838
                                                                                                                     // 3839
module.exports = {                                                                                                   // 3840
    methods: methods,                                                                                                // 3841
    properties: properties                                                                                           // 3842
};                                                                                                                   // 3843
                                                                                                                     // 3844
                                                                                                                     // 3845
},{"../utils/utils":7,"./property":26}],26:[function(require,module,exports){                                        // 3846
/*                                                                                                                   // 3847
    This file is part of ethereum.js.                                                                                // 3848
                                                                                                                     // 3849
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3850
    it under the terms of the GNU Lesser General Public License as published by                                      // 3851
    the Free Software Foundation, either version 3 of the License, or                                                // 3852
    (at your option) any later version.                                                                              // 3853
                                                                                                                     // 3854
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3855
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3856
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3857
    GNU Lesser General Public License for more details.                                                              // 3858
                                                                                                                     // 3859
    You should have received a copy of the GNU Lesser General Public License                                         // 3860
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3861
*/                                                                                                                   // 3862
/**                                                                                                                  // 3863
 * @file property.js                                                                                                 // 3864
 * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                  // 3865
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 3866
 * @date 2015                                                                                                        // 3867
 */                                                                                                                  // 3868
                                                                                                                     // 3869
var RequestManager = require('./requestmanager');                                                                    // 3870
                                                                                                                     // 3871
var Property = function (options) {                                                                                  // 3872
    this.name = options.name;                                                                                        // 3873
    this.getter = options.getter;                                                                                    // 3874
    this.setter = options.setter;                                                                                    // 3875
    this.outputFormatter = options.outputFormatter;                                                                  // 3876
    this.inputFormatter = options.inputFormatter;                                                                    // 3877
};                                                                                                                   // 3878
                                                                                                                     // 3879
/**                                                                                                                  // 3880
 * Should be called to format input args of method                                                                   // 3881
 *                                                                                                                   // 3882
 * @method formatInput                                                                                               // 3883
 * @param {Array}                                                                                                    // 3884
 * @return {Array}                                                                                                   // 3885
 */                                                                                                                  // 3886
Property.prototype.formatInput = function (arg) {                                                                    // 3887
    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                     // 3888
};                                                                                                                   // 3889
                                                                                                                     // 3890
/**                                                                                                                  // 3891
 * Should be called to format output(result) of method                                                               // 3892
 *                                                                                                                   // 3893
 * @method formatOutput                                                                                              // 3894
 * @param {Object}                                                                                                   // 3895
 * @return {Object}                                                                                                  // 3896
 */                                                                                                                  // 3897
Property.prototype.formatOutput = function (result) {                                                                // 3898
    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                          // 3899
};                                                                                                                   // 3900
                                                                                                                     // 3901
/**                                                                                                                  // 3902
 * Should attach function to method                                                                                  // 3903
 *                                                                                                                   // 3904
 * @method attachToObject                                                                                            // 3905
 * @param {Object}                                                                                                   // 3906
 * @param {Function}                                                                                                 // 3907
 */                                                                                                                  // 3908
Property.prototype.attachToObject = function (obj) {                                                                 // 3909
    var proto = {                                                                                                    // 3910
        get: this.get.bind(this),                                                                                    // 3911
    };                                                                                                               // 3912
                                                                                                                     // 3913
    var names = this.name.split('.');                                                                                // 3914
    var name = names[0];                                                                                             // 3915
    if (names.length > 1) {                                                                                          // 3916
        obj[names[0]] = obj[names[0]] || {};                                                                         // 3917
        obj = obj[names[0]];                                                                                         // 3918
        name = names[1];                                                                                             // 3919
    }                                                                                                                // 3920
                                                                                                                     // 3921
    Object.defineProperty(obj, name, proto);                                                                         // 3922
                                                                                                                     // 3923
    var toAsyncName = function (prefix, name) {                                                                      // 3924
        return prefix + name.charAt(0).toUpperCase() + name.slice(1);                                                // 3925
    };                                                                                                               // 3926
                                                                                                                     // 3927
    obj[toAsyncName('get', name)] = this.getAsync.bind(this);                                                        // 3928
};                                                                                                                   // 3929
                                                                                                                     // 3930
/**                                                                                                                  // 3931
 * Should be used to get value of the property                                                                       // 3932
 *                                                                                                                   // 3933
 * @method get                                                                                                       // 3934
 * @return {Object} value of the property                                                                            // 3935
 */                                                                                                                  // 3936
Property.prototype.get = function () {                                                                               // 3937
    return this.formatOutput(RequestManager.getInstance().send({                                                     // 3938
        method: this.getter                                                                                          // 3939
    }));                                                                                                             // 3940
};                                                                                                                   // 3941
                                                                                                                     // 3942
/**                                                                                                                  // 3943
 * Should be used to asynchrounously get value of property                                                           // 3944
 *                                                                                                                   // 3945
 * @method getAsync                                                                                                  // 3946
 * @param {Function}                                                                                                 // 3947
 */                                                                                                                  // 3948
Property.prototype.getAsync = function (callback) {                                                                  // 3949
    var self = this;                                                                                                 // 3950
    RequestManager.getInstance().sendAsync({                                                                         // 3951
        method: this.getter                                                                                          // 3952
    }, function (err, result) {                                                                                      // 3953
        if (err) {                                                                                                   // 3954
            return callback(err);                                                                                    // 3955
        }                                                                                                            // 3956
        callback(err, self.formatOutput(result));                                                                    // 3957
    });                                                                                                              // 3958
};                                                                                                                   // 3959
                                                                                                                     // 3960
module.exports = Property;                                                                                           // 3961
                                                                                                                     // 3962
                                                                                                                     // 3963
},{"./requestmanager":28}],27:[function(require,module,exports){                                                     // 3964
/*                                                                                                                   // 3965
    This file is part of ethereum.js.                                                                                // 3966
                                                                                                                     // 3967
    ethereum.js is free software: you can redistribute it and/or modify                                              // 3968
    it under the terms of the GNU Lesser General Public License as published by                                      // 3969
    the Free Software Foundation, either version 3 of the License, or                                                // 3970
    (at your option) any later version.                                                                              // 3971
                                                                                                                     // 3972
    ethereum.js is distributed in the hope that it will be useful,                                                   // 3973
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 3974
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 3975
    GNU Lesser General Public License for more details.                                                              // 3976
                                                                                                                     // 3977
    You should have received a copy of the GNU Lesser General Public License                                         // 3978
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 3979
*/                                                                                                                   // 3980
/** @file qtsync.js                                                                                                  // 3981
 * @authors:                                                                                                         // 3982
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 3983
 *   Marian Oancea <marian@ethdev.com>                                                                               // 3984
 * @date 2014                                                                                                        // 3985
 */                                                                                                                  // 3986
                                                                                                                     // 3987
var QtSyncProvider = function () {                                                                                   // 3988
};                                                                                                                   // 3989
                                                                                                                     // 3990
QtSyncProvider.prototype.send = function (payload) {                                                                 // 3991
    var result = navigator.qt.callMethod(JSON.stringify(payload));                                                   // 3992
    return JSON.parse(result);                                                                                       // 3993
};                                                                                                                   // 3994
                                                                                                                     // 3995
module.exports = QtSyncProvider;                                                                                     // 3996
                                                                                                                     // 3997
                                                                                                                     // 3998
},{}],28:[function(require,module,exports){                                                                          // 3999
/*                                                                                                                   // 4000
    This file is part of ethereum.js.                                                                                // 4001
                                                                                                                     // 4002
    ethereum.js is free software: you can redistribute it and/or modify                                              // 4003
    it under the terms of the GNU Lesser General Public License as published by                                      // 4004
    the Free Software Foundation, either version 3 of the License, or                                                // 4005
    (at your option) any later version.                                                                              // 4006
                                                                                                                     // 4007
    ethereum.js is distributed in the hope that it will be useful,                                                   // 4008
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 4009
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 4010
    GNU Lesser General Public License for more details.                                                              // 4011
                                                                                                                     // 4012
    You should have received a copy of the GNU Lesser General Public License                                         // 4013
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 4014
*/                                                                                                                   // 4015
/**                                                                                                                  // 4016
 * @file requestmanager.js                                                                                           // 4017
 * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                          // 4018
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 4019
 * @author Marian Oancea <marian@ethdev.com>                                                                         // 4020
 * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                   // 4021
 * @author Gav Wood <g@ethdev.com>                                                                                   // 4022
 * @date 2014                                                                                                        // 4023
 */                                                                                                                  // 4024
                                                                                                                     // 4025
var Jsonrpc = require('./jsonrpc');                                                                                  // 4026
var utils = require('../utils/utils');                                                                               // 4027
var c = require('../utils/config');                                                                                  // 4028
var errors = require('./errors');                                                                                    // 4029
                                                                                                                     // 4030
/**                                                                                                                  // 4031
 * It's responsible for passing messages to providers                                                                // 4032
 * It's also responsible for polling the ethereum node for incoming messages                                         // 4033
 * Default poll timeout is 1 second                                                                                  // 4034
 * Singleton                                                                                                         // 4035
 */                                                                                                                  // 4036
var RequestManager = function (provider) {                                                                           // 4037
    // singleton pattern                                                                                             // 4038
    if (arguments.callee._singletonInstance) {                                                                       // 4039
        return arguments.callee._singletonInstance;                                                                  // 4040
    }                                                                                                                // 4041
    arguments.callee._singletonInstance = this;                                                                      // 4042
                                                                                                                     // 4043
    this.provider = provider;                                                                                        // 4044
    this.polls = {};                                                                                                 // 4045
    this.timeout = null;                                                                                             // 4046
    this.isPolling = false;                                                                                          // 4047
};                                                                                                                   // 4048
                                                                                                                     // 4049
/**                                                                                                                  // 4050
 * @return {RequestManager} singleton                                                                                // 4051
 */                                                                                                                  // 4052
RequestManager.getInstance = function () {                                                                           // 4053
    var instance = new RequestManager();                                                                             // 4054
    return instance;                                                                                                 // 4055
};                                                                                                                   // 4056
                                                                                                                     // 4057
/**                                                                                                                  // 4058
 * Should be used to synchronously send request                                                                      // 4059
 *                                                                                                                   // 4060
 * @method send                                                                                                      // 4061
 * @param {Object} data                                                                                              // 4062
 * @return {Object}                                                                                                  // 4063
 */                                                                                                                  // 4064
RequestManager.prototype.send = function (data) {                                                                    // 4065
    if (!this.provider) {                                                                                            // 4066
        console.error(errors.InvalidProvider());                                                                     // 4067
        return null;                                                                                                 // 4068
    }                                                                                                                // 4069
                                                                                                                     // 4070
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                         // 4071
    var result = this.provider.send(payload);                                                                        // 4072
                                                                                                                     // 4073
    if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                            // 4074
        throw errors.InvalidResponse(result);                                                                        // 4075
    }                                                                                                                // 4076
                                                                                                                     // 4077
    return result.result;                                                                                            // 4078
};                                                                                                                   // 4079
                                                                                                                     // 4080
/**                                                                                                                  // 4081
 * Should be used to asynchronously send request                                                                     // 4082
 *                                                                                                                   // 4083
 * @method sendAsync                                                                                                 // 4084
 * @param {Object} data                                                                                              // 4085
 * @param {Function} callback                                                                                        // 4086
 */                                                                                                                  // 4087
RequestManager.prototype.sendAsync = function (data, callback) {                                                     // 4088
    if (!this.provider) {                                                                                            // 4089
        return callback(errors.InvalidProvider());                                                                   // 4090
    }                                                                                                                // 4091
                                                                                                                     // 4092
    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);                                         // 4093
    this.provider.sendAsync(payload, function (err, result) {                                                        // 4094
        if (err) {                                                                                                   // 4095
            return callback(err);                                                                                    // 4096
        }                                                                                                            // 4097
                                                                                                                     // 4098
        if (!Jsonrpc.getInstance().isValidResponse(result)) {                                                        // 4099
            return callback(errors.InvalidResponse(result));                                                         // 4100
        }                                                                                                            // 4101
                                                                                                                     // 4102
        callback(null, result.result);                                                                               // 4103
    });                                                                                                              // 4104
};                                                                                                                   // 4105
                                                                                                                     // 4106
/**                                                                                                                  // 4107
 * Should be called to asynchronously send batch request                                                             // 4108
 *                                                                                                                   // 4109
 * @method sendBatch                                                                                                 // 4110
 * @param {Array} batch data                                                                                         // 4111
 * @param {Function} callback                                                                                        // 4112
 */                                                                                                                  // 4113
RequestManager.prototype.sendBatch = function (data, callback) {                                                     // 4114
    if (!this.provider) {                                                                                            // 4115
        return callback(errors.InvalidProvider());                                                                   // 4116
    }                                                                                                                // 4117
                                                                                                                     // 4118
    var payload = Jsonrpc.getInstance().toBatchPayload(data);                                                        // 4119
                                                                                                                     // 4120
    this.provider.sendAsync(payload, function (err, results) {                                                       // 4121
        if (err) {                                                                                                   // 4122
            return callback(err);                                                                                    // 4123
        }                                                                                                            // 4124
                                                                                                                     // 4125
        if (!utils.isArray(results)) {                                                                               // 4126
            return callback(errors.InvalidResponse(results));                                                        // 4127
        }                                                                                                            // 4128
                                                                                                                     // 4129
        callback(err, results);                                                                                      // 4130
    });                                                                                                              // 4131
};                                                                                                                   // 4132
                                                                                                                     // 4133
/**                                                                                                                  // 4134
 * Should be used to set provider of request manager                                                                 // 4135
 *                                                                                                                   // 4136
 * @method setProvider                                                                                               // 4137
 * @param {Object}                                                                                                   // 4138
 */                                                                                                                  // 4139
RequestManager.prototype.setProvider = function (p) {                                                                // 4140
    this.provider = p;                                                                                               // 4141
                                                                                                                     // 4142
    if (this.provider && !this.isPolling) {                                                                          // 4143
        this.poll();                                                                                                 // 4144
        this.isPolling = true;                                                                                       // 4145
    }                                                                                                                // 4146
};                                                                                                                   // 4147
                                                                                                                     // 4148
/*jshint maxparams:4 */                                                                                              // 4149
                                                                                                                     // 4150
/**                                                                                                                  // 4151
 * Should be used to start polling                                                                                   // 4152
 *                                                                                                                   // 4153
 * @method startPolling                                                                                              // 4154
 * @param {Object} data                                                                                              // 4155
 * @param {Number} pollId                                                                                            // 4156
 * @param {Function} callback                                                                                        // 4157
 * @param {Function} uninstall                                                                                       // 4158
 *                                                                                                                   // 4159
 * @todo cleanup number of params                                                                                    // 4160
 */                                                                                                                  // 4161
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                               // 4162
    this.polls['poll_'+ pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                // 4163
};                                                                                                                   // 4164
/*jshint maxparams:3 */                                                                                              // 4165
                                                                                                                     // 4166
/**                                                                                                                  // 4167
 * Should be used to stop polling for filter with given id                                                           // 4168
 *                                                                                                                   // 4169
 * @method stopPolling                                                                                               // 4170
 * @param {Number} pollId                                                                                            // 4171
 */                                                                                                                  // 4172
RequestManager.prototype.stopPolling = function (pollId) {                                                           // 4173
    delete this.polls['poll_'+ pollId];                                                                              // 4174
};                                                                                                                   // 4175
                                                                                                                     // 4176
/**                                                                                                                  // 4177
 * Should be called to reset the polling mechanism of the request manager                                            // 4178
 *                                                                                                                   // 4179
 * @method reset                                                                                                     // 4180
 */                                                                                                                  // 4181
RequestManager.prototype.reset = function () {                                                                       // 4182
    for (var key in this.polls) {                                                                                    // 4183
        this.polls[key].uninstall();                                                                                 // 4184
    }                                                                                                                // 4185
    this.polls = {};                                                                                                 // 4186
                                                                                                                     // 4187
    if (this.timeout) {                                                                                              // 4188
        clearTimeout(this.timeout);                                                                                  // 4189
        this.timeout = null;                                                                                         // 4190
    }                                                                                                                // 4191
    this.poll();                                                                                                     // 4192
};                                                                                                                   // 4193
                                                                                                                     // 4194
/**                                                                                                                  // 4195
 * Should be called to poll for changes on filter with given id                                                      // 4196
 *                                                                                                                   // 4197
 * @method poll                                                                                                      // 4198
 */                                                                                                                  // 4199
RequestManager.prototype.poll = function () {                                                                        // 4200
    /*jshint maxcomplexity: 6 */                                                                                     // 4201
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                          // 4202
                                                                                                                     // 4203
    if (Object.keys(this.polls).length === 0) {                                                                      // 4204
        return;                                                                                                      // 4205
    }                                                                                                                // 4206
                                                                                                                     // 4207
    if (!this.provider) {                                                                                            // 4208
        console.error(errors.InvalidProvider());                                                                     // 4209
        return;                                                                                                      // 4210
    }                                                                                                                // 4211
                                                                                                                     // 4212
    var pollsData = [];                                                                                              // 4213
    var pollsKeys = [];                                                                                              // 4214
    for (var key in this.polls) {                                                                                    // 4215
        pollsData.push(this.polls[key].data);                                                                        // 4216
        pollsKeys.push(key);                                                                                         // 4217
    }                                                                                                                // 4218
                                                                                                                     // 4219
    if (pollsData.length === 0) {                                                                                    // 4220
        return;                                                                                                      // 4221
    }                                                                                                                // 4222
                                                                                                                     // 4223
    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);                                                   // 4224
                                                                                                                     // 4225
    var self = this;                                                                                                 // 4226
    this.provider.sendAsync(payload, function (error, results) {                                                     // 4227
        // TODO: console log?                                                                                        // 4228
        if (error) {                                                                                                 // 4229
            return;                                                                                                  // 4230
        }                                                                                                            // 4231
                                                                                                                     // 4232
        if (!utils.isArray(results)) {                                                                               // 4233
            throw errors.InvalidResponse(results);                                                                   // 4234
        }                                                                                                            // 4235
                                                                                                                     // 4236
        results.map(function (result, index) {                                                                       // 4237
            var key = pollsKeys[index];                                                                              // 4238
            // make sure the filter is still installed after arrival of the request                                  // 4239
            if (self.polls[key]) {                                                                                   // 4240
                result.callback = self.polls[key].callback;                                                          // 4241
                return result;                                                                                       // 4242
            } else                                                                                                   // 4243
                return false;                                                                                        // 4244
        }).filter(function (result) {                                                                                // 4245
            return !!result;                                                                                         // 4246
        }).filter(function (result) {                                                                                // 4247
            var valid = Jsonrpc.getInstance().isValidResponse(result);                                               // 4248
            if (!valid) {                                                                                            // 4249
                result.callback(errors.InvalidResponse(result));                                                     // 4250
            }                                                                                                        // 4251
            return valid;                                                                                            // 4252
        }).filter(function (result) {                                                                                // 4253
            return utils.isArray(result.result) && result.result.length > 0;                                         // 4254
        }).forEach(function (result) {                                                                               // 4255
            result.callback(null, result.result);                                                                    // 4256
        });                                                                                                          // 4257
    });                                                                                                              // 4258
};                                                                                                                   // 4259
                                                                                                                     // 4260
module.exports = RequestManager;                                                                                     // 4261
                                                                                                                     // 4262
                                                                                                                     // 4263
},{"../utils/config":5,"../utils/utils":7,"./errors":14,"./jsonrpc":22}],29:[function(require,module,exports){       // 4264
/*                                                                                                                   // 4265
    This file is part of ethereum.js.                                                                                // 4266
                                                                                                                     // 4267
    ethereum.js is free software: you can redistribute it and/or modify                                              // 4268
    it under the terms of the GNU Lesser General Public License as published by                                      // 4269
    the Free Software Foundation, either version 3 of the License, or                                                // 4270
    (at your option) any later version.                                                                              // 4271
                                                                                                                     // 4272
    ethereum.js is distributed in the hope that it will be useful,                                                   // 4273
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 4274
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 4275
    GNU Lesser General Public License for more details.                                                              // 4276
                                                                                                                     // 4277
    You should have received a copy of the GNU Lesser General Public License                                         // 4278
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 4279
*/                                                                                                                   // 4280
/** @file shh.js                                                                                                     // 4281
 * @authors:                                                                                                         // 4282
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 4283
 * @date 2015                                                                                                        // 4284
 */                                                                                                                  // 4285
                                                                                                                     // 4286
var Method = require('./method');                                                                                    // 4287
var formatters = require('./formatters');                                                                            // 4288
                                                                                                                     // 4289
var post = new Method({                                                                                              // 4290
    name: 'post',                                                                                                    // 4291
    call: 'shh_post',                                                                                                // 4292
    params: 1,                                                                                                       // 4293
    inputFormatter: [formatters.inputPostFormatter]                                                                  // 4294
});                                                                                                                  // 4295
                                                                                                                     // 4296
var newIdentity = new Method({                                                                                       // 4297
    name: 'newIdentity',                                                                                             // 4298
    call: 'shh_newIdentity',                                                                                         // 4299
    params: 0                                                                                                        // 4300
});                                                                                                                  // 4301
                                                                                                                     // 4302
var hasIdentity = new Method({                                                                                       // 4303
    name: 'hasIdentity',                                                                                             // 4304
    call: 'shh_hasIdentity',                                                                                         // 4305
    params: 1                                                                                                        // 4306
});                                                                                                                  // 4307
                                                                                                                     // 4308
var newGroup = new Method({                                                                                          // 4309
    name: 'newGroup',                                                                                                // 4310
    call: 'shh_newGroup',                                                                                            // 4311
    params: 0                                                                                                        // 4312
});                                                                                                                  // 4313
                                                                                                                     // 4314
var addToGroup = new Method({                                                                                        // 4315
    name: 'addToGroup',                                                                                              // 4316
    call: 'shh_addToGroup',                                                                                          // 4317
    params: 0                                                                                                        // 4318
});                                                                                                                  // 4319
                                                                                                                     // 4320
var methods = [                                                                                                      // 4321
    post,                                                                                                            // 4322
    newIdentity,                                                                                                     // 4323
    hasIdentity,                                                                                                     // 4324
    newGroup,                                                                                                        // 4325
    addToGroup                                                                                                       // 4326
];                                                                                                                   // 4327
                                                                                                                     // 4328
module.exports = {                                                                                                   // 4329
    methods: methods                                                                                                 // 4330
};                                                                                                                   // 4331
                                                                                                                     // 4332
                                                                                                                     // 4333
},{"./formatters":18,"./method":23}],30:[function(require,module,exports){                                           // 4334
/*                                                                                                                   // 4335
    This file is part of ethereum.js.                                                                                // 4336
                                                                                                                     // 4337
    ethereum.js is free software: you can redistribute it and/or modify                                              // 4338
    it under the terms of the GNU Lesser General Public License as published by                                      // 4339
    the Free Software Foundation, either version 3 of the License, or                                                // 4340
    (at your option) any later version.                                                                              // 4341
                                                                                                                     // 4342
    ethereum.js is distributed in the hope that it will be useful,                                                   // 4343
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 4344
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 4345
    GNU Lesser General Public License for more details.                                                              // 4346
                                                                                                                     // 4347
    You should have received a copy of the GNU Lesser General Public License                                         // 4348
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 4349
*/                                                                                                                   // 4350
/**                                                                                                                  // 4351
 * @file transfer.js                                                                                                 // 4352
 * @author Marek Kotewicz <marek@ethdev.com>                                                                         // 4353
 * @date 2015                                                                                                        // 4354
 */                                                                                                                  // 4355
                                                                                                                     // 4356
var web3 = require('../web3');                                                                                       // 4357
var ICAP = require('./icap');                                                                                        // 4358
var namereg = require('./namereg');                                                                                  // 4359
var contract = require('./contract');                                                                                // 4360
                                                                                                                     // 4361
/**                                                                                                                  // 4362
 * Should be used to make ICAP transfer                                                                              // 4363
 *                                                                                                                   // 4364
 * @method transfer                                                                                                  // 4365
 * @param {String} iban number                                                                                       // 4366
 * @param {String} from (address)                                                                                    // 4367
 * @param {Value} value to be tranfered                                                                              // 4368
 * @param {Function} callback, callback                                                                              // 4369
 */                                                                                                                  // 4370
var transfer = function (from, iban, value, callback) {                                                              // 4371
    var icap = new ICAP(iban);                                                                                       // 4372
    if (!icap.isValid()) {                                                                                           // 4373
        throw new Error('invalid iban address');                                                                     // 4374
    }                                                                                                                // 4375
                                                                                                                     // 4376
    if (icap.isDirect()) {                                                                                           // 4377
        return transferToAddress(from, icap.address(), value, callback);                                             // 4378
    }                                                                                                                // 4379
                                                                                                                     // 4380
    if (!callback) {                                                                                                 // 4381
        var address = namereg.addr(icap.institution());                                                              // 4382
        return deposit(from, address, value, icap.client());                                                         // 4383
    }                                                                                                                // 4384
                                                                                                                     // 4385
    namereg.addr(icap.insitution(), function (err, address) {                                                        // 4386
        return deposit(from, address, value, icap.client(), callback);                                               // 4387
    });                                                                                                              // 4388
                                                                                                                     // 4389
};                                                                                                                   // 4390
                                                                                                                     // 4391
/**                                                                                                                  // 4392
 * Should be used to transfer funds to certain address                                                               // 4393
 *                                                                                                                   // 4394
 * @method transferToAddress                                                                                         // 4395
 * @param {String} address                                                                                           // 4396
 * @param {String} from (address)                                                                                    // 4397
 * @param {Value} value to be tranfered                                                                              // 4398
 * @param {Function} callback, callback                                                                              // 4399
 */                                                                                                                  // 4400
var transferToAddress = function (from, address, value, callback) {                                                  // 4401
    return web3.eth.sendTransaction({                                                                                // 4402
        address: address,                                                                                            // 4403
        from: from,                                                                                                  // 4404
        value: value                                                                                                 // 4405
    }, callback);                                                                                                    // 4406
};                                                                                                                   // 4407
                                                                                                                     // 4408
/**                                                                                                                  // 4409
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)            // 4410
 *                                                                                                                   // 4411
 * @method deposit                                                                                                   // 4412
 * @param {String} address                                                                                           // 4413
 * @param {String} from (address)                                                                                    // 4414
 * @param {Value} value to be tranfered                                                                              // 4415
 * @param {String} client unique identifier                                                                          // 4416
 * @param {Function} callback, callback                                                                              // 4417
 */                                                                                                                  // 4418
var deposit = function (from, address, value, client, callback) {                                                    // 4419
    var abi = [{"constant":false,"inputs":[{"name":"name","type":"bytes32"}],"name":"deposit","outputs":[],"type":"function"}];
    return contract(abi).at(address).deposit(client, {                                                               // 4421
        from: from,                                                                                                  // 4422
        value: value                                                                                                 // 4423
    }, callback);                                                                                                    // 4424
};                                                                                                                   // 4425
                                                                                                                     // 4426
module.exports = transfer;                                                                                           // 4427
                                                                                                                     // 4428
                                                                                                                     // 4429
},{"../web3":9,"./contract":12,"./icap":21,"./namereg":24}],31:[function(require,module,exports){                    // 4430
/*                                                                                                                   // 4431
    This file is part of ethereum.js.                                                                                // 4432
                                                                                                                     // 4433
    ethereum.js is free software: you can redistribute it and/or modify                                              // 4434
    it under the terms of the GNU Lesser General Public License as published by                                      // 4435
    the Free Software Foundation, either version 3 of the License, or                                                // 4436
    (at your option) any later version.                                                                              // 4437
                                                                                                                     // 4438
    ethereum.js is distributed in the hope that it will be useful,                                                   // 4439
    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                   // 4440
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                    // 4441
    GNU Lesser General Public License for more details.                                                              // 4442
                                                                                                                     // 4443
    You should have received a copy of the GNU Lesser General Public License                                         // 4444
    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.                                             // 4445
*/                                                                                                                   // 4446
/** @file watches.js                                                                                                 // 4447
 * @authors:                                                                                                         // 4448
 *   Marek Kotewicz <marek@ethdev.com>                                                                               // 4449
 * @date 2015                                                                                                        // 4450
 */                                                                                                                  // 4451
                                                                                                                     // 4452
var Method = require('./method');                                                                                    // 4453
                                                                                                                     // 4454
/// @returns an array of objects describing web3.eth.filter api methods                                              // 4455
var eth = function () {                                                                                              // 4456
    var newFilterCall = function (args) {                                                                            // 4457
        var type = args[0];                                                                                          // 4458
                                                                                                                     // 4459
        switch(type) {                                                                                               // 4460
            case 'latest':                                                                                           // 4461
                args.shift();                                                                                        // 4462
                this.params = 0;                                                                                     // 4463
                return 'eth_newBlockFilter';                                                                         // 4464
            case 'pending':                                                                                          // 4465
                args.shift();                                                                                        // 4466
                this.params = 0;                                                                                     // 4467
                return 'eth_newPendingTransactionFilter';                                                            // 4468
            default:                                                                                                 // 4469
                return 'eth_newFilter';                                                                              // 4470
        }                                                                                                            // 4471
    };                                                                                                               // 4472
                                                                                                                     // 4473
    var newFilter = new Method({                                                                                     // 4474
        name: 'newFilter',                                                                                           // 4475
        call: newFilterCall,                                                                                         // 4476
        params: 1                                                                                                    // 4477
    });                                                                                                              // 4478
                                                                                                                     // 4479
    var uninstallFilter = new Method({                                                                               // 4480
        name: 'uninstallFilter',                                                                                     // 4481
        call: 'eth_uninstallFilter',                                                                                 // 4482
        params: 1                                                                                                    // 4483
    });                                                                                                              // 4484
                                                                                                                     // 4485
    var getLogs = new Method({                                                                                       // 4486
        name: 'getLogs',                                                                                             // 4487
        call: 'eth_getFilterLogs',                                                                                   // 4488
        params: 1                                                                                                    // 4489
    });                                                                                                              // 4490
                                                                                                                     // 4491
    var poll = new Method({                                                                                          // 4492
        name: 'poll',                                                                                                // 4493
        call: 'eth_getFilterChanges',                                                                                // 4494
        params: 1                                                                                                    // 4495
    });                                                                                                              // 4496
                                                                                                                     // 4497
    return [                                                                                                         // 4498
        newFilter,                                                                                                   // 4499
        uninstallFilter,                                                                                             // 4500
        getLogs,                                                                                                     // 4501
        poll                                                                                                         // 4502
    ];                                                                                                               // 4503
};                                                                                                                   // 4504
                                                                                                                     // 4505
/// @returns an array of objects describing web3.shh.watch api methods                                               // 4506
var shh = function () {                                                                                              // 4507
    var newFilter = new Method({                                                                                     // 4508
        name: 'newFilter',                                                                                           // 4509
        call: 'shh_newFilter',                                                                                       // 4510
        params: 1                                                                                                    // 4511
    });                                                                                                              // 4512
                                                                                                                     // 4513
    var uninstallFilter = new Method({                                                                               // 4514
        name: 'uninstallFilter',                                                                                     // 4515
        call: 'shh_uninstallFilter',                                                                                 // 4516
        params: 1                                                                                                    // 4517
    });                                                                                                              // 4518
                                                                                                                     // 4519
    var getLogs = new Method({                                                                                       // 4520
        name: 'getLogs',                                                                                             // 4521
        call: 'shh_getMessages',                                                                                     // 4522
        params: 1                                                                                                    // 4523
    });                                                                                                              // 4524
                                                                                                                     // 4525
    var poll = new Method({                                                                                          // 4526
        name: 'poll',                                                                                                // 4527
        call: 'shh_getFilterChanges',                                                                                // 4528
        params: 1                                                                                                    // 4529
    });                                                                                                              // 4530
                                                                                                                     // 4531
    return [                                                                                                         // 4532
        newFilter,                                                                                                   // 4533
        uninstallFilter,                                                                                             // 4534
        getLogs,                                                                                                     // 4535
        poll                                                                                                         // 4536
    ];                                                                                                               // 4537
};                                                                                                                   // 4538
                                                                                                                     // 4539
module.exports = {                                                                                                   // 4540
    eth: eth,                                                                                                        // 4541
    shh: shh                                                                                                         // 4542
};                                                                                                                   // 4543
                                                                                                                     // 4544
                                                                                                                     // 4545
},{"./method":23}],32:[function(require,module,exports){                                                             // 4546
                                                                                                                     // 4547
},{}],33:[function(require,module,exports){                                                                          // 4548
;(function (root, factory) {                                                                                         // 4549
	if (typeof exports === "object") {                                                                                  // 4550
		// CommonJS                                                                                                        // 4551
		module.exports = exports = factory();                                                                              // 4552
	}                                                                                                                   // 4553
	else if (typeof define === "function" && define.amd) {                                                              // 4554
		// AMD                                                                                                             // 4555
		define([], factory);                                                                                               // 4556
	}                                                                                                                   // 4557
	else {                                                                                                              // 4558
		// Global (browser)                                                                                                // 4559
		root.CryptoJS = factory();                                                                                         // 4560
	}                                                                                                                   // 4561
}(this, function () {                                                                                                // 4562
                                                                                                                     // 4563
	/**                                                                                                                 // 4564
	 * CryptoJS core components.                                                                                        // 4565
	 */                                                                                                                 // 4566
	var CryptoJS = CryptoJS || (function (Math, undefined) {                                                            // 4567
	    /**                                                                                                             // 4568
	     * CryptoJS namespace.                                                                                          // 4569
	     */                                                                                                             // 4570
	    var C = {};                                                                                                     // 4571
                                                                                                                     // 4572
	    /**                                                                                                             // 4573
	     * Library namespace.                                                                                           // 4574
	     */                                                                                                             // 4575
	    var C_lib = C.lib = {};                                                                                         // 4576
                                                                                                                     // 4577
	    /**                                                                                                             // 4578
	     * Base object for prototypal inheritance.                                                                      // 4579
	     */                                                                                                             // 4580
	    var Base = C_lib.Base = (function () {                                                                          // 4581
	        function F() {}                                                                                             // 4582
                                                                                                                     // 4583
	        return {                                                                                                    // 4584
	            /**                                                                                                     // 4585
	             * Creates a new object that inherits from this object.                                                 // 4586
	             *                                                                                                      // 4587
	             * @param {Object} overrides Properties to copy into the new object.                                    // 4588
	             *                                                                                                      // 4589
	             * @return {Object} The new object.                                                                     // 4590
	             *                                                                                                      // 4591
	             * @static                                                                                              // 4592
	             *                                                                                                      // 4593
	             * @example                                                                                             // 4594
	             *                                                                                                      // 4595
	             *     var MyType = CryptoJS.lib.Base.extend({                                                          // 4596
	             *         field: 'value',                                                                              // 4597
	             *                                                                                                      // 4598
	             *         method: function () {                                                                        // 4599
	             *         }                                                                                            // 4600
	             *     });                                                                                              // 4601
	             */                                                                                                     // 4602
	            extend: function (overrides) {                                                                          // 4603
	                // Spawn                                                                                            // 4604
	                F.prototype = this;                                                                                 // 4605
	                var subtype = new F();                                                                              // 4606
                                                                                                                     // 4607
	                // Augment                                                                                          // 4608
	                if (overrides) {                                                                                    // 4609
	                    subtype.mixIn(overrides);                                                                       // 4610
	                }                                                                                                   // 4611
                                                                                                                     // 4612
	                // Create default initializer                                                                       // 4613
	                if (!subtype.hasOwnProperty('init')) {                                                              // 4614
	                    subtype.init = function () {                                                                    // 4615
	                        subtype.$super.init.apply(this, arguments);                                                 // 4616
	                    };                                                                                              // 4617
	                }                                                                                                   // 4618
                                                                                                                     // 4619
	                // Initializer's prototype is the subtype object                                                    // 4620
	                subtype.init.prototype = subtype;                                                                   // 4621
                                                                                                                     // 4622
	                // Reference supertype                                                                              // 4623
	                subtype.$super = this;                                                                              // 4624
                                                                                                                     // 4625
	                return subtype;                                                                                     // 4626
	            },                                                                                                      // 4627
                                                                                                                     // 4628
	            /**                                                                                                     // 4629
	             * Extends this object and runs the init method.                                                        // 4630
	             * Arguments to create() will be passed to init().                                                      // 4631
	             *                                                                                                      // 4632
	             * @return {Object} The new object.                                                                     // 4633
	             *                                                                                                      // 4634
	             * @static                                                                                              // 4635
	             *                                                                                                      // 4636
	             * @example                                                                                             // 4637
	             *                                                                                                      // 4638
	             *     var instance = MyType.create();                                                                  // 4639
	             */                                                                                                     // 4640
	            create: function () {                                                                                   // 4641
	                var instance = this.extend();                                                                       // 4642
	                instance.init.apply(instance, arguments);                                                           // 4643
                                                                                                                     // 4644
	                return instance;                                                                                    // 4645
	            },                                                                                                      // 4646
                                                                                                                     // 4647
	            /**                                                                                                     // 4648
	             * Initializes a newly created object.                                                                  // 4649
	             * Override this method to add some logic when your objects are created.                                // 4650
	             *                                                                                                      // 4651
	             * @example                                                                                             // 4652
	             *                                                                                                      // 4653
	             *     var MyType = CryptoJS.lib.Base.extend({                                                          // 4654
	             *         init: function () {                                                                          // 4655
	             *             // ...                                                                                   // 4656
	             *         }                                                                                            // 4657
	             *     });                                                                                              // 4658
	             */                                                                                                     // 4659
	            init: function () {                                                                                     // 4660
	            },                                                                                                      // 4661
                                                                                                                     // 4662
	            /**                                                                                                     // 4663
	             * Copies properties into this object.                                                                  // 4664
	             *                                                                                                      // 4665
	             * @param {Object} properties The properties to mix in.                                                 // 4666
	             *                                                                                                      // 4667
	             * @example                                                                                             // 4668
	             *                                                                                                      // 4669
	             *     MyType.mixIn({                                                                                   // 4670
	             *         field: 'value'                                                                               // 4671
	             *     });                                                                                              // 4672
	             */                                                                                                     // 4673
	            mixIn: function (properties) {                                                                          // 4674
	                for (var propertyName in properties) {                                                              // 4675
	                    if (properties.hasOwnProperty(propertyName)) {                                                  // 4676
	                        this[propertyName] = properties[propertyName];                                              // 4677
	                    }                                                                                               // 4678
	                }                                                                                                   // 4679
                                                                                                                     // 4680
	                // IE won't copy toString using the loop above                                                      // 4681
	                if (properties.hasOwnProperty('toString')) {                                                        // 4682
	                    this.toString = properties.toString;                                                            // 4683
	                }                                                                                                   // 4684
	            },                                                                                                      // 4685
                                                                                                                     // 4686
	            /**                                                                                                     // 4687
	             * Creates a copy of this object.                                                                       // 4688
	             *                                                                                                      // 4689
	             * @return {Object} The clone.                                                                          // 4690
	             *                                                                                                      // 4691
	             * @example                                                                                             // 4692
	             *                                                                                                      // 4693
	             *     var clone = instance.clone();                                                                    // 4694
	             */                                                                                                     // 4695
	            clone: function () {                                                                                    // 4696
	                return this.init.prototype.extend(this);                                                            // 4697
	            }                                                                                                       // 4698
	        };                                                                                                          // 4699
	    }());                                                                                                           // 4700
                                                                                                                     // 4701
	    /**                                                                                                             // 4702
	     * An array of 32-bit words.                                                                                    // 4703
	     *                                                                                                              // 4704
	     * @property {Array} words The array of 32-bit words.                                                           // 4705
	     * @property {number} sigBytes The number of significant bytes in this word array.                              // 4706
	     */                                                                                                             // 4707
	    var WordArray = C_lib.WordArray = Base.extend({                                                                 // 4708
	        /**                                                                                                         // 4709
	         * Initializes a newly created word array.                                                                  // 4710
	         *                                                                                                          // 4711
	         * @param {Array} words (Optional) An array of 32-bit words.                                                // 4712
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                        // 4713
	         *                                                                                                          // 4714
	         * @example                                                                                                 // 4715
	         *                                                                                                          // 4716
	         *     var wordArray = CryptoJS.lib.WordArray.create();                                                     // 4717
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                             // 4718
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                          // 4719
	         */                                                                                                         // 4720
	        init: function (words, sigBytes) {                                                                          // 4721
	            words = this.words = words || [];                                                                       // 4722
                                                                                                                     // 4723
	            if (sigBytes != undefined) {                                                                            // 4724
	                this.sigBytes = sigBytes;                                                                           // 4725
	            } else {                                                                                                // 4726
	                this.sigBytes = words.length * 4;                                                                   // 4727
	            }                                                                                                       // 4728
	        },                                                                                                          // 4729
                                                                                                                     // 4730
	        /**                                                                                                         // 4731
	         * Converts this word array to a string.                                                                    // 4732
	         *                                                                                                          // 4733
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex              // 4734
	         *                                                                                                          // 4735
	         * @return {string} The stringified word array.                                                             // 4736
	         *                                                                                                          // 4737
	         * @example                                                                                                 // 4738
	         *                                                                                                          // 4739
	         *     var string = wordArray + '';                                                                         // 4740
	         *     var string = wordArray.toString();                                                                   // 4741
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                  // 4742
	         */                                                                                                         // 4743
	        toString: function (encoder) {                                                                              // 4744
	            return (encoder || Hex).stringify(this);                                                                // 4745
	        },                                                                                                          // 4746
                                                                                                                     // 4747
	        /**                                                                                                         // 4748
	         * Concatenates a word array to this word array.                                                            // 4749
	         *                                                                                                          // 4750
	         * @param {WordArray} wordArray The word array to append.                                                   // 4751
	         *                                                                                                          // 4752
	         * @return {WordArray} This word array.                                                                     // 4753
	         *                                                                                                          // 4754
	         * @example                                                                                                 // 4755
	         *                                                                                                          // 4756
	         *     wordArray1.concat(wordArray2);                                                                       // 4757
	         */                                                                                                         // 4758
	        concat: function (wordArray) {                                                                              // 4759
	            // Shortcuts                                                                                            // 4760
	            var thisWords = this.words;                                                                             // 4761
	            var thatWords = wordArray.words;                                                                        // 4762
	            var thisSigBytes = this.sigBytes;                                                                       // 4763
	            var thatSigBytes = wordArray.sigBytes;                                                                  // 4764
                                                                                                                     // 4765
	            // Clamp excess bits                                                                                    // 4766
	            this.clamp();                                                                                           // 4767
                                                                                                                     // 4768
	            // Concat                                                                                               // 4769
	            if (thisSigBytes % 4) {                                                                                 // 4770
	                // Copy one byte at a time                                                                          // 4771
	                for (var i = 0; i < thatSigBytes; i++) {                                                            // 4772
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                              // 4773
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);         // 4774
	                }                                                                                                   // 4775
	            } else {                                                                                                // 4776
	                // Copy one word at a time                                                                          // 4777
	                for (var i = 0; i < thatSigBytes; i += 4) {                                                         // 4778
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                       // 4779
	                }                                                                                                   // 4780
	            }                                                                                                       // 4781
	            this.sigBytes += thatSigBytes;                                                                          // 4782
                                                                                                                     // 4783
	            // Chainable                                                                                            // 4784
	            return this;                                                                                            // 4785
	        },                                                                                                          // 4786
                                                                                                                     // 4787
	        /**                                                                                                         // 4788
	         * Removes insignificant bits.                                                                              // 4789
	         *                                                                                                          // 4790
	         * @example                                                                                                 // 4791
	         *                                                                                                          // 4792
	         *     wordArray.clamp();                                                                                   // 4793
	         */                                                                                                         // 4794
	        clamp: function () {                                                                                        // 4795
	            // Shortcuts                                                                                            // 4796
	            var words = this.words;                                                                                 // 4797
	            var sigBytes = this.sigBytes;                                                                           // 4798
                                                                                                                     // 4799
	            // Clamp                                                                                                // 4800
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                       // 4801
	            words.length = Math.ceil(sigBytes / 4);                                                                 // 4802
	        },                                                                                                          // 4803
                                                                                                                     // 4804
	        /**                                                                                                         // 4805
	         * Creates a copy of this word array.                                                                       // 4806
	         *                                                                                                          // 4807
	         * @return {WordArray} The clone.                                                                           // 4808
	         *                                                                                                          // 4809
	         * @example                                                                                                 // 4810
	         *                                                                                                          // 4811
	         *     var clone = wordArray.clone();                                                                       // 4812
	         */                                                                                                         // 4813
	        clone: function () {                                                                                        // 4814
	            var clone = Base.clone.call(this);                                                                      // 4815
	            clone.words = this.words.slice(0);                                                                      // 4816
                                                                                                                     // 4817
	            return clone;                                                                                           // 4818
	        },                                                                                                          // 4819
                                                                                                                     // 4820
	        /**                                                                                                         // 4821
	         * Creates a word array filled with random bytes.                                                           // 4822
	         *                                                                                                          // 4823
	         * @param {number} nBytes The number of random bytes to generate.                                           // 4824
	         *                                                                                                          // 4825
	         * @return {WordArray} The random word array.                                                               // 4826
	         *                                                                                                          // 4827
	         * @static                                                                                                  // 4828
	         *                                                                                                          // 4829
	         * @example                                                                                                 // 4830
	         *                                                                                                          // 4831
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                   // 4832
	         */                                                                                                         // 4833
	        random: function (nBytes) {                                                                                 // 4834
	            var words = [];                                                                                         // 4835
                                                                                                                     // 4836
	            var r = (function (m_w) {                                                                               // 4837
	                var m_w = m_w;                                                                                      // 4838
	                var m_z = 0x3ade68b1;                                                                               // 4839
	                var mask = 0xffffffff;                                                                              // 4840
                                                                                                                     // 4841
	                return function () {                                                                                // 4842
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                         // 4843
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                         // 4844
	                    var result = ((m_z << 0x10) + m_w) & mask;                                                      // 4845
	                    result /= 0x100000000;                                                                          // 4846
	                    result += 0.5;                                                                                  // 4847
	                    return result * (Math.random() > .5 ? 1 : -1);                                                  // 4848
	                }                                                                                                   // 4849
	            });                                                                                                     // 4850
                                                                                                                     // 4851
	            for (var i = 0, rcache; i < nBytes; i += 4) {                                                           // 4852
	                var _r = r((rcache || Math.random()) * 0x100000000);                                                // 4853
                                                                                                                     // 4854
	                rcache = _r() * 0x3ade67b7;                                                                         // 4855
	                words.push((_r() * 0x100000000) | 0);                                                               // 4856
	            }                                                                                                       // 4857
                                                                                                                     // 4858
	            return new WordArray.init(words, nBytes);                                                               // 4859
	        }                                                                                                           // 4860
	    });                                                                                                             // 4861
                                                                                                                     // 4862
	    /**                                                                                                             // 4863
	     * Encoder namespace.                                                                                           // 4864
	     */                                                                                                             // 4865
	    var C_enc = C.enc = {};                                                                                         // 4866
                                                                                                                     // 4867
	    /**                                                                                                             // 4868
	     * Hex encoding strategy.                                                                                       // 4869
	     */                                                                                                             // 4870
	    var Hex = C_enc.Hex = {                                                                                         // 4871
	        /**                                                                                                         // 4872
	         * Converts a word array to a hex string.                                                                   // 4873
	         *                                                                                                          // 4874
	         * @param {WordArray} wordArray The word array.                                                             // 4875
	         *                                                                                                          // 4876
	         * @return {string} The hex string.                                                                         // 4877
	         *                                                                                                          // 4878
	         * @static                                                                                                  // 4879
	         *                                                                                                          // 4880
	         * @example                                                                                                 // 4881
	         *                                                                                                          // 4882
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                               // 4883
	         */                                                                                                         // 4884
	        stringify: function (wordArray) {                                                                           // 4885
	            // Shortcuts                                                                                            // 4886
	            var words = wordArray.words;                                                                            // 4887
	            var sigBytes = wordArray.sigBytes;                                                                      // 4888
                                                                                                                     // 4889
	            // Convert                                                                                              // 4890
	            var hexChars = [];                                                                                      // 4891
	            for (var i = 0; i < sigBytes; i++) {                                                                    // 4892
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                          // 4893
	                hexChars.push((bite >>> 4).toString(16));                                                           // 4894
	                hexChars.push((bite & 0x0f).toString(16));                                                          // 4895
	            }                                                                                                       // 4896
                                                                                                                     // 4897
	            return hexChars.join('');                                                                               // 4898
	        },                                                                                                          // 4899
                                                                                                                     // 4900
	        /**                                                                                                         // 4901
	         * Converts a hex string to a word array.                                                                   // 4902
	         *                                                                                                          // 4903
	         * @param {string} hexStr The hex string.                                                                   // 4904
	         *                                                                                                          // 4905
	         * @return {WordArray} The word array.                                                                      // 4906
	         *                                                                                                          // 4907
	         * @static                                                                                                  // 4908
	         *                                                                                                          // 4909
	         * @example                                                                                                 // 4910
	         *                                                                                                          // 4911
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                   // 4912
	         */                                                                                                         // 4913
	        parse: function (hexStr) {                                                                                  // 4914
	            // Shortcut                                                                                             // 4915
	            var hexStrLength = hexStr.length;                                                                       // 4916
                                                                                                                     // 4917
	            // Convert                                                                                              // 4918
	            var words = [];                                                                                         // 4919
	            for (var i = 0; i < hexStrLength; i += 2) {                                                             // 4920
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                          // 4921
	            }                                                                                                       // 4922
                                                                                                                     // 4923
	            return new WordArray.init(words, hexStrLength / 2);                                                     // 4924
	        }                                                                                                           // 4925
	    };                                                                                                              // 4926
                                                                                                                     // 4927
	    /**                                                                                                             // 4928
	     * Latin1 encoding strategy.                                                                                    // 4929
	     */                                                                                                             // 4930
	    var Latin1 = C_enc.Latin1 = {                                                                                   // 4931
	        /**                                                                                                         // 4932
	         * Converts a word array to a Latin1 string.                                                                // 4933
	         *                                                                                                          // 4934
	         * @param {WordArray} wordArray The word array.                                                             // 4935
	         *                                                                                                          // 4936
	         * @return {string} The Latin1 string.                                                                      // 4937
	         *                                                                                                          // 4938
	         * @static                                                                                                  // 4939
	         *                                                                                                          // 4940
	         * @example                                                                                                 // 4941
	         *                                                                                                          // 4942
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                         // 4943
	         */                                                                                                         // 4944
	        stringify: function (wordArray) {                                                                           // 4945
	            // Shortcuts                                                                                            // 4946
	            var words = wordArray.words;                                                                            // 4947
	            var sigBytes = wordArray.sigBytes;                                                                      // 4948
                                                                                                                     // 4949
	            // Convert                                                                                              // 4950
	            var latin1Chars = [];                                                                                   // 4951
	            for (var i = 0; i < sigBytes; i++) {                                                                    // 4952
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                          // 4953
	                latin1Chars.push(String.fromCharCode(bite));                                                        // 4954
	            }                                                                                                       // 4955
                                                                                                                     // 4956
	            return latin1Chars.join('');                                                                            // 4957
	        },                                                                                                          // 4958
                                                                                                                     // 4959
	        /**                                                                                                         // 4960
	         * Converts a Latin1 string to a word array.                                                                // 4961
	         *                                                                                                          // 4962
	         * @param {string} latin1Str The Latin1 string.                                                             // 4963
	         *                                                                                                          // 4964
	         * @return {WordArray} The word array.                                                                      // 4965
	         *                                                                                                          // 4966
	         * @static                                                                                                  // 4967
	         *                                                                                                          // 4968
	         * @example                                                                                                 // 4969
	         *                                                                                                          // 4970
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                             // 4971
	         */                                                                                                         // 4972
	        parse: function (latin1Str) {                                                                               // 4973
	            // Shortcut                                                                                             // 4974
	            var latin1StrLength = latin1Str.length;                                                                 // 4975
                                                                                                                     // 4976
	            // Convert                                                                                              // 4977
	            var words = [];                                                                                         // 4978
	            for (var i = 0; i < latin1StrLength; i++) {                                                             // 4979
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                           // 4980
	            }                                                                                                       // 4981
                                                                                                                     // 4982
	            return new WordArray.init(words, latin1StrLength);                                                      // 4983
	        }                                                                                                           // 4984
	    };                                                                                                              // 4985
                                                                                                                     // 4986
	    /**                                                                                                             // 4987
	     * UTF-8 encoding strategy.                                                                                     // 4988
	     */                                                                                                             // 4989
	    var Utf8 = C_enc.Utf8 = {                                                                                       // 4990
	        /**                                                                                                         // 4991
	         * Converts a word array to a UTF-8 string.                                                                 // 4992
	         *                                                                                                          // 4993
	         * @param {WordArray} wordArray The word array.                                                             // 4994
	         *                                                                                                          // 4995
	         * @return {string} The UTF-8 string.                                                                       // 4996
	         *                                                                                                          // 4997
	         * @static                                                                                                  // 4998
	         *                                                                                                          // 4999
	         * @example                                                                                                 // 5000
	         *                                                                                                          // 5001
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                             // 5002
	         */                                                                                                         // 5003
	        stringify: function (wordArray) {                                                                           // 5004
	            try {                                                                                                   // 5005
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                     // 5006
	            } catch (e) {                                                                                           // 5007
	                throw new Error('Malformed UTF-8 data');                                                            // 5008
	            }                                                                                                       // 5009
	        },                                                                                                          // 5010
                                                                                                                     // 5011
	        /**                                                                                                         // 5012
	         * Converts a UTF-8 string to a word array.                                                                 // 5013
	         *                                                                                                          // 5014
	         * @param {string} utf8Str The UTF-8 string.                                                                // 5015
	         *                                                                                                          // 5016
	         * @return {WordArray} The word array.                                                                      // 5017
	         *                                                                                                          // 5018
	         * @static                                                                                                  // 5019
	         *                                                                                                          // 5020
	         * @example                                                                                                 // 5021
	         *                                                                                                          // 5022
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                 // 5023
	         */                                                                                                         // 5024
	        parse: function (utf8Str) {                                                                                 // 5025
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                             // 5026
	        }                                                                                                           // 5027
	    };                                                                                                              // 5028
                                                                                                                     // 5029
	    /**                                                                                                             // 5030
	     * Abstract buffered block algorithm template.                                                                  // 5031
	     *                                                                                                              // 5032
	     * The property blockSize must be implemented in a concrete subtype.                                            // 5033
	     *                                                                                                              // 5034
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */                                                                                                             // 5036
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                       // 5037
	        /**                                                                                                         // 5038
	         * Resets this block algorithm's data buffer to its initial state.                                          // 5039
	         *                                                                                                          // 5040
	         * @example                                                                                                 // 5041
	         *                                                                                                          // 5042
	         *     bufferedBlockAlgorithm.reset();                                                                      // 5043
	         */                                                                                                         // 5044
	        reset: function () {                                                                                        // 5045
	            // Initial values                                                                                       // 5046
	            this._data = new WordArray.init();                                                                      // 5047
	            this._nDataBytes = 0;                                                                                   // 5048
	        },                                                                                                          // 5049
                                                                                                                     // 5050
	        /**                                                                                                         // 5051
	         * Adds new data to this block algorithm's buffer.                                                          // 5052
	         *                                                                                                          // 5053
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.     // 5054
	         *                                                                                                          // 5055
	         * @example                                                                                                 // 5056
	         *                                                                                                          // 5057
	         *     bufferedBlockAlgorithm._append('data');                                                              // 5058
	         *     bufferedBlockAlgorithm._append(wordArray);                                                           // 5059
	         */                                                                                                         // 5060
	        _append: function (data) {                                                                                  // 5061
	            // Convert string to WordArray, else assume WordArray already                                           // 5062
	            if (typeof data == 'string') {                                                                          // 5063
	                data = Utf8.parse(data);                                                                            // 5064
	            }                                                                                                       // 5065
                                                                                                                     // 5066
	            // Append                                                                                               // 5067
	            this._data.concat(data);                                                                                // 5068
	            this._nDataBytes += data.sigBytes;                                                                      // 5069
	        },                                                                                                          // 5070
                                                                                                                     // 5071
	        /**                                                                                                         // 5072
	         * Processes available data blocks.                                                                         // 5073
	         *                                                                                                          // 5074
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.            // 5075
	         *                                                                                                          // 5076
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                      // 5077
	         *                                                                                                          // 5078
	         * @return {WordArray} The processed data.                                                                  // 5079
	         *                                                                                                          // 5080
	         * @example                                                                                                 // 5081
	         *                                                                                                          // 5082
	         *     var processedData = bufferedBlockAlgorithm._process();                                               // 5083
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                      // 5084
	         */                                                                                                         // 5085
	        _process: function (doFlush) {                                                                              // 5086
	            // Shortcuts                                                                                            // 5087
	            var data = this._data;                                                                                  // 5088
	            var dataWords = data.words;                                                                             // 5089
	            var dataSigBytes = data.sigBytes;                                                                       // 5090
	            var blockSize = this.blockSize;                                                                         // 5091
	            var blockSizeBytes = blockSize * 4;                                                                     // 5092
                                                                                                                     // 5093
	            // Count blocks ready                                                                                   // 5094
	            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                       // 5095
	            if (doFlush) {                                                                                          // 5096
	                // Round up to include partial blocks                                                               // 5097
	                nBlocksReady = Math.ceil(nBlocksReady);                                                             // 5098
	            } else {                                                                                                // 5099
	                // Round down to include only full blocks,                                                          // 5100
	                // less the number of blocks that must remain in the buffer                                         // 5101
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                               // 5102
	            }                                                                                                       // 5103
                                                                                                                     // 5104
	            // Count words ready                                                                                    // 5105
	            var nWordsReady = nBlocksReady * blockSize;                                                             // 5106
                                                                                                                     // 5107
	            // Count bytes ready                                                                                    // 5108
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                              // 5109
                                                                                                                     // 5110
	            // Process blocks                                                                                       // 5111
	            if (nWordsReady) {                                                                                      // 5112
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                   // 5113
	                    // Perform concrete-algorithm logic                                                             // 5114
	                    this._doProcessBlock(dataWords, offset);                                                        // 5115
	                }                                                                                                   // 5116
                                                                                                                     // 5117
	                // Remove processed words                                                                           // 5118
	                var processedWords = dataWords.splice(0, nWordsReady);                                              // 5119
	                data.sigBytes -= nBytesReady;                                                                       // 5120
	            }                                                                                                       // 5121
                                                                                                                     // 5122
	            // Return processed words                                                                               // 5123
	            return new WordArray.init(processedWords, nBytesReady);                                                 // 5124
	        },                                                                                                          // 5125
                                                                                                                     // 5126
	        /**                                                                                                         // 5127
	         * Creates a copy of this object.                                                                           // 5128
	         *                                                                                                          // 5129
	         * @return {Object} The clone.                                                                              // 5130
	         *                                                                                                          // 5131
	         * @example                                                                                                 // 5132
	         *                                                                                                          // 5133
	         *     var clone = bufferedBlockAlgorithm.clone();                                                          // 5134
	         */                                                                                                         // 5135
	        clone: function () {                                                                                        // 5136
	            var clone = Base.clone.call(this);                                                                      // 5137
	            clone._data = this._data.clone();                                                                       // 5138
                                                                                                                     // 5139
	            return clone;                                                                                           // 5140
	        },                                                                                                          // 5141
                                                                                                                     // 5142
	        _minBufferSize: 0                                                                                           // 5143
	    });                                                                                                             // 5144
                                                                                                                     // 5145
	    /**                                                                                                             // 5146
	     * Abstract hasher template.                                                                                    // 5147
	     *                                                                                                              // 5148
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)      // 5149
	     */                                                                                                             // 5150
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                     // 5151
	        /**                                                                                                         // 5152
	         * Configuration options.                                                                                   // 5153
	         */                                                                                                         // 5154
	        cfg: Base.extend(),                                                                                         // 5155
                                                                                                                     // 5156
	        /**                                                                                                         // 5157
	         * Initializes a newly created hasher.                                                                      // 5158
	         *                                                                                                          // 5159
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.               // 5160
	         *                                                                                                          // 5161
	         * @example                                                                                                 // 5162
	         *                                                                                                          // 5163
	         *     var hasher = CryptoJS.algo.SHA256.create();                                                          // 5164
	         */                                                                                                         // 5165
	        init: function (cfg) {                                                                                      // 5166
	            // Apply config defaults                                                                                // 5167
	            this.cfg = this.cfg.extend(cfg);                                                                        // 5168
                                                                                                                     // 5169
	            // Set initial values                                                                                   // 5170
	            this.reset();                                                                                           // 5171
	        },                                                                                                          // 5172
                                                                                                                     // 5173
	        /**                                                                                                         // 5174
	         * Resets this hasher to its initial state.                                                                 // 5175
	         *                                                                                                          // 5176
	         * @example                                                                                                 // 5177
	         *                                                                                                          // 5178
	         *     hasher.reset();                                                                                      // 5179
	         */                                                                                                         // 5180
	        reset: function () {                                                                                        // 5181
	            // Reset data buffer                                                                                    // 5182
	            BufferedBlockAlgorithm.reset.call(this);                                                                // 5183
                                                                                                                     // 5184
	            // Perform concrete-hasher logic                                                                        // 5185
	            this._doReset();                                                                                        // 5186
	        },                                                                                                          // 5187
                                                                                                                     // 5188
	        /**                                                                                                         // 5189
	         * Updates this hasher with a message.                                                                      // 5190
	         *                                                                                                          // 5191
	         * @param {WordArray|string} messageUpdate The message to append.                                           // 5192
	         *                                                                                                          // 5193
	         * @return {Hasher} This hasher.                                                                            // 5194
	         *                                                                                                          // 5195
	         * @example                                                                                                 // 5196
	         *                                                                                                          // 5197
	         *     hasher.update('message');                                                                            // 5198
	         *     hasher.update(wordArray);                                                                            // 5199
	         */                                                                                                         // 5200
	        update: function (messageUpdate) {                                                                          // 5201
	            // Append                                                                                               // 5202
	            this._append(messageUpdate);                                                                            // 5203
                                                                                                                     // 5204
	            // Update the hash                                                                                      // 5205
	            this._process();                                                                                        // 5206
                                                                                                                     // 5207
	            // Chainable                                                                                            // 5208
	            return this;                                                                                            // 5209
	        },                                                                                                          // 5210
                                                                                                                     // 5211
	        /**                                                                                                         // 5212
	         * Finalizes the hash computation.                                                                          // 5213
	         * Note that the finalize operation is effectively a destructive, read-once operation.                      // 5214
	         *                                                                                                          // 5215
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.                               // 5216
	         *                                                                                                          // 5217
	         * @return {WordArray} The hash.                                                                            // 5218
	         *                                                                                                          // 5219
	         * @example                                                                                                 // 5220
	         *                                                                                                          // 5221
	         *     var hash = hasher.finalize();                                                                        // 5222
	         *     var hash = hasher.finalize('message');                                                               // 5223
	         *     var hash = hasher.finalize(wordArray);                                                               // 5224
	         */                                                                                                         // 5225
	        finalize: function (messageUpdate) {                                                                        // 5226
	            // Final message update                                                                                 // 5227
	            if (messageUpdate) {                                                                                    // 5228
	                this._append(messageUpdate);                                                                        // 5229
	            }                                                                                                       // 5230
                                                                                                                     // 5231
	            // Perform concrete-hasher logic                                                                        // 5232
	            var hash = this._doFinalize();                                                                          // 5233
                                                                                                                     // 5234
	            return hash;                                                                                            // 5235
	        },                                                                                                          // 5236
                                                                                                                     // 5237
	        blockSize: 512/32,                                                                                          // 5238
                                                                                                                     // 5239
	        /**                                                                                                         // 5240
	         * Creates a shortcut function to a hasher's object interface.                                              // 5241
	         *                                                                                                          // 5242
	         * @param {Hasher} hasher The hasher to create a helper for.                                                // 5243
	         *                                                                                                          // 5244
	         * @return {Function} The shortcut function.                                                                // 5245
	         *                                                                                                          // 5246
	         * @static                                                                                                  // 5247
	         *                                                                                                          // 5248
	         * @example                                                                                                 // 5249
	         *                                                                                                          // 5250
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                // 5251
	         */                                                                                                         // 5252
	        _createHelper: function (hasher) {                                                                          // 5253
	            return function (message, cfg) {                                                                        // 5254
	                return new hasher.init(cfg).finalize(message);                                                      // 5255
	            };                                                                                                      // 5256
	        },                                                                                                          // 5257
                                                                                                                     // 5258
	        /**                                                                                                         // 5259
	         * Creates a shortcut function to the HMAC's object interface.                                              // 5260
	         *                                                                                                          // 5261
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                            // 5262
	         *                                                                                                          // 5263
	         * @return {Function} The shortcut function.                                                                // 5264
	         *                                                                                                          // 5265
	         * @static                                                                                                  // 5266
	         *                                                                                                          // 5267
	         * @example                                                                                                 // 5268
	         *                                                                                                          // 5269
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                        // 5270
	         */                                                                                                         // 5271
	        _createHmacHelper: function (hasher) {                                                                      // 5272
	            return function (message, key) {                                                                        // 5273
	                return new C_algo.HMAC.init(hasher, key).finalize(message);                                         // 5274
	            };                                                                                                      // 5275
	        }                                                                                                           // 5276
	    });                                                                                                             // 5277
                                                                                                                     // 5278
	    /**                                                                                                             // 5279
	     * Algorithm namespace.                                                                                         // 5280
	     */                                                                                                             // 5281
	    var C_algo = C.algo = {};                                                                                       // 5282
                                                                                                                     // 5283
	    return C;                                                                                                       // 5284
	}(Math));                                                                                                           // 5285
                                                                                                                     // 5286
                                                                                                                     // 5287
	return CryptoJS;                                                                                                    // 5288
                                                                                                                     // 5289
}));                                                                                                                 // 5290
},{}],34:[function(require,module,exports){                                                                          // 5291
;(function (root, factory, undef) {                                                                                  // 5292
	if (typeof exports === "object") {                                                                                  // 5293
		// CommonJS                                                                                                        // 5294
		module.exports = exports = factory(require("./core"), require("./x64-core"));                                      // 5295
	}                                                                                                                   // 5296
	else if (typeof define === "function" && define.amd) {                                                              // 5297
		// AMD                                                                                                             // 5298
		define(["./core", "./x64-core"], factory);                                                                         // 5299
	}                                                                                                                   // 5300
	else {                                                                                                              // 5301
		// Global (browser)                                                                                                // 5302
		factory(root.CryptoJS);                                                                                            // 5303
	}                                                                                                                   // 5304
}(this, function (CryptoJS) {                                                                                        // 5305
                                                                                                                     // 5306
	(function (Math) {                                                                                                  // 5307
	    // Shortcuts                                                                                                    // 5308
	    var C = CryptoJS;                                                                                               // 5309
	    var C_lib = C.lib;                                                                                              // 5310
	    var WordArray = C_lib.WordArray;                                                                                // 5311
	    var Hasher = C_lib.Hasher;                                                                                      // 5312
	    var C_x64 = C.x64;                                                                                              // 5313
	    var X64Word = C_x64.Word;                                                                                       // 5314
	    var C_algo = C.algo;                                                                                            // 5315
                                                                                                                     // 5316
	    // Constants tables                                                                                             // 5317
	    var RHO_OFFSETS = [];                                                                                           // 5318
	    var PI_INDEXES  = [];                                                                                           // 5319
	    var ROUND_CONSTANTS = [];                                                                                       // 5320
                                                                                                                     // 5321
	    // Compute Constants                                                                                            // 5322
	    (function () {                                                                                                  // 5323
	        // Compute rho offset constants                                                                             // 5324
	        var x = 1, y = 0;                                                                                           // 5325
	        for (var t = 0; t < 24; t++) {                                                                              // 5326
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                  // 5327
                                                                                                                     // 5328
	            var newX = y % 5;                                                                                       // 5329
	            var newY = (2 * x + 3 * y) % 5;                                                                         // 5330
	            x = newX;                                                                                               // 5331
	            y = newY;                                                                                               // 5332
	        }                                                                                                           // 5333
                                                                                                                     // 5334
	        // Compute pi index constants                                                                               // 5335
	        for (var x = 0; x < 5; x++) {                                                                               // 5336
	            for (var y = 0; y < 5; y++) {                                                                           // 5337
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                              // 5338
	            }                                                                                                       // 5339
	        }                                                                                                           // 5340
                                                                                                                     // 5341
	        // Compute round constants                                                                                  // 5342
	        var LFSR = 0x01;                                                                                            // 5343
	        for (var i = 0; i < 24; i++) {                                                                              // 5344
	            var roundConstantMsw = 0;                                                                               // 5345
	            var roundConstantLsw = 0;                                                                               // 5346
                                                                                                                     // 5347
	            for (var j = 0; j < 7; j++) {                                                                           // 5348
	                if (LFSR & 0x01) {                                                                                  // 5349
	                    var bitPosition = (1 << j) - 1;                                                                 // 5350
	                    if (bitPosition < 32) {                                                                         // 5351
	                        roundConstantLsw ^= 1 << bitPosition;                                                       // 5352
	                    } else /* if (bitPosition >= 32) */ {                                                           // 5353
	                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                // 5354
	                    }                                                                                               // 5355
	                }                                                                                                   // 5356
                                                                                                                     // 5357
	                // Compute next LFSR                                                                                // 5358
	                if (LFSR & 0x80) {                                                                                  // 5359
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                   // 5360
	                    LFSR = (LFSR << 1) ^ 0x71;                                                                      // 5361
	                } else {                                                                                            // 5362
	                    LFSR <<= 1;                                                                                     // 5363
	                }                                                                                                   // 5364
	            }                                                                                                       // 5365
                                                                                                                     // 5366
	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                // 5367
	        }                                                                                                           // 5368
	    }());                                                                                                           // 5369
                                                                                                                     // 5370
	    // Reusable objects for temporary values                                                                        // 5371
	    var T = [];                                                                                                     // 5372
	    (function () {                                                                                                  // 5373
	        for (var i = 0; i < 25; i++) {                                                                              // 5374
	            T[i] = X64Word.create();                                                                                // 5375
	        }                                                                                                           // 5376
	    }());                                                                                                           // 5377
                                                                                                                     // 5378
	    /**                                                                                                             // 5379
	     * SHA-3 hash algorithm.                                                                                        // 5380
	     */                                                                                                             // 5381
	    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                        // 5382
	        /**                                                                                                         // 5383
	         * Configuration options.                                                                                   // 5384
	         *                                                                                                          // 5385
	         * @property {number} outputLength                                                                          // 5386
	         *   The desired number of bits in the output hash.                                                         // 5387
	         *   Only values permitted are: 224, 256, 384, 512.                                                         // 5388
	         *   Default: 512                                                                                           // 5389
	         */                                                                                                         // 5390
	        cfg: Hasher.cfg.extend({                                                                                    // 5391
	            outputLength: 512                                                                                       // 5392
	        }),                                                                                                         // 5393
                                                                                                                     // 5394
	        _doReset: function () {                                                                                     // 5395
	            var state = this._state = []                                                                            // 5396
	            for (var i = 0; i < 25; i++) {                                                                          // 5397
	                state[i] = new X64Word.init();                                                                      // 5398
	            }                                                                                                       // 5399
                                                                                                                     // 5400
	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                               // 5401
	        },                                                                                                          // 5402
                                                                                                                     // 5403
	        _doProcessBlock: function (M, offset) {                                                                     // 5404
	            // Shortcuts                                                                                            // 5405
	            var state = this._state;                                                                                // 5406
	            var nBlockSizeLanes = this.blockSize / 2;                                                               // 5407
                                                                                                                     // 5408
	            // Absorb                                                                                               // 5409
	            for (var i = 0; i < nBlockSizeLanes; i++) {                                                             // 5410
	                // Shortcuts                                                                                        // 5411
	                var M2i  = M[offset + 2 * i];                                                                       // 5412
	                var M2i1 = M[offset + 2 * i + 1];                                                                   // 5413
                                                                                                                     // 5414
	                // Swap endian                                                                                      // 5415
	                M2i = (                                                                                             // 5416
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                   // 5417
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                     // 5418
	                );                                                                                                  // 5419
	                M2i1 = (                                                                                            // 5420
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                 // 5421
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                   // 5422
	                );                                                                                                  // 5423
                                                                                                                     // 5424
	                // Absorb message into state                                                                        // 5425
	                var lane = state[i];                                                                                // 5426
	                lane.high ^= M2i1;                                                                                  // 5427
	                lane.low  ^= M2i;                                                                                   // 5428
	            }                                                                                                       // 5429
                                                                                                                     // 5430
	            // Rounds                                                                                               // 5431
	            for (var round = 0; round < 24; round++) {                                                              // 5432
	                // Theta                                                                                            // 5433
	                for (var x = 0; x < 5; x++) {                                                                       // 5434
	                    // Mix column lanes                                                                             // 5435
	                    var tMsw = 0, tLsw = 0;                                                                         // 5436
	                    for (var y = 0; y < 5; y++) {                                                                   // 5437
	                        var lane = state[x + 5 * y];                                                                // 5438
	                        tMsw ^= lane.high;                                                                          // 5439
	                        tLsw ^= lane.low;                                                                           // 5440
	                    }                                                                                               // 5441
                                                                                                                     // 5442
	                    // Temporary values                                                                             // 5443
	                    var Tx = T[x];                                                                                  // 5444
	                    Tx.high = tMsw;                                                                                 // 5445
	                    Tx.low  = tLsw;                                                                                 // 5446
	                }                                                                                                   // 5447
	                for (var x = 0; x < 5; x++) {                                                                       // 5448
	                    // Shortcuts                                                                                    // 5449
	                    var Tx4 = T[(x + 4) % 5];                                                                       // 5450
	                    var Tx1 = T[(x + 1) % 5];                                                                       // 5451
	                    var Tx1Msw = Tx1.high;                                                                          // 5452
	                    var Tx1Lsw = Tx1.low;                                                                           // 5453
                                                                                                                     // 5454
	                    // Mix surrounding columns                                                                      // 5455
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                        // 5456
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                        // 5457
	                    for (var y = 0; y < 5; y++) {                                                                   // 5458
	                        var lane = state[x + 5 * y];                                                                // 5459
	                        lane.high ^= tMsw;                                                                          // 5460
	                        lane.low  ^= tLsw;                                                                          // 5461
	                    }                                                                                               // 5462
	                }                                                                                                   // 5463
                                                                                                                     // 5464
	                // Rho Pi                                                                                           // 5465
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                              // 5466
	                    // Shortcuts                                                                                    // 5467
	                    var lane = state[laneIndex];                                                                    // 5468
	                    var laneMsw = lane.high;                                                                        // 5469
	                    var laneLsw = lane.low;                                                                         // 5470
	                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                         // 5471
                                                                                                                     // 5472
	                    // Rotate lanes                                                                                 // 5473
	                    if (rhoOffset < 32) {                                                                           // 5474
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                         // 5475
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                         // 5476
	                    } else /* if (rhoOffset >= 32) */ {                                                             // 5477
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                  // 5478
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                  // 5479
	                    }                                                                                               // 5480
                                                                                                                     // 5481
	                    // Transpose lanes                                                                              // 5482
	                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                         // 5483
	                    TPiLane.high = tMsw;                                                                            // 5484
	                    TPiLane.low  = tLsw;                                                                            // 5485
	                }                                                                                                   // 5486
                                                                                                                     // 5487
	                // Rho pi at x = y = 0                                                                              // 5488
	                var T0 = T[0];                                                                                      // 5489
	                var state0 = state[0];                                                                              // 5490
	                T0.high = state0.high;                                                                              // 5491
	                T0.low  = state0.low;                                                                               // 5492
                                                                                                                     // 5493
	                // Chi                                                                                              // 5494
	                for (var x = 0; x < 5; x++) {                                                                       // 5495
	                    for (var y = 0; y < 5; y++) {                                                                   // 5496
	                        // Shortcuts                                                                                // 5497
	                        var laneIndex = x + 5 * y;                                                                  // 5498
	                        var lane = state[laneIndex];                                                                // 5499
	                        var TLane = T[laneIndex];                                                                   // 5500
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                     // 5501
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                     // 5502
                                                                                                                     // 5503
	                        // Mix rows                                                                                 // 5504
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                    // 5505
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                     // 5506
	                    }                                                                                               // 5507
	                }                                                                                                   // 5508
                                                                                                                     // 5509
	                // Iota                                                                                             // 5510
	                var lane = state[0];                                                                                // 5511
	                var roundConstant = ROUND_CONSTANTS[round];                                                         // 5512
	                lane.high ^= roundConstant.high;                                                                    // 5513
	                lane.low  ^= roundConstant.low;;                                                                    // 5514
	            }                                                                                                       // 5515
	        },                                                                                                          // 5516
                                                                                                                     // 5517
	        _doFinalize: function () {                                                                                  // 5518
	            // Shortcuts                                                                                            // 5519
	            var data = this._data;                                                                                  // 5520
	            var dataWords = data.words;                                                                             // 5521
	            var nBitsTotal = this._nDataBytes * 8;                                                                  // 5522
	            var nBitsLeft = data.sigBytes * 8;                                                                      // 5523
	            var blockSizeBits = this.blockSize * 32;                                                                // 5524
                                                                                                                     // 5525
	            // Add padding                                                                                          // 5526
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                             // 5527
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;            // 5528
	            data.sigBytes = dataWords.length * 4;                                                                   // 5529
                                                                                                                     // 5530
	            // Hash final blocks                                                                                    // 5531
	            this._process();                                                                                        // 5532
                                                                                                                     // 5533
	            // Shortcuts                                                                                            // 5534
	            var state = this._state;                                                                                // 5535
	            var outputLengthBytes = this.cfg.outputLength / 8;                                                      // 5536
	            var outputLengthLanes = outputLengthBytes / 8;                                                          // 5537
                                                                                                                     // 5538
	            // Squeeze                                                                                              // 5539
	            var hashWords = [];                                                                                     // 5540
	            for (var i = 0; i < outputLengthLanes; i++) {                                                           // 5541
	                // Shortcuts                                                                                        // 5542
	                var lane = state[i];                                                                                // 5543
	                var laneMsw = lane.high;                                                                            // 5544
	                var laneLsw = lane.low;                                                                             // 5545
                                                                                                                     // 5546
	                // Swap endian                                                                                      // 5547
	                laneMsw = (                                                                                         // 5548
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                           // 5549
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                             // 5550
	                );                                                                                                  // 5551
	                laneLsw = (                                                                                         // 5552
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                           // 5553
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                             // 5554
	                );                                                                                                  // 5555
                                                                                                                     // 5556
	                // Squeeze state to retrieve hash                                                                   // 5557
	                hashWords.push(laneLsw);                                                                            // 5558
	                hashWords.push(laneMsw);                                                                            // 5559
	            }                                                                                                       // 5560
                                                                                                                     // 5561
	            // Return final computed hash                                                                           // 5562
	            return new WordArray.init(hashWords, outputLengthBytes);                                                // 5563
	        },                                                                                                          // 5564
                                                                                                                     // 5565
	        clone: function () {                                                                                        // 5566
	            var clone = Hasher.clone.call(this);                                                                    // 5567
                                                                                                                     // 5568
	            var state = clone._state = this._state.slice(0);                                                        // 5569
	            for (var i = 0; i < 25; i++) {                                                                          // 5570
	                state[i] = state[i].clone();                                                                        // 5571
	            }                                                                                                       // 5572
                                                                                                                     // 5573
	            return clone;                                                                                           // 5574
	        }                                                                                                           // 5575
	    });                                                                                                             // 5576
                                                                                                                     // 5577
	    /**                                                                                                             // 5578
	     * Shortcut function to the hasher's object interface.                                                          // 5579
	     *                                                                                                              // 5580
	     * @param {WordArray|string} message The message to hash.                                                       // 5581
	     *                                                                                                              // 5582
	     * @return {WordArray} The hash.                                                                                // 5583
	     *                                                                                                              // 5584
	     * @static                                                                                                      // 5585
	     *                                                                                                              // 5586
	     * @example                                                                                                     // 5587
	     *                                                                                                              // 5588
	     *     var hash = CryptoJS.SHA3('message');                                                                     // 5589
	     *     var hash = CryptoJS.SHA3(wordArray);                                                                     // 5590
	     */                                                                                                             // 5591
	    C.SHA3 = Hasher._createHelper(SHA3);                                                                            // 5592
                                                                                                                     // 5593
	    /**                                                                                                             // 5594
	     * Shortcut function to the HMAC's object interface.                                                            // 5595
	     *                                                                                                              // 5596
	     * @param {WordArray|string} message The message to hash.                                                       // 5597
	     * @param {WordArray|string} key The secret key.                                                                // 5598
	     *                                                                                                              // 5599
	     * @return {WordArray} The HMAC.                                                                                // 5600
	     *                                                                                                              // 5601
	     * @static                                                                                                      // 5602
	     *                                                                                                              // 5603
	     * @example                                                                                                     // 5604
	     *                                                                                                              // 5605
	     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                              // 5606
	     */                                                                                                             // 5607
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                    // 5608
	}(Math));                                                                                                           // 5609
                                                                                                                     // 5610
                                                                                                                     // 5611
	return CryptoJS.SHA3;                                                                                               // 5612
                                                                                                                     // 5613
}));                                                                                                                 // 5614
},{"./core":33,"./x64-core":35}],35:[function(require,module,exports){                                               // 5615
;(function (root, factory) {                                                                                         // 5616
	if (typeof exports === "object") {                                                                                  // 5617
		// CommonJS                                                                                                        // 5618
		module.exports = exports = factory(require("./core"));                                                             // 5619
	}                                                                                                                   // 5620
	else if (typeof define === "function" && define.amd) {                                                              // 5621
		// AMD                                                                                                             // 5622
		define(["./core"], factory);                                                                                       // 5623
	}                                                                                                                   // 5624
	else {                                                                                                              // 5625
		// Global (browser)                                                                                                // 5626
		factory(root.CryptoJS);                                                                                            // 5627
	}                                                                                                                   // 5628
}(this, function (CryptoJS) {                                                                                        // 5629
                                                                                                                     // 5630
	(function (undefined) {                                                                                             // 5631
	    // Shortcuts                                                                                                    // 5632
	    var C = CryptoJS;                                                                                               // 5633
	    var C_lib = C.lib;                                                                                              // 5634
	    var Base = C_lib.Base;                                                                                          // 5635
	    var X32WordArray = C_lib.WordArray;                                                                             // 5636
                                                                                                                     // 5637
	    /**                                                                                                             // 5638
	     * x64 namespace.                                                                                               // 5639
	     */                                                                                                             // 5640
	    var C_x64 = C.x64 = {};                                                                                         // 5641
                                                                                                                     // 5642
	    /**                                                                                                             // 5643
	     * A 64-bit word.                                                                                               // 5644
	     */                                                                                                             // 5645
	    var X64Word = C_x64.Word = Base.extend({                                                                        // 5646
	        /**                                                                                                         // 5647
	         * Initializes a newly created 64-bit word.                                                                 // 5648
	         *                                                                                                          // 5649
	         * @param {number} high The high 32 bits.                                                                   // 5650
	         * @param {number} low The low 32 bits.                                                                     // 5651
	         *                                                                                                          // 5652
	         * @example                                                                                                 // 5653
	         *                                                                                                          // 5654
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                      // 5655
	         */                                                                                                         // 5656
	        init: function (high, low) {                                                                                // 5657
	            this.high = high;                                                                                       // 5658
	            this.low = low;                                                                                         // 5659
	        }                                                                                                           // 5660
                                                                                                                     // 5661
	        /**                                                                                                         // 5662
	         * Bitwise NOTs this word.                                                                                  // 5663
	         *                                                                                                          // 5664
	         * @return {X64Word} A new x64-Word object after negating.                                                  // 5665
	         *                                                                                                          // 5666
	         * @example                                                                                                 // 5667
	         *                                                                                                          // 5668
	         *     var negated = x64Word.not();                                                                         // 5669
	         */                                                                                                         // 5670
	        // not: function () {                                                                                       // 5671
	            // var high = ~this.high;                                                                               // 5672
	            // var low = ~this.low;                                                                                 // 5673
                                                                                                                     // 5674
	            // return X64Word.create(high, low);                                                                    // 5675
	        // },                                                                                                       // 5676
                                                                                                                     // 5677
	        /**                                                                                                         // 5678
	         * Bitwise ANDs this word with the passed word.                                                             // 5679
	         *                                                                                                          // 5680
	         * @param {X64Word} word The x64-Word to AND with this word.                                                // 5681
	         *                                                                                                          // 5682
	         * @return {X64Word} A new x64-Word object after ANDing.                                                    // 5683
	         *                                                                                                          // 5684
	         * @example                                                                                                 // 5685
	         *                                                                                                          // 5686
	         *     var anded = x64Word.and(anotherX64Word);                                                             // 5687
	         */                                                                                                         // 5688
	        // and: function (word) {                                                                                   // 5689
	            // var high = this.high & word.high;                                                                    // 5690
	            // var low = this.low & word.low;                                                                       // 5691
                                                                                                                     // 5692
	            // return X64Word.create(high, low);                                                                    // 5693
	        // },                                                                                                       // 5694
                                                                                                                     // 5695
	        /**                                                                                                         // 5696
	         * Bitwise ORs this word with the passed word.                                                              // 5697
	         *                                                                                                          // 5698
	         * @param {X64Word} word The x64-Word to OR with this word.                                                 // 5699
	         *                                                                                                          // 5700
	         * @return {X64Word} A new x64-Word object after ORing.                                                     // 5701
	         *                                                                                                          // 5702
	         * @example                                                                                                 // 5703
	         *                                                                                                          // 5704
	         *     var ored = x64Word.or(anotherX64Word);                                                               // 5705
	         */                                                                                                         // 5706
	        // or: function (word) {                                                                                    // 5707
	            // var high = this.high | word.high;                                                                    // 5708
	            // var low = this.low | word.low;                                                                       // 5709
                                                                                                                     // 5710
	            // return X64Word.create(high, low);                                                                    // 5711
	        // },                                                                                                       // 5712
                                                                                                                     // 5713
	        /**                                                                                                         // 5714
	         * Bitwise XORs this word with the passed word.                                                             // 5715
	         *                                                                                                          // 5716
	         * @param {X64Word} word The x64-Word to XOR with this word.                                                // 5717
	         *                                                                                                          // 5718
	         * @return {X64Word} A new x64-Word object after XORing.                                                    // 5719
	         *                                                                                                          // 5720
	         * @example                                                                                                 // 5721
	         *                                                                                                          // 5722
	         *     var xored = x64Word.xor(anotherX64Word);                                                             // 5723
	         */                                                                                                         // 5724
	        // xor: function (word) {                                                                                   // 5725
	            // var high = this.high ^ word.high;                                                                    // 5726
	            // var low = this.low ^ word.low;                                                                       // 5727
                                                                                                                     // 5728
	            // return X64Word.create(high, low);                                                                    // 5729
	        // },                                                                                                       // 5730
                                                                                                                     // 5731
	        /**                                                                                                         // 5732
	         * Shifts this word n bits to the left.                                                                     // 5733
	         *                                                                                                          // 5734
	         * @param {number} n The number of bits to shift.                                                           // 5735
	         *                                                                                                          // 5736
	         * @return {X64Word} A new x64-Word object after shifting.                                                  // 5737
	         *                                                                                                          // 5738
	         * @example                                                                                                 // 5739
	         *                                                                                                          // 5740
	         *     var shifted = x64Word.shiftL(25);                                                                    // 5741
	         */                                                                                                         // 5742
	        // shiftL: function (n) {                                                                                   // 5743
	            // if (n < 32) {                                                                                        // 5744
	                // var high = (this.high << n) | (this.low >>> (32 - n));                                           // 5745
	                // var low = this.low << n;                                                                         // 5746
	            // } else {                                                                                             // 5747
	                // var high = this.low << (n - 32);                                                                 // 5748
	                // var low = 0;                                                                                     // 5749
	            // }                                                                                                    // 5750
                                                                                                                     // 5751
	            // return X64Word.create(high, low);                                                                    // 5752
	        // },                                                                                                       // 5753
                                                                                                                     // 5754
	        /**                                                                                                         // 5755
	         * Shifts this word n bits to the right.                                                                    // 5756
	         *                                                                                                          // 5757
	         * @param {number} n The number of bits to shift.                                                           // 5758
	         *                                                                                                          // 5759
	         * @return {X64Word} A new x64-Word object after shifting.                                                  // 5760
	         *                                                                                                          // 5761
	         * @example                                                                                                 // 5762
	         *                                                                                                          // 5763
	         *     var shifted = x64Word.shiftR(7);                                                                     // 5764
	         */                                                                                                         // 5765
	        // shiftR: function (n) {                                                                                   // 5766
	            // if (n < 32) {                                                                                        // 5767
	                // var low = (this.low >>> n) | (this.high << (32 - n));                                            // 5768
	                // var high = this.high >>> n;                                                                      // 5769
	            // } else {                                                                                             // 5770
	                // var low = this.high >>> (n - 32);                                                                // 5771
	                // var high = 0;                                                                                    // 5772
	            // }                                                                                                    // 5773
                                                                                                                     // 5774
	            // return X64Word.create(high, low);                                                                    // 5775
	        // },                                                                                                       // 5776
                                                                                                                     // 5777
	        /**                                                                                                         // 5778
	         * Rotates this word n bits to the left.                                                                    // 5779
	         *                                                                                                          // 5780
	         * @param {number} n The number of bits to rotate.                                                          // 5781
	         *                                                                                                          // 5782
	         * @return {X64Word} A new x64-Word object after rotating.                                                  // 5783
	         *                                                                                                          // 5784
	         * @example                                                                                                 // 5785
	         *                                                                                                          // 5786
	         *     var rotated = x64Word.rotL(25);                                                                      // 5787
	         */                                                                                                         // 5788
	        // rotL: function (n) {                                                                                     // 5789
	            // return this.shiftL(n).or(this.shiftR(64 - n));                                                       // 5790
	        // },                                                                                                       // 5791
                                                                                                                     // 5792
	        /**                                                                                                         // 5793
	         * Rotates this word n bits to the right.                                                                   // 5794
	         *                                                                                                          // 5795
	         * @param {number} n The number of bits to rotate.                                                          // 5796
	         *                                                                                                          // 5797
	         * @return {X64Word} A new x64-Word object after rotating.                                                  // 5798
	         *                                                                                                          // 5799
	         * @example                                                                                                 // 5800
	         *                                                                                                          // 5801
	         *     var rotated = x64Word.rotR(7);                                                                       // 5802
	         */                                                                                                         // 5803
	        // rotR: function (n) {                                                                                     // 5804
	            // return this.shiftR(n).or(this.shiftL(64 - n));                                                       // 5805
	        // },                                                                                                       // 5806
                                                                                                                     // 5807
	        /**                                                                                                         // 5808
	         * Adds this word with the passed word.                                                                     // 5809
	         *                                                                                                          // 5810
	         * @param {X64Word} word The x64-Word to add with this word.                                                // 5811
	         *                                                                                                          // 5812
	         * @return {X64Word} A new x64-Word object after adding.                                                    // 5813
	         *                                                                                                          // 5814
	         * @example                                                                                                 // 5815
	         *                                                                                                          // 5816
	         *     var added = x64Word.add(anotherX64Word);                                                             // 5817
	         */                                                                                                         // 5818
	        // add: function (word) {                                                                                   // 5819
	            // var low = (this.low + word.low) | 0;                                                                 // 5820
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                  // 5821
	            // var high = (this.high + word.high + carry) | 0;                                                      // 5822
                                                                                                                     // 5823
	            // return X64Word.create(high, low);                                                                    // 5824
	        // }                                                                                                        // 5825
	    });                                                                                                             // 5826
                                                                                                                     // 5827
	    /**                                                                                                             // 5828
	     * An array of 64-bit words.                                                                                    // 5829
	     *                                                                                                              // 5830
	     * @property {Array} words The array of CryptoJS.x64.Word objects.                                              // 5831
	     * @property {number} sigBytes The number of significant bytes in this word array.                              // 5832
	     */                                                                                                             // 5833
	    var X64WordArray = C_x64.WordArray = Base.extend({                                                              // 5834
	        /**                                                                                                         // 5835
	         * Initializes a newly created word array.                                                                  // 5836
	         *                                                                                                          // 5837
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                   // 5838
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                        // 5839
	         *                                                                                                          // 5840
	         * @example                                                                                                 // 5841
	         *                                                                                                          // 5842
	         *     var wordArray = CryptoJS.x64.WordArray.create();                                                     // 5843
	         *                                                                                                          // 5844
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                      // 5845
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                // 5846
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                 // 5847
	         *     ]);                                                                                                  // 5848
	         *                                                                                                          // 5849
	         *     var wordArray = CryptoJS.x64.WordArray.create([                                                      // 5850
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                // 5851
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                 // 5852
	         *     ], 10);                                                                                              // 5853
	         */                                                                                                         // 5854
	        init: function (words, sigBytes) {                                                                          // 5855
	            words = this.words = words || [];                                                                       // 5856
                                                                                                                     // 5857
	            if (sigBytes != undefined) {                                                                            // 5858
	                this.sigBytes = sigBytes;                                                                           // 5859
	            } else {                                                                                                // 5860
	                this.sigBytes = words.length * 8;                                                                   // 5861
	            }                                                                                                       // 5862
	        },                                                                                                          // 5863
                                                                                                                     // 5864
	        /**                                                                                                         // 5865
	         * Converts this 64-bit word array to a 32-bit word array.                                                  // 5866
	         *                                                                                                          // 5867
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                          // 5868
	         *                                                                                                          // 5869
	         * @example                                                                                                 // 5870
	         *                                                                                                          // 5871
	         *     var x32WordArray = x64WordArray.toX32();                                                             // 5872
	         */                                                                                                         // 5873
	        toX32: function () {                                                                                        // 5874
	            // Shortcuts                                                                                            // 5875
	            var x64Words = this.words;                                                                              // 5876
	            var x64WordsLength = x64Words.length;                                                                   // 5877
                                                                                                                     // 5878
	            // Convert                                                                                              // 5879
	            var x32Words = [];                                                                                      // 5880
	            for (var i = 0; i < x64WordsLength; i++) {                                                              // 5881
	                var x64Word = x64Words[i];                                                                          // 5882
	                x32Words.push(x64Word.high);                                                                        // 5883
	                x32Words.push(x64Word.low);                                                                         // 5884
	            }                                                                                                       // 5885
                                                                                                                     // 5886
	            return X32WordArray.create(x32Words, this.sigBytes);                                                    // 5887
	        },                                                                                                          // 5888
                                                                                                                     // 5889
	        /**                                                                                                         // 5890
	         * Creates a copy of this word array.                                                                       // 5891
	         *                                                                                                          // 5892
	         * @return {X64WordArray} The clone.                                                                        // 5893
	         *                                                                                                          // 5894
	         * @example                                                                                                 // 5895
	         *                                                                                                          // 5896
	         *     var clone = x64WordArray.clone();                                                                    // 5897
	         */                                                                                                         // 5898
	        clone: function () {                                                                                        // 5899
	            var clone = Base.clone.call(this);                                                                      // 5900
                                                                                                                     // 5901
	            // Clone "words" array                                                                                  // 5902
	            var words = clone.words = this.words.slice(0);                                                          // 5903
                                                                                                                     // 5904
	            // Clone each X64Word object                                                                            // 5905
	            var wordsLength = words.length;                                                                         // 5906
	            for (var i = 0; i < wordsLength; i++) {                                                                 // 5907
	                words[i] = words[i].clone();                                                                        // 5908
	            }                                                                                                       // 5909
                                                                                                                     // 5910
	            return clone;                                                                                           // 5911
	        }                                                                                                           // 5912
	    });                                                                                                             // 5913
	}());                                                                                                               // 5914
                                                                                                                     // 5915
                                                                                                                     // 5916
	return CryptoJS;                                                                                                    // 5917
                                                                                                                     // 5918
}));                                                                                                                 // 5919
},{"./core":33}],"bignumber.js":[function(require,module,exports){                                                   // 5920
/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                           // 5921
                                                                                                                     // 5922
;(function (global) {                                                                                                // 5923
    'use strict';                                                                                                    // 5924
                                                                                                                     // 5925
    /*                                                                                                               // 5926
      bignumber.js v2.0.7                                                                                            // 5927
      A JavaScript library for arbitrary-precision arithmetic.                                                       // 5928
      https://github.com/MikeMcl/bignumber.js                                                                        // 5929
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                      // 5930
      MIT Expat Licence                                                                                              // 5931
    */                                                                                                               // 5932
                                                                                                                     // 5933
                                                                                                                     // 5934
    var BigNumber, crypto, parseNumeric,                                                                             // 5935
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,                                                          // 5936
        mathceil = Math.ceil,                                                                                        // 5937
        mathfloor = Math.floor,                                                                                      // 5938
        notBool = ' not a boolean or binary digit',                                                                  // 5939
        roundingMode = 'rounding mode',                                                                              // 5940
        tooManyDigits = 'number type has more than 15 significant digits',                                           // 5941
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                               // 5942
        BASE = 1e14,                                                                                                 // 5943
        LOG_BASE = 14,                                                                                               // 5944
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                     // 5945
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                     // 5946
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                          // 5947
        SQRT_BASE = 1e7,                                                                                             // 5948
                                                                                                                     // 5949
        /*                                                                                                           // 5950
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                   // 5951
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                       // 5952
         * exception is thrown (if ERRORS is true).                                                                  // 5953
         */                                                                                                          // 5954
        MAX = 1E9;                                   // 0 to MAX_INT32                                               // 5955
                                                                                                                     // 5956
                                                                                                                     // 5957
    /*                                                                                                               // 5958
     * Create and return a BigNumber constructor.                                                                    // 5959
     */                                                                                                              // 5960
    function another(configObj) {                                                                                    // 5961
        var div,                                                                                                     // 5962
                                                                                                                     // 5963
            // id tracks the caller function, so its name can be included in error messages.                         // 5964
            id = 0,                                                                                                  // 5965
            P = BigNumber.prototype,                                                                                 // 5966
            ONE = new BigNumber(1),                                                                                  // 5967
                                                                                                                     // 5968
                                                                                                                     // 5969
            /********************************* EDITABLE DEFAULTS **********************************/                 // 5970
                                                                                                                     // 5971
                                                                                                                     // 5972
            /*                                                                                                       // 5973
             * The default values below must be integers within the inclusive ranges stated.                         // 5974
             * The values can also be changed at run-time using BigNumber.config.                                    // 5975
             */                                                                                                      // 5976
                                                                                                                     // 5977
            // The maximum number of decimal places for operations involving division.                               // 5978
            DECIMAL_PLACES = 20,                     // 0 to MAX                                                     // 5979
                                                                                                                     // 5980
            /*                                                                                                       // 5981
             * The rounding mode used when rounding to the above decimal places, and when using                      // 5982
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                          // 5983
             * UP         0 Away from zero.                                                                          // 5984
             * DOWN       1 Towards zero.                                                                            // 5985
             * CEIL       2 Towards +Infinity.                                                                       // 5986
             * FLOOR      3 Towards -Infinity.                                                                       // 5987
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                           // 5988
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                         // 5989
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                       // 5990
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                            // 5991
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                            // 5992
             */                                                                                                      // 5993
            ROUNDING_MODE = 4,                       // 0 to 8                                                       // 5994
                                                                                                                     // 5995
            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                            // 5996
                                                                                                                     // 5997
            // The exponent value at and beneath which toString returns exponential notation.                        // 5998
            // Number type: -7                                                                                       // 5999
            TO_EXP_NEG = -7,                         // 0 to -MAX                                                    // 6000
                                                                                                                     // 6001
            // The exponent value at and above which toString returns exponential notation.                          // 6002
            // Number type: 21                                                                                       // 6003
            TO_EXP_POS = 21,                         // 0 to MAX                                                     // 6004
                                                                                                                     // 6005
            // RANGE : [MIN_EXP, MAX_EXP]                                                                            // 6006
                                                                                                                     // 6007
            // The minimum exponent value, beneath which underflow to zero occurs.                                   // 6008
            // Number type: -324  (5e-324)                                                                           // 6009
            MIN_EXP = -1e7,                          // -1 to -MAX                                                   // 6010
                                                                                                                     // 6011
            // The maximum exponent value, above which overflow to Infinity occurs.                                  // 6012
            // Number type:  308  (1.7976931348623157e+308)                                                          // 6013
            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                             // 6014
            MAX_EXP = 1e7,                           // 1 to MAX                                                     // 6015
                                                                                                                     // 6016
            // Whether BigNumber Errors are ever thrown.                                                             // 6017
            ERRORS = true,                           // true or false                                                // 6018
                                                                                                                     // 6019
            // Change to intValidatorNoErrors if ERRORS is false.                                                    // 6020
            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                  // 6021
                                                                                                                     // 6022
            // Whether to use cryptographically-secure random number generation, if available.                       // 6023
            CRYPTO = false,                          // true or false                                                // 6024
                                                                                                                     // 6025
            /*                                                                                                       // 6026
             * The modulo mode used when calculating the modulus: a mod n.                                           // 6027
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                  // 6028
             * The remainder (r) is calculated as: r = a - n * q.                                                    // 6029
             *                                                                                                       // 6030
             * UP        0 The remainder is positive if the dividend is negative, else is negative.                  // 6031
             * DOWN      1 The remainder has the same sign as the dividend.                                          // 6032
             *             This modulo mode is commonly known as 'truncated division' and is                         // 6033
             *             equivalent to (a % n) in JavaScript.                                                      // 6034
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                // 6035
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                              // 6036
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                      // 6037
             *             The remainder is always positive.                                                         // 6038
             *                                                                                                       // 6039
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                   // 6040
             * modes are commonly used for the modulus operation.                                                    // 6041
             * Although the other rounding modes can also be used, they may not give useful results.                 // 6042
             */                                                                                                      // 6043
            MODULO_MODE = 1,                         // 0 to 9                                                       // 6044
                                                                                                                     // 6045
            // The maximum number of significant digits of the result of the toPower operation.                      // 6046
            // If POW_PRECISION is 0, there will be unlimited significant digits.                                    // 6047
            POW_PRECISION = 100,                     // 0 to MAX                                                     // 6048
                                                                                                                     // 6049
            // The format specification used by the BigNumber.prototype.toFormat method.                             // 6050
            FORMAT = {                                                                                               // 6051
                decimalSeparator: '.',                                                                               // 6052
                groupSeparator: ',',                                                                                 // 6053
                groupSize: 3,                                                                                        // 6054
                secondaryGroupSize: 0,                                                                               // 6055
                fractionGroupSeparator: '\xA0',      // non-breaking space                                           // 6056
                fractionGroupSize: 0                                                                                 // 6057
            };                                                                                                       // 6058
                                                                                                                     // 6059
                                                                                                                     // 6060
        /******************************************************************************************/                 // 6061
                                                                                                                     // 6062
                                                                                                                     // 6063
        // CONSTRUCTOR                                                                                               // 6064
                                                                                                                     // 6065
                                                                                                                     // 6066
        /*                                                                                                           // 6067
         * The BigNumber constructor and exported function.                                                          // 6068
         * Create and return a new instance of a BigNumber object.                                                   // 6069
         *                                                                                                           // 6070
         * n {number|string|BigNumber} A numeric value.                                                              // 6071
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                   // 6072
         */                                                                                                          // 6073
        function BigNumber( n, b ) {                                                                                 // 6074
            var c, e, i, num, len, str,                                                                              // 6075
                x = this;                                                                                            // 6076
                                                                                                                     // 6077
            // Enable constructor usage without new.                                                                 // 6078
            if ( !( x instanceof BigNumber ) ) {                                                                     // 6079
                                                                                                                     // 6080
                // 'BigNumber() constructor call without new: {n}'                                                   // 6081
                if (ERRORS) raise( 26, 'constructor call without new', n );                                          // 6082
                return new BigNumber( n, b );                                                                        // 6083
            }                                                                                                        // 6084
                                                                                                                     // 6085
            // 'new BigNumber() base not an integer: {b}'                                                            // 6086
            // 'new BigNumber() base out of range: {b}'                                                              // 6087
            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                // 6088
                                                                                                                     // 6089
                // Duplicate.                                                                                        // 6090
                if ( n instanceof BigNumber ) {                                                                      // 6091
                    x.s = n.s;                                                                                       // 6092
                    x.e = n.e;                                                                                       // 6093
                    x.c = ( n = n.c ) ? n.slice() : n;                                                               // 6094
                    id = 0;                                                                                          // 6095
                    return;                                                                                          // 6096
                }                                                                                                    // 6097
                                                                                                                     // 6098
                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                // 6099
                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                            // 6100
                                                                                                                     // 6101
                    // Fast path for integers.                                                                       // 6102
                    if ( n === ~~n ) {                                                                               // 6103
                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                 // 6104
                        x.e = e;                                                                                     // 6105
                        x.c = [n];                                                                                   // 6106
                        id = 0;                                                                                      // 6107
                        return;                                                                                      // 6108
                    }                                                                                                // 6109
                                                                                                                     // 6110
                    str = n + '';                                                                                    // 6111
                } else {                                                                                             // 6112
                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                       // 6113
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                 // 6114
                }                                                                                                    // 6115
            } else {                                                                                                 // 6116
                b = b | 0;                                                                                           // 6117
                str = n + '';                                                                                        // 6118
                                                                                                                     // 6119
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                             // 6120
                // Allow exponential notation to be used with base 10 argument.                                      // 6121
                if ( b == 10 ) {                                                                                     // 6122
                    x = new BigNumber( n instanceof BigNumber ? n : str );                                           // 6123
                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                      // 6124
                }                                                                                                    // 6125
                                                                                                                     // 6126
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                            // 6127
                // Any number in exponential form will fail due to the [Ee][+-].                                     // 6128
                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                 // 6129
                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                               // 6130
                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                         // 6131
                    return parseNumeric( x, str, num, b );                                                           // 6132
                }                                                                                                    // 6133
                                                                                                                     // 6134
                if (num) {                                                                                           // 6135
                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                // 6136
                                                                                                                     // 6137
                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {                                    // 6138
                                                                                                                     // 6139
                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                    // 6140
                        raise( id, tooManyDigits, n );                                                               // 6141
                    }                                                                                                // 6142
                                                                                                                     // 6143
                    // Prevent later check for length on converted number.                                           // 6144
                    num = false;                                                                                     // 6145
                } else {                                                                                             // 6146
                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                 // 6147
                }                                                                                                    // 6148
                                                                                                                     // 6149
                str = convertBase( str, 10, b, x.s );                                                                // 6150
            }                                                                                                        // 6151
                                                                                                                     // 6152
            // Decimal point?                                                                                        // 6153
            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                       // 6154
                                                                                                                     // 6155
            // Exponential form?                                                                                     // 6156
            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                  // 6157
                                                                                                                     // 6158
                // Determine exponent.                                                                               // 6159
                if ( e < 0 ) e = i;                                                                                  // 6160
                e += +str.slice( i + 1 );                                                                            // 6161
                str = str.substring( 0, i );                                                                         // 6162
            } else if ( e < 0 ) {                                                                                    // 6163
                                                                                                                     // 6164
                // Integer.                                                                                          // 6165
                e = str.length;                                                                                      // 6166
            }                                                                                                        // 6167
                                                                                                                     // 6168
            // Determine leading zeros.                                                                              // 6169
            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                            // 6170
                                                                                                                     // 6171
            // Determine trailing zeros.                                                                             // 6172
            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                 // 6173
            str = str.slice( i, len + 1 );                                                                           // 6174
                                                                                                                     // 6175
            if (str) {                                                                                               // 6176
                len = str.length;                                                                                    // 6177
                                                                                                                     // 6178
                // Disallow numbers with over 15 significant digits if number type.                                  // 6179
                // 'new BigNumber() number type has more than 15 significant digits: {n}'                            // 6180
                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                // 6181
                                                                                                                     // 6182
                e = e - i - 1;                                                                                       // 6183
                                                                                                                     // 6184
                 // Overflow?                                                                                        // 6185
                if ( e > MAX_EXP ) {                                                                                 // 6186
                                                                                                                     // 6187
                    // Infinity.                                                                                     // 6188
                    x.c = x.e = null;                                                                                // 6189
                                                                                                                     // 6190
                // Underflow?                                                                                        // 6191
                } else if ( e < MIN_EXP ) {                                                                          // 6192
                                                                                                                     // 6193
                    // Zero.                                                                                         // 6194
                    x.c = [ x.e = 0 ];                                                                               // 6195
                } else {                                                                                             // 6196
                    x.e = e;                                                                                         // 6197
                    x.c = [];                                                                                        // 6198
                                                                                                                     // 6199
                    // Transform base                                                                                // 6200
                                                                                                                     // 6201
                    // e is the base 10 exponent.                                                                    // 6202
                    // i is where to slice str to get the first element of the coefficient array.                    // 6203
                    i = ( e + 1 ) % LOG_BASE;                                                                        // 6204
                    if ( e < 0 ) i += LOG_BASE;                                                                      // 6205
                                                                                                                     // 6206
                    if ( i < len ) {                                                                                 // 6207
                        if (i) x.c.push( +str.slice( 0, i ) );                                                       // 6208
                                                                                                                     // 6209
                        for ( len -= LOG_BASE; i < len; ) {                                                          // 6210
                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                              // 6211
                        }                                                                                            // 6212
                                                                                                                     // 6213
                        str = str.slice(i);                                                                          // 6214
                        i = LOG_BASE - str.length;                                                                   // 6215
                    } else {                                                                                         // 6216
                        i -= len;                                                                                    // 6217
                    }                                                                                                // 6218
                                                                                                                     // 6219
                    for ( ; i--; str += '0' );                                                                       // 6220
                    x.c.push( +str );                                                                                // 6221
                }                                                                                                    // 6222
            } else {                                                                                                 // 6223
                                                                                                                     // 6224
                // Zero.                                                                                             // 6225
                x.c = [ x.e = 0 ];                                                                                   // 6226
            }                                                                                                        // 6227
                                                                                                                     // 6228
            id = 0;                                                                                                  // 6229
        }                                                                                                            // 6230
                                                                                                                     // 6231
                                                                                                                     // 6232
        // CONSTRUCTOR PROPERTIES                                                                                    // 6233
                                                                                                                     // 6234
                                                                                                                     // 6235
        BigNumber.another = another;                                                                                 // 6236
                                                                                                                     // 6237
        BigNumber.ROUND_UP = 0;                                                                                      // 6238
        BigNumber.ROUND_DOWN = 1;                                                                                    // 6239
        BigNumber.ROUND_CEIL = 2;                                                                                    // 6240
        BigNumber.ROUND_FLOOR = 3;                                                                                   // 6241
        BigNumber.ROUND_HALF_UP = 4;                                                                                 // 6242
        BigNumber.ROUND_HALF_DOWN = 5;                                                                               // 6243
        BigNumber.ROUND_HALF_EVEN = 6;                                                                               // 6244
        BigNumber.ROUND_HALF_CEIL = 7;                                                                               // 6245
        BigNumber.ROUND_HALF_FLOOR = 8;                                                                              // 6246
        BigNumber.EUCLID = 9;                                                                                        // 6247
                                                                                                                     // 6248
                                                                                                                     // 6249
        /*                                                                                                           // 6250
         * Configure infrequently-changing library-wide settings.                                                    // 6251
         *                                                                                                           // 6252
         * Accept an object or an argument list, with one or many of the following properties or                     // 6253
         * parameters respectively:                                                                                  // 6254
         *                                                                                                           // 6255
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                   // 6256
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                     // 6257
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                    // 6258
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                            // 6259
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                           // 6260
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                   // 6261
         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                  // 6262
         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                  // 6263
         *   MODULO_MODE     {number}           0 to 9 inclusive                                                     // 6264
         *   POW_PRECISION   {number}           0 to MAX inclusive                                                   // 6265
         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                     // 6266
         *      decimalSeparator       {string}                                                                      // 6267
         *      groupSeparator         {string}                                                                      // 6268
         *      groupSize              {number}                                                                      // 6269
         *      secondaryGroupSize     {number}                                                                      // 6270
         *      fractionGroupSeparator {string}                                                                      // 6271
         *      fractionGroupSize      {number}                                                                      // 6272
         *                                                                                                           // 6273
         * (The values assigned to the above FORMAT object properties are not checked for validity.)                 // 6274
         *                                                                                                           // 6275
         * E.g.                                                                                                      // 6276
         * BigNumber.config(20, 4) is equivalent to                                                                  // 6277
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                              // 6278
         *                                                                                                           // 6279
         * Ignore properties/parameters set to null or undefined.                                                    // 6280
         * Return an object with the properties current values.                                                      // 6281
         */                                                                                                          // 6282
        BigNumber.config = function () {                                                                             // 6283
            var v, p,                                                                                                // 6284
                i = 0,                                                                                               // 6285
                r = {},                                                                                              // 6286
                a = arguments,                                                                                       // 6287
                o = a[0],                                                                                            // 6288
                has = o && typeof o == 'object'                                                                      // 6289
                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                          // 6290
                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                              // 6291
                                                                                                                     // 6292
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                  // 6293
            // 'config() DECIMAL_PLACES not an integer: {v}'                                                         // 6294
            // 'config() DECIMAL_PLACES out of range: {v}'                                                           // 6295
            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                    // 6296
                DECIMAL_PLACES = v | 0;                                                                              // 6297
            }                                                                                                        // 6298
            r[p] = DECIMAL_PLACES;                                                                                   // 6299
                                                                                                                     // 6300
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                     // 6301
            // 'config() ROUNDING_MODE not an integer: {v}'                                                          // 6302
            // 'config() ROUNDING_MODE out of range: {v}'                                                            // 6303
            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                       // 6304
                ROUNDING_MODE = v | 0;                                                                               // 6305
            }                                                                                                        // 6306
            r[p] = ROUNDING_MODE;                                                                                    // 6307
                                                                                                                     // 6308
            // EXPONENTIAL_AT {number|number[]}                                                                      // 6309
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                  // 6310
            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                         // 6311
            // 'config() EXPONENTIAL_AT out of range: {v}'                                                           // 6312
            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                     // 6313
                                                                                                                     // 6314
                if ( isArray(v) ) {                                                                                  // 6315
                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                   // 6316
                        TO_EXP_NEG = v[0] | 0;                                                                       // 6317
                        TO_EXP_POS = v[1] | 0;                                                                       // 6318
                    }                                                                                                // 6319
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                     // 6320
                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                           // 6321
                }                                                                                                    // 6322
            }                                                                                                        // 6323
            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                       // 6324
                                                                                                                     // 6325
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                    // 6326
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                           // 6327
            // 'config() RANGE not an integer: {v}'                                                                  // 6328
            // 'config() RANGE cannot be zero: {v}'                                                                  // 6329
            // 'config() RANGE out of range: {v}'                                                                    // 6330
            if ( has( p = 'RANGE' ) ) {                                                                              // 6331
                                                                                                                     // 6332
                if ( isArray(v) ) {                                                                                  // 6333
                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                  // 6334
                        MIN_EXP = v[0] | 0;                                                                          // 6335
                        MAX_EXP = v[1] | 0;                                                                          // 6336
                    }                                                                                                // 6337
                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                     // 6338
                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                    // 6339
                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                           // 6340
                }                                                                                                    // 6341
            }                                                                                                        // 6342
            r[p] = [ MIN_EXP, MAX_EXP ];                                                                             // 6343
                                                                                                                     // 6344
            // ERRORS {boolean|number} true, false, 1 or 0.                                                          // 6345
            // 'config() ERRORS not a boolean or binary digit: {v}'                                                  // 6346
            if ( has( p = 'ERRORS' ) ) {                                                                             // 6347
                                                                                                                     // 6348
                if ( v === !!v || v === 1 || v === 0 ) {                                                             // 6349
                    id = 0;                                                                                          // 6350
                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                   // 6351
                } else if (ERRORS) {                                                                                 // 6352
                    raise( 2, p + notBool, v );                                                                      // 6353
                }                                                                                                    // 6354
            }                                                                                                        // 6355
            r[p] = ERRORS;                                                                                           // 6356
                                                                                                                     // 6357
            // CRYPTO {boolean|number} true, false, 1 or 0.                                                          // 6358
            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                  // 6359
            // 'config() crypto unavailable: {crypto}'                                                               // 6360
            if ( has( p = 'CRYPTO' ) ) {                                                                             // 6361
                                                                                                                     // 6362
                if ( v === !!v || v === 1 || v === 0 ) {                                                             // 6363
                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                         // 6364
                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                          // 6365
                } else if (ERRORS) {                                                                                 // 6366
                    raise( 2, p + notBool, v );                                                                      // 6367
                }                                                                                                    // 6368
            }                                                                                                        // 6369
            r[p] = CRYPTO;                                                                                           // 6370
                                                                                                                     // 6371
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                       // 6372
            // 'config() MODULO_MODE not an integer: {v}'                                                            // 6373
            // 'config() MODULO_MODE out of range: {v}'                                                              // 6374
            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                         // 6375
                MODULO_MODE = v | 0;                                                                                 // 6376
            }                                                                                                        // 6377
            r[p] = MODULO_MODE;                                                                                      // 6378
                                                                                                                     // 6379
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                   // 6380
            // 'config() POW_PRECISION not an integer: {v}'                                                          // 6381
            // 'config() POW_PRECISION out of range: {v}'                                                            // 6382
            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                     // 6383
                POW_PRECISION = v | 0;                                                                               // 6384
            }                                                                                                        // 6385
            r[p] = POW_PRECISION;                                                                                    // 6386
                                                                                                                     // 6387
            // FORMAT {object}                                                                                       // 6388
            // 'config() FORMAT not an object: {v}'                                                                  // 6389
            if ( has( p = 'FORMAT' ) ) {                                                                             // 6390
                                                                                                                     // 6391
                if ( typeof v == 'object' ) {                                                                        // 6392
                    FORMAT = v;                                                                                      // 6393
                } else if (ERRORS) {                                                                                 // 6394
                    raise( 2, p + ' not an object', v );                                                             // 6395
                }                                                                                                    // 6396
            }                                                                                                        // 6397
            r[p] = FORMAT;                                                                                           // 6398
                                                                                                                     // 6399
            return r;                                                                                                // 6400
        };                                                                                                           // 6401
                                                                                                                     // 6402
                                                                                                                     // 6403
        /*                                                                                                           // 6404
         * Return a new BigNumber whose value is the maximum of the arguments.                                       // 6405
         *                                                                                                           // 6406
         * arguments {number|string|BigNumber}                                                                       // 6407
         */                                                                                                          // 6408
        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                         // 6409
                                                                                                                     // 6410
                                                                                                                     // 6411
        /*                                                                                                           // 6412
         * Return a new BigNumber whose value is the minimum of the arguments.                                       // 6413
         *                                                                                                           // 6414
         * arguments {number|string|BigNumber}                                                                       // 6415
         */                                                                                                          // 6416
        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                         // 6417
                                                                                                                     // 6418
                                                                                                                     // 6419
        /*                                                                                                           // 6420
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                    // 6421
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                      // 6422
         * zeros are produced).                                                                                      // 6423
         *                                                                                                           // 6424
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                // 6425
         *                                                                                                           // 6426
         * 'random() decimal places not an integer: {dp}'                                                            // 6427
         * 'random() decimal places out of range: {dp}'                                                              // 6428
         * 'random() crypto unavailable: {crypto}'                                                                   // 6429
         */                                                                                                          // 6430
        BigNumber.random = (function () {                                                                            // 6431
            var pow2_53 = 0x20000000000000;                                                                          // 6432
                                                                                                                     // 6433
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                           // 6434
            // Check if Math.random() produces more than 32 bits of randomness.                                      // 6435
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                  // 6436
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                           // 6437
            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                // 6438
              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                         // 6439
              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                 // 6440
                  (Math.random() * 0x800000 | 0); };                                                                 // 6441
                                                                                                                     // 6442
            return function (dp) {                                                                                   // 6443
                var a, b, e, k, v,                                                                                   // 6444
                    i = 0,                                                                                           // 6445
                    c = [],                                                                                          // 6446
                    rand = new BigNumber(ONE);                                                                       // 6447
                                                                                                                     // 6448
                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                          // 6449
                k = mathceil( dp / LOG_BASE );                                                                       // 6450
                                                                                                                     // 6451
                if (CRYPTO) {                                                                                        // 6452
                                                                                                                     // 6453
                    // Browsers supporting crypto.getRandomValues.                                                   // 6454
                    if ( crypto && crypto.getRandomValues ) {                                                        // 6455
                                                                                                                     // 6456
                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                     // 6457
                                                                                                                     // 6458
                        for ( ; i < k; ) {                                                                           // 6459
                                                                                                                     // 6460
                            // 53 bits:                                                                              // 6461
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                 // 6462
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                           // 6463
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                            // 6464
                            //                                     11111 11111111 11111111                           // 6465
                            // 0x20000 is 2^21.                                                                      // 6466
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                  // 6467
                                                                                                                     // 6468
                            // Rejection sampling:                                                                   // 6469
                            // 0 <= v < 9007199254740992                                                             // 6470
                            // Probability that v >= 9e15, is                                                        // 6471
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                            // 6472
                            if ( v >= 9e15 ) {                                                                       // 6473
                                b = crypto.getRandomValues( new Uint32Array(2) );                                    // 6474
                                a[i] = b[0];                                                                         // 6475
                                a[i + 1] = b[1];                                                                     // 6476
                            } else {                                                                                 // 6477
                                                                                                                     // 6478
                                // 0 <= v <= 8999999999999999                                                        // 6479
                                // 0 <= (v % 1e14) <= 99999999999999                                                 // 6480
                                c.push( v % 1e14 );                                                                  // 6481
                                i += 2;                                                                              // 6482
                            }                                                                                        // 6483
                        }                                                                                            // 6484
                        i = k / 2;                                                                                   // 6485
                                                                                                                     // 6486
                    // Node.js supporting crypto.randomBytes.                                                        // 6487
                    } else if ( crypto && crypto.randomBytes ) {                                                     // 6488
                                                                                                                     // 6489
                        // buffer                                                                                    // 6490
                        a = crypto.randomBytes( k *= 7 );                                                            // 6491
                                                                                                                     // 6492
                        for ( ; i < k; ) {                                                                           // 6493
                                                                                                                     // 6494
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                        // 6495
                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                // 6496
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                           // 6497
                            // 0 <= v < 9007199254740992                                                             // 6498
                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                 // 6499
                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                            // 6500
                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                 // 6501
                                                                                                                     // 6502
                            if ( v >= 9e15 ) {                                                                       // 6503
                                crypto.randomBytes(7).copy( a, i );                                                  // 6504
                            } else {                                                                                 // 6505
                                                                                                                     // 6506
                                // 0 <= (v % 1e14) <= 99999999999999                                                 // 6507
                                c.push( v % 1e14 );                                                                  // 6508
                                i += 7;                                                                              // 6509
                            }                                                                                        // 6510
                        }                                                                                            // 6511
                        i = k / 7;                                                                                   // 6512
                    } else if (ERRORS) {                                                                             // 6513
                        raise( 14, 'crypto unavailable', crypto );                                                   // 6514
                    }                                                                                                // 6515
                }                                                                                                    // 6516
                                                                                                                     // 6517
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                    // 6518
                if (!i) {                                                                                            // 6519
                                                                                                                     // 6520
                    for ( ; i < k; ) {                                                                               // 6521
                        v = random53bitInt();                                                                        // 6522
                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                           // 6523
                    }                                                                                                // 6524
                }                                                                                                    // 6525
                                                                                                                     // 6526
                k = c[--i];                                                                                          // 6527
                dp %= LOG_BASE;                                                                                      // 6528
                                                                                                                     // 6529
                // Convert trailing digits to zeros according to dp.                                                 // 6530
                if ( k && dp ) {                                                                                     // 6531
                    v = POWS_TEN[LOG_BASE - dp];                                                                     // 6532
                    c[i] = mathfloor( k / v ) * v;                                                                   // 6533
                }                                                                                                    // 6534
                                                                                                                     // 6535
                // Remove trailing elements which are zero.                                                          // 6536
                for ( ; c[i] === 0; c.pop(), i-- );                                                                  // 6537
                                                                                                                     // 6538
                // Zero?                                                                                             // 6539
                if ( i < 0 ) {                                                                                       // 6540
                    c = [ e = 0 ];                                                                                   // 6541
                } else {                                                                                             // 6542
                                                                                                                     // 6543
                    // Remove leading elements which are zero and adjust exponent accordingly.                       // 6544
                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                            // 6545
                                                                                                                     // 6546
                    // Count the digits of the first element of c to determine leading zeros, and...                 // 6547
                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                   // 6548
                                                                                                                     // 6549
                    // adjust the exponent accordingly.                                                              // 6550
                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                           // 6551
                }                                                                                                    // 6552
                                                                                                                     // 6553
                rand.e = e;                                                                                          // 6554
                rand.c = c;                                                                                          // 6555
                return rand;                                                                                         // 6556
            };                                                                                                       // 6557
        })();                                                                                                        // 6558
                                                                                                                     // 6559
                                                                                                                     // 6560
        // PRIVATE FUNCTIONS                                                                                         // 6561
                                                                                                                     // 6562
                                                                                                                     // 6563
        // Convert a numeric string of baseIn to a numeric string of baseOut.                                        // 6564
        function convertBase( str, baseOut, baseIn, sign ) {                                                         // 6565
            var d, e, k, r, x, xc, y,                                                                                // 6566
                i = str.indexOf( '.' ),                                                                              // 6567
                dp = DECIMAL_PLACES,                                                                                 // 6568
                rm = ROUNDING_MODE;                                                                                  // 6569
                                                                                                                     // 6570
            if ( baseIn < 37 ) str = str.toLowerCase();                                                              // 6571
                                                                                                                     // 6572
            // Non-integer.                                                                                          // 6573
            if ( i >= 0 ) {                                                                                          // 6574
                k = POW_PRECISION;                                                                                   // 6575
                                                                                                                     // 6576
                // Unlimited precision.                                                                              // 6577
                POW_PRECISION = 0;                                                                                   // 6578
                str = str.replace( '.', '' );                                                                        // 6579
                y = new BigNumber(baseIn);                                                                           // 6580
                x = y.pow( str.length - i );                                                                         // 6581
                POW_PRECISION = k;                                                                                   // 6582
                                                                                                                     // 6583
                // Convert str as if an integer, then restore the fraction part by dividing the                      // 6584
                // result by its base raised to a power.                                                             // 6585
                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                           // 6586
                y.e = y.c.length;                                                                                    // 6587
            }                                                                                                        // 6588
                                                                                                                     // 6589
            // Convert the number as integer.                                                                        // 6590
            xc = toBaseOut( str, baseIn, baseOut );                                                                  // 6591
            e = k = xc.length;                                                                                       // 6592
                                                                                                                     // 6593
            // Remove trailing zeros.                                                                                // 6594
            for ( ; xc[--k] == 0; xc.pop() );                                                                        // 6595
            if ( !xc[0] ) return '0';                                                                                // 6596
                                                                                                                     // 6597
            if ( i < 0 ) {                                                                                           // 6598
                --e;                                                                                                 // 6599
            } else {                                                                                                 // 6600
                x.c = xc;                                                                                            // 6601
                x.e = e;                                                                                             // 6602
                                                                                                                     // 6603
                // sign is needed for correct rounding.                                                              // 6604
                x.s = sign;                                                                                          // 6605
                x = div( x, y, dp, rm, baseOut );                                                                    // 6606
                xc = x.c;                                                                                            // 6607
                r = x.r;                                                                                             // 6608
                e = x.e;                                                                                             // 6609
            }                                                                                                        // 6610
                                                                                                                     // 6611
            d = e + dp + 1;                                                                                          // 6612
                                                                                                                     // 6613
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                  // 6614
            i = xc[d];                                                                                               // 6615
            k = baseOut / 2;                                                                                         // 6616
            r = r || d < 0 || xc[d + 1] != null;                                                                     // 6617
                                                                                                                     // 6618
            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                              // 6619
                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                             // 6620
                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                // 6621
                                                                                                                     // 6622
            if ( d < 1 || !xc[0] ) {                                                                                 // 6623
                                                                                                                     // 6624
                // 1^-dp or 0.                                                                                       // 6625
                str = r ? toFixedPoint( '1', -dp ) : '0';                                                            // 6626
            } else {                                                                                                 // 6627
                xc.length = d;                                                                                       // 6628
                                                                                                                     // 6629
                if (r) {                                                                                             // 6630
                                                                                                                     // 6631
                    // Rounding up may mean the previous digit has to be rounded up and so on.                       // 6632
                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                        // 6633
                        xc[d] = 0;                                                                                   // 6634
                                                                                                                     // 6635
                        if ( !d ) {                                                                                  // 6636
                            ++e;                                                                                     // 6637
                            xc.unshift(1);                                                                           // 6638
                        }                                                                                            // 6639
                    }                                                                                                // 6640
                }                                                                                                    // 6641
                                                                                                                     // 6642
                // Determine trailing zeros.                                                                         // 6643
                for ( k = xc.length; !xc[--k]; );                                                                    // 6644
                                                                                                                     // 6645
                // E.g. [4, 11, 15] becomes 4bf.                                                                     // 6646
                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                  // 6647
                str = toFixedPoint( str, e );                                                                        // 6648
            }                                                                                                        // 6649
                                                                                                                     // 6650
            // The caller will add the sign.                                                                         // 6651
            return str;                                                                                              // 6652
        }                                                                                                            // 6653
                                                                                                                     // 6654
                                                                                                                     // 6655
        // Perform division in the specified base. Called by div and convertBase.                                    // 6656
        div = (function () {                                                                                         // 6657
                                                                                                                     // 6658
            // Assume non-zero x and k.                                                                              // 6659
            function multiply( x, k, base ) {                                                                        // 6660
                var m, temp, xlo, xhi,                                                                               // 6661
                    carry = 0,                                                                                       // 6662
                    i = x.length,                                                                                    // 6663
                    klo = k % SQRT_BASE,                                                                             // 6664
                    khi = k / SQRT_BASE | 0;                                                                         // 6665
                                                                                                                     // 6666
                for ( x = x.slice(); i--; ) {                                                                        // 6667
                    xlo = x[i] % SQRT_BASE;                                                                          // 6668
                    xhi = x[i] / SQRT_BASE | 0;                                                                      // 6669
                    m = khi * xlo + xhi * klo;                                                                       // 6670
                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                    // 6671
                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                 // 6672
                    x[i] = temp % base;                                                                              // 6673
                }                                                                                                    // 6674
                                                                                                                     // 6675
                if (carry) x.unshift(carry);                                                                         // 6676
                                                                                                                     // 6677
                return x;                                                                                            // 6678
            }                                                                                                        // 6679
                                                                                                                     // 6680
            function compare( a, b, aL, bL ) {                                                                       // 6681
                var i, cmp;                                                                                          // 6682
                                                                                                                     // 6683
                if ( aL != bL ) {                                                                                    // 6684
                    cmp = aL > bL ? 1 : -1;                                                                          // 6685
                } else {                                                                                             // 6686
                                                                                                                     // 6687
                    for ( i = cmp = 0; i < aL; i++ ) {                                                               // 6688
                                                                                                                     // 6689
                        if ( a[i] != b[i] ) {                                                                        // 6690
                            cmp = a[i] > b[i] ? 1 : -1;                                                              // 6691
                            break;                                                                                   // 6692
                        }                                                                                            // 6693
                    }                                                                                                // 6694
                }                                                                                                    // 6695
                return cmp;                                                                                          // 6696
            }                                                                                                        // 6697
                                                                                                                     // 6698
            function subtract( a, b, aL, base ) {                                                                    // 6699
                var i = 0;                                                                                           // 6700
                                                                                                                     // 6701
                // Subtract b from a.                                                                                // 6702
                for ( ; aL--; ) {                                                                                    // 6703
                    a[aL] -= i;                                                                                      // 6704
                    i = a[aL] < b[aL] ? 1 : 0;                                                                       // 6705
                    a[aL] = i * base + a[aL] - b[aL];                                                                // 6706
                }                                                                                                    // 6707
                                                                                                                     // 6708
                // Remove leading zeros.                                                                             // 6709
                for ( ; !a[0] && a.length > 1; a.shift() );                                                          // 6710
            }                                                                                                        // 6711
                                                                                                                     // 6712
            // x: dividend, y: divisor.                                                                              // 6713
            return function ( x, y, dp, rm, base ) {                                                                 // 6714
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                            // 6715
                    yL, yz,                                                                                          // 6716
                    s = x.s == y.s ? 1 : -1,                                                                         // 6717
                    xc = x.c,                                                                                        // 6718
                    yc = y.c;                                                                                        // 6719
                                                                                                                     // 6720
                // Either NaN, Infinity or 0?                                                                        // 6721
                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                              // 6722
                                                                                                                     // 6723
                    return new BigNumber(                                                                            // 6724
                                                                                                                     // 6725
                      // Return NaN if either NaN, or both Infinity or 0.                                            // 6726
                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                    // 6727
                                                                                                                     // 6728
                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                   // 6729
                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                      // 6730
                    );                                                                                               // 6731
                }                                                                                                    // 6732
                                                                                                                     // 6733
                q = new BigNumber(s);                                                                                // 6734
                qc = q.c = [];                                                                                       // 6735
                e = x.e - y.e;                                                                                       // 6736
                s = dp + e + 1;                                                                                      // 6737
                                                                                                                     // 6738
                if ( !base ) {                                                                                       // 6739
                    base = BASE;                                                                                     // 6740
                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                     // 6741
                    s = s / LOG_BASE | 0;                                                                            // 6742
                }                                                                                                    // 6743
                                                                                                                     // 6744
                // Result exponent may be one less then the current value of e.                                      // 6745
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                      // 6746
                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                         // 6747
                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                   // 6748
                                                                                                                     // 6749
                if ( s < 0 ) {                                                                                       // 6750
                    qc.push(1);                                                                                      // 6751
                    more = true;                                                                                     // 6752
                } else {                                                                                             // 6753
                    xL = xc.length;                                                                                  // 6754
                    yL = yc.length;                                                                                  // 6755
                    i = 0;                                                                                           // 6756
                    s += 2;                                                                                          // 6757
                                                                                                                     // 6758
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                              // 6759
                                                                                                                     // 6760
                    n = mathfloor( base / ( yc[0] + 1 ) );                                                           // 6761
                                                                                                                     // 6762
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                       // 6763
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                // 6764
                    if ( n > 1 ) {                                                                                   // 6765
                        yc = multiply( yc, n, base );                                                                // 6766
                        xc = multiply( xc, n, base );                                                                // 6767
                        yL = yc.length;                                                                              // 6768
                        xL = xc.length;                                                                              // 6769
                    }                                                                                                // 6770
                                                                                                                     // 6771
                    xi = yL;                                                                                         // 6772
                    rem = xc.slice( 0, yL );                                                                         // 6773
                    remL = rem.length;                                                                               // 6774
                                                                                                                     // 6775
                    // Add zeros to make remainder as long as divisor.                                               // 6776
                    for ( ; remL < yL; rem[remL++] = 0 );                                                            // 6777
                    yz = yc.slice();                                                                                 // 6778
                    yz.unshift(0);                                                                                   // 6779
                    yc0 = yc[0];                                                                                     // 6780
                    if ( yc[1] >= base / 2 ) yc0++;                                                                  // 6781
                    // Not necessary, but to prevent trial digit n > base, when using base 3.                        // 6782
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                            // 6783
                                                                                                                     // 6784
                    do {                                                                                             // 6785
                        n = 0;                                                                                       // 6786
                                                                                                                     // 6787
                        // Compare divisor and remainder.                                                            // 6788
                        cmp = compare( yc, rem, yL, remL );                                                          // 6789
                                                                                                                     // 6790
                        // If divisor < remainder.                                                                   // 6791
                        if ( cmp < 0 ) {                                                                             // 6792
                                                                                                                     // 6793
                            // Calculate trial digit, n.                                                             // 6794
                                                                                                                     // 6795
                            rem0 = rem[0];                                                                           // 6796
                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                  // 6797
                                                                                                                     // 6798
                            // n is how many times the divisor goes into the current remainder.                      // 6799
                            n = mathfloor( rem0 / yc0 );                                                             // 6800
                                                                                                                     // 6801
                            //  Algorithm:                                                                           // 6802
                            //  1. product = divisor * trial digit (n)                                               // 6803
                            //  2. if product > remainder: product -= divisor, n--                                   // 6804
                            //  3. remainder -= product                                                              // 6805
                            //  4. if product was < remainder at 2:                                                  // 6806
                            //    5. compare new remainder and divisor                                               // 6807
                            //    6. If remainder > divisor: remainder -= divisor, n++                               // 6808
                                                                                                                     // 6809
                            if ( n > 1 ) {                                                                           // 6810
                                                                                                                     // 6811
                                // n may be > base only when base is 3.                                              // 6812
                                if (n >= base) n = base - 1;                                                         // 6813
                                                                                                                     // 6814
                                // product = divisor * trial digit.                                                  // 6815
                                prod = multiply( yc, n, base );                                                      // 6816
                                prodL = prod.length;                                                                 // 6817
                                remL = rem.length;                                                                   // 6818
                                                                                                                     // 6819
                                // Compare product and remainder.                                                    // 6820
                                // If product > remainder.                                                           // 6821
                                // Trial digit n too high.                                                           // 6822
                                // n is 1 too high about 5% of the time, and is not known to have                    // 6823
                                // ever been more than 1 too high.                                                   // 6824
                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                   // 6825
                                    n--;                                                                             // 6826
                                                                                                                     // 6827
                                    // Subtract divisor from product.                                                // 6828
                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                             // 6829
                                    prodL = prod.length;                                                             // 6830
                                    cmp = 1;                                                                         // 6831
                                }                                                                                    // 6832
                            } else {                                                                                 // 6833
                                                                                                                     // 6834
                                // n is 0 or 1, cmp is -1.                                                           // 6835
                                // If n is 0, there is no need to compare yc and rem again below,                    // 6836
                                // so change cmp to 1 to avoid it.                                                   // 6837
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                     // 6838
                                if ( n == 0 ) {                                                                      // 6839
                                                                                                                     // 6840
                                    // divisor < remainder, so n must be at least 1.                                 // 6841
                                    cmp = n = 1;                                                                     // 6842
                                }                                                                                    // 6843
                                                                                                                     // 6844
                                // product = divisor                                                                 // 6845
                                prod = yc.slice();                                                                   // 6846
                                prodL = prod.length;                                                                 // 6847
                            }                                                                                        // 6848
                                                                                                                     // 6849
                            if ( prodL < remL ) prod.unshift(0);                                                     // 6850
                                                                                                                     // 6851
                            // Subtract product from remainder.                                                      // 6852
                            subtract( rem, prod, remL, base );                                                       // 6853
                            remL = rem.length;                                                                       // 6854
                                                                                                                     // 6855
                             // If product was < remainder.                                                          // 6856
                            if ( cmp == -1 ) {                                                                       // 6857
                                                                                                                     // 6858
                                // Compare divisor and new remainder.                                                // 6859
                                // If divisor < new remainder, subtract divisor from remainder.                      // 6860
                                // Trial digit n too low.                                                            // 6861
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                   // 6862
                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                         // 6863
                                    n++;                                                                             // 6864
                                                                                                                     // 6865
                                    // Subtract divisor from remainder.                                              // 6866
                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                // 6867
                                    remL = rem.length;                                                               // 6868
                                }                                                                                    // 6869
                            }                                                                                        // 6870
                        } else if ( cmp === 0 ) {                                                                    // 6871
                            n++;                                                                                     // 6872
                            rem = [0];                                                                               // 6873
                        } // else cmp === 1 and n will be 0                                                          // 6874
                                                                                                                     // 6875
                        // Add the next digit, n, to the result array.                                               // 6876
                        qc[i++] = n;                                                                                 // 6877
                                                                                                                     // 6878
                        // Update the remainder.                                                                     // 6879
                        if ( rem[0] ) {                                                                              // 6880
                            rem[remL++] = xc[xi] || 0;                                                               // 6881
                        } else {                                                                                     // 6882
                            rem = [ xc[xi] ];                                                                        // 6883
                            remL = 1;                                                                                // 6884
                        }                                                                                            // 6885
                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                              // 6886
                                                                                                                     // 6887
                    more = rem[0] != null;                                                                           // 6888
                                                                                                                     // 6889
                    // Leading zero?                                                                                 // 6890
                    if ( !qc[0] ) qc.shift();                                                                        // 6891
                }                                                                                                    // 6892
                                                                                                                     // 6893
                if ( base == BASE ) {                                                                                // 6894
                                                                                                                     // 6895
                    // To calculate q.e, first get the number of digits of qc[0].                                    // 6896
                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                 // 6897
                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                   // 6898
                                                                                                                     // 6899
                // Caller is convertBase.                                                                            // 6900
                } else {                                                                                             // 6901
                    q.e = e;                                                                                         // 6902
                    q.r = +more;                                                                                     // 6903
                }                                                                                                    // 6904
                                                                                                                     // 6905
                return q;                                                                                            // 6906
            };                                                                                                       // 6907
        })();                                                                                                        // 6908
                                                                                                                     // 6909
                                                                                                                     // 6910
        /*                                                                                                           // 6911
         * Return a string representing the value of BigNumber n in fixed-point or exponential                       // 6912
         * notation rounded to the specified decimal places or significant digits.                                   // 6913
         *                                                                                                           // 6914
         * n is a BigNumber.                                                                                         // 6915
         * i is the index of the last digit required (i.e. the digit that may be rounded up).                        // 6916
         * rm is the rounding mode.                                                                                  // 6917
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                           // 6918
         */                                                                                                          // 6919
        function format( n, i, rm, caller ) {                                                                        // 6920
            var c0, e, ne, len, str;                                                                                 // 6921
                                                                                                                     // 6922
            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                          // 6923
              ? rm | 0 : ROUNDING_MODE;                                                                              // 6924
                                                                                                                     // 6925
            if ( !n.c ) return n.toString();                                                                         // 6926
            c0 = n.c[0];                                                                                             // 6927
            ne = n.e;                                                                                                // 6928
                                                                                                                     // 6929
            if ( i == null ) {                                                                                       // 6930
                str = coeffToString( n.c );                                                                          // 6931
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                               // 6932
                  ? toExponential( str, ne )                                                                         // 6933
                  : toFixedPoint( str, ne );                                                                         // 6934
            } else {                                                                                                 // 6935
                n = round( new BigNumber(n), i, rm );                                                                // 6936
                                                                                                                     // 6937
                // n.e may have changed if the value was rounded up.                                                 // 6938
                e = n.e;                                                                                             // 6939
                                                                                                                     // 6940
                str = coeffToString( n.c );                                                                          // 6941
                len = str.length;                                                                                    // 6942
                                                                                                                     // 6943
                // toPrecision returns exponential notation if the number of significant digits                      // 6944
                // specified is less than the number of digits necessary to represent the integer                    // 6945
                // part of the value in fixed-point notation.                                                        // 6946
                                                                                                                     // 6947
                // Exponential notation.                                                                             // 6948
                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                               // 6949
                                                                                                                     // 6950
                    // Append zeros?                                                                                 // 6951
                    for ( ; len < i; str += '0', len++ );                                                            // 6952
                    str = toExponential( str, e );                                                                   // 6953
                                                                                                                     // 6954
                // Fixed-point notation.                                                                             // 6955
                } else {                                                                                             // 6956
                    i -= ne;                                                                                         // 6957
                    str = toFixedPoint( str, e );                                                                    // 6958
                                                                                                                     // 6959
                    // Append zeros?                                                                                 // 6960
                    if ( e + 1 > len ) {                                                                             // 6961
                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                          // 6962
                    } else {                                                                                         // 6963
                        i += e - len;                                                                                // 6964
                        if ( i > 0 ) {                                                                               // 6965
                            if ( e + 1 == len ) str += '.';                                                          // 6966
                            for ( ; i--; str += '0' );                                                               // 6967
                        }                                                                                            // 6968
                    }                                                                                                // 6969
                }                                                                                                    // 6970
            }                                                                                                        // 6971
                                                                                                                     // 6972
            return n.s < 0 && c0 ? '-' + str : str;                                                                  // 6973
        }                                                                                                            // 6974
                                                                                                                     // 6975
                                                                                                                     // 6976
        // Handle BigNumber.max and BigNumber.min.                                                                   // 6977
        function maxOrMin( args, method ) {                                                                          // 6978
            var m, n,                                                                                                // 6979
                i = 0;                                                                                               // 6980
                                                                                                                     // 6981
            if ( isArray( args[0] ) ) args = args[0];                                                                // 6982
            m = new BigNumber( args[0] );                                                                            // 6983
                                                                                                                     // 6984
            for ( ; ++i < args.length; ) {                                                                           // 6985
                n = new BigNumber( args[i] );                                                                        // 6986
                                                                                                                     // 6987
                // If any number is NaN, return NaN.                                                                 // 6988
                if ( !n.s ) {                                                                                        // 6989
                    m = n;                                                                                           // 6990
                    break;                                                                                           // 6991
                } else if ( method.call( m, n ) ) {                                                                  // 6992
                    m = n;                                                                                           // 6993
                }                                                                                                    // 6994
            }                                                                                                        // 6995
                                                                                                                     // 6996
            return m;                                                                                                // 6997
        }                                                                                                            // 6998
                                                                                                                     // 6999
                                                                                                                     // 7000
        /*                                                                                                           // 7001
         * Return true if n is an integer in range, otherwise throw.                                                 // 7002
         * Use for argument validation when ERRORS is true.                                                          // 7003
         */                                                                                                          // 7004
        function intValidatorWithErrors( n, min, max, caller, name ) {                                               // 7005
            if ( n < min || n > max || n != truncate(n) ) {                                                          // 7006
                raise( caller, ( name || 'decimal places' ) +                                                        // 7007
                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                 // 7008
            }                                                                                                        // 7009
                                                                                                                     // 7010
            return true;                                                                                             // 7011
        }                                                                                                            // 7012
                                                                                                                     // 7013
                                                                                                                     // 7014
        /*                                                                                                           // 7015
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                   // 7016
         * Called by minus, plus and times.                                                                          // 7017
         */                                                                                                          // 7018
        function normalise( n, c, e ) {                                                                              // 7019
            var i = 1,                                                                                               // 7020
                j = c.length;                                                                                        // 7021
                                                                                                                     // 7022
             // Remove trailing zeros.                                                                               // 7023
            for ( ; !c[--j]; c.pop() );                                                                              // 7024
                                                                                                                     // 7025
            // Calculate the base 10 exponent. First get the number of digits of c[0].                               // 7026
            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                 // 7027
                                                                                                                     // 7028
            // Overflow?                                                                                             // 7029
            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                          // 7030
                                                                                                                     // 7031
                // Infinity.                                                                                         // 7032
                n.c = n.e = null;                                                                                    // 7033
                                                                                                                     // 7034
            // Underflow?                                                                                            // 7035
            } else if ( e < MIN_EXP ) {                                                                              // 7036
                                                                                                                     // 7037
                // Zero.                                                                                             // 7038
                n.c = [ n.e = 0 ];                                                                                   // 7039
            } else {                                                                                                 // 7040
                n.e = e;                                                                                             // 7041
                n.c = c;                                                                                             // 7042
            }                                                                                                        // 7043
                                                                                                                     // 7044
            return n;                                                                                                // 7045
        }                                                                                                            // 7046
                                                                                                                     // 7047
                                                                                                                     // 7048
        // Handle values that fail the validity test in BigNumber.                                                   // 7049
        parseNumeric = (function () {                                                                                // 7050
            var basePrefix = /^(-?)0([xbo])/i,                                                                       // 7051
                dotAfter = /^([^.]+)\.$/,                                                                            // 7052
                dotBefore = /^\.([^.]+)$/,                                                                           // 7053
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                              // 7054
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;                                                              // 7055
                                                                                                                     // 7056
            return function ( x, str, num, b ) {                                                                     // 7057
                var base,                                                                                            // 7058
                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                             // 7059
                                                                                                                     // 7060
                // No exception on ±Infinity or NaN.                                                                 // 7061
                if ( isInfinityOrNaN.test(s) ) {                                                                     // 7062
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                          // 7063
                } else {                                                                                             // 7064
                    if ( !num ) {                                                                                    // 7065
                                                                                                                     // 7066
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i                                                // 7067
                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                          // 7068
                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                        // 7069
                            return !b || b == base ? p1 : m;                                                         // 7070
                        });                                                                                          // 7071
                                                                                                                     // 7072
                        if (b) {                                                                                     // 7073
                            base = b;                                                                                // 7074
                                                                                                                     // 7075
                            // E.g. '1.' to '1', '.1' to '0.1'                                                       // 7076
                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                            // 7077
                        }                                                                                            // 7078
                                                                                                                     // 7079
                        if ( str != s ) return new BigNumber( s, base );                                             // 7080
                    }                                                                                                // 7081
                                                                                                                     // 7082
                    // 'new BigNumber() not a number: {n}'                                                           // 7083
                    // 'new BigNumber() not a base {b} number: {n}'                                                  // 7084
                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                   // 7085
                    x.s = null;                                                                                      // 7086
                }                                                                                                    // 7087
                                                                                                                     // 7088
                x.c = x.e = null;                                                                                    // 7089
                id = 0;                                                                                              // 7090
            }                                                                                                        // 7091
        })();                                                                                                        // 7092
                                                                                                                     // 7093
                                                                                                                     // 7094
        // Throw a BigNumber Error.                                                                                  // 7095
        function raise( caller, msg, val ) {                                                                         // 7096
            var error = new Error( [                                                                                 // 7097
                'new BigNumber',     // 0                                                                            // 7098
                'cmp',               // 1                                                                            // 7099
                'config',            // 2                                                                            // 7100
                'div',               // 3                                                                            // 7101
                'divToInt',          // 4                                                                            // 7102
                'eq',                // 5                                                                            // 7103
                'gt',                // 6                                                                            // 7104
                'gte',               // 7                                                                            // 7105
                'lt',                // 8                                                                            // 7106
                'lte',               // 9                                                                            // 7107
                'minus',             // 10                                                                           // 7108
                'mod',               // 11                                                                           // 7109
                'plus',              // 12                                                                           // 7110
                'precision',         // 13                                                                           // 7111
                'random',            // 14                                                                           // 7112
                'round',             // 15                                                                           // 7113
                'shift',             // 16                                                                           // 7114
                'times',             // 17                                                                           // 7115
                'toDigits',          // 18                                                                           // 7116
                'toExponential',     // 19                                                                           // 7117
                'toFixed',           // 20                                                                           // 7118
                'toFormat',          // 21                                                                           // 7119
                'toFraction',        // 22                                                                           // 7120
                'pow',               // 23                                                                           // 7121
                'toPrecision',       // 24                                                                           // 7122
                'toString',          // 25                                                                           // 7123
                'BigNumber'          // 26                                                                           // 7124
            ][caller] + '() ' + msg + ': ' + val );                                                                  // 7125
                                                                                                                     // 7126
            error.name = 'BigNumber Error';                                                                          // 7127
            id = 0;                                                                                                  // 7128
            throw error;                                                                                             // 7129
        }                                                                                                            // 7130
                                                                                                                     // 7131
                                                                                                                     // 7132
        /*                                                                                                           // 7133
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                       // 7134
         * If r is truthy, it is known that there are more digits after the rounding digit.                          // 7135
         */                                                                                                          // 7136
        function round( x, sd, rm, r ) {                                                                             // 7137
            var d, i, j, k, n, ni, rd,                                                                               // 7138
                xc = x.c,                                                                                            // 7139
                pows10 = POWS_TEN;                                                                                   // 7140
                                                                                                                     // 7141
            // if x is not Infinity or NaN...                                                                        // 7142
            if (xc) {                                                                                                // 7143
                                                                                                                     // 7144
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                  // 7145
                // n is a base 1e14 number, the value of the element of array x.c containing rd.                     // 7146
                // ni is the index of n within x.c.                                                                  // 7147
                // d is the number of digits of n.                                                                   // 7148
                // i is the index of rd within n including leading zeros.                                            // 7149
                // j is the actual index of rd within n (if < 0, rd is a leading zero).                              // 7150
                out: {                                                                                               // 7151
                                                                                                                     // 7152
                    // Get the number of digits of the first element of xc.                                          // 7153
                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                 // 7154
                    i = sd - d;                                                                                      // 7155
                                                                                                                     // 7156
                    // If the rounding digit is in the first element of xc...                                        // 7157
                    if ( i < 0 ) {                                                                                   // 7158
                        i += LOG_BASE;                                                                               // 7159
                        j = sd;                                                                                      // 7160
                        n = xc[ ni = 0 ];                                                                            // 7161
                                                                                                                     // 7162
                        // Get the rounding digit at index j of n.                                                   // 7163
                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                       // 7164
                    } else {                                                                                         // 7165
                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                       // 7166
                                                                                                                     // 7167
                        if ( ni >= xc.length ) {                                                                     // 7168
                                                                                                                     // 7169
                            if (r) {                                                                                 // 7170
                                                                                                                     // 7171
                                // Needed by sqrt.                                                                   // 7172
                                for ( ; xc.length <= ni; xc.push(0) );                                               // 7173
                                n = rd = 0;                                                                          // 7174
                                d = 1;                                                                               // 7175
                                i %= LOG_BASE;                                                                       // 7176
                                j = i - LOG_BASE + 1;                                                                // 7177
                            } else {                                                                                 // 7178
                                break out;                                                                           // 7179
                            }                                                                                        // 7180
                        } else {                                                                                     // 7181
                            n = k = xc[ni];                                                                          // 7182
                                                                                                                     // 7183
                            // Get the number of digits of n.                                                        // 7184
                            for ( d = 1; k >= 10; k /= 10, d++ );                                                    // 7185
                                                                                                                     // 7186
                            // Get the index of rd within n.                                                         // 7187
                            i %= LOG_BASE;                                                                           // 7188
                                                                                                                     // 7189
                            // Get the index of rd within n, adjusted for leading zeros.                             // 7190
                            // The number of leading zeros of n is given by LOG_BASE - d.                            // 7191
                            j = i - LOG_BASE + d;                                                                    // 7192
                                                                                                                     // 7193
                            // Get the rounding digit at index j of n.                                               // 7194
                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                       // 7195
                        }                                                                                            // 7196
                    }                                                                                                // 7197
                                                                                                                     // 7198
                    r = r || sd < 0 ||                                                                               // 7199
                                                                                                                     // 7200
                    // Are there any non-zero digits after the rounding digit?                                       // 7201
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                 // 7202
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                  // 7203
                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                 // 7204
                                                                                                                     // 7205
                    r = rm < 4                                                                                       // 7206
                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                      // 7207
                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                            // 7208
                                                                                                                     // 7209
                        // Check whether the digit to the left of the rounding digit is odd.                         // 7210
                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                     // 7211
                          rm == ( x.s < 0 ? 8 : 7 ) );                                                               // 7212
                                                                                                                     // 7213
                    if ( sd < 1 || !xc[0] ) {                                                                        // 7214
                        xc.length = 0;                                                                               // 7215
                                                                                                                     // 7216
                        if (r) {                                                                                     // 7217
                                                                                                                     // 7218
                            // Convert sd to decimal places.                                                         // 7219
                            sd -= x.e + 1;                                                                           // 7220
                                                                                                                     // 7221
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                      // 7222
                            xc[0] = pows10[ sd % LOG_BASE ];                                                         // 7223
                            x.e = -sd || 0;                                                                          // 7224
                        } else {                                                                                     // 7225
                                                                                                                     // 7226
                            // Zero.                                                                                 // 7227
                            xc[0] = x.e = 0;                                                                         // 7228
                        }                                                                                            // 7229
                                                                                                                     // 7230
                        return x;                                                                                    // 7231
                    }                                                                                                // 7232
                                                                                                                     // 7233
                    // Remove excess digits.                                                                         // 7234
                    if ( i == 0 ) {                                                                                  // 7235
                        xc.length = ni;                                                                              // 7236
                        k = 1;                                                                                       // 7237
                        ni--;                                                                                        // 7238
                    } else {                                                                                         // 7239
                        xc.length = ni + 1;                                                                          // 7240
                        k = pows10[ LOG_BASE - i ];                                                                  // 7241
                                                                                                                     // 7242
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                      // 7243
                        // j > 0 means i > number of leading zeros of n.                                             // 7244
                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                       // 7245
                    }                                                                                                // 7246
                                                                                                                     // 7247
                    // Round up?                                                                                     // 7248
                    if (r) {                                                                                         // 7249
                                                                                                                     // 7250
                        for ( ; ; ) {                                                                                // 7251
                                                                                                                     // 7252
                            // If the digit to be rounded up is in the first element of xc...                        // 7253
                            if ( ni == 0 ) {                                                                         // 7254
                                                                                                                     // 7255
                                // i will be the length of xc[0] before k is added.                                  // 7256
                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                     // 7257
                                j = xc[0] += k;                                                                      // 7258
                                for ( k = 1; j >= 10; j /= 10, k++ );                                                // 7259
                                                                                                                     // 7260
                                // if i != k the length has increased.                                               // 7261
                                if ( i != k ) {                                                                      // 7262
                                    x.e++;                                                                           // 7263
                                    if ( xc[0] == BASE ) xc[0] = 1;                                                  // 7264
                                }                                                                                    // 7265
                                                                                                                     // 7266
                                break;                                                                               // 7267
                            } else {                                                                                 // 7268
                                xc[ni] += k;                                                                         // 7269
                                if ( xc[ni] != BASE ) break;                                                         // 7270
                                xc[ni--] = 0;                                                                        // 7271
                                k = 1;                                                                               // 7272
                            }                                                                                        // 7273
                        }                                                                                            // 7274
                    }                                                                                                // 7275
                                                                                                                     // 7276
                    // Remove trailing zeros.                                                                        // 7277
                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                  // 7278
                }                                                                                                    // 7279
                                                                                                                     // 7280
                // Overflow? Infinity.                                                                               // 7281
                if ( x.e > MAX_EXP ) {                                                                               // 7282
                    x.c = x.e = null;                                                                                // 7283
                                                                                                                     // 7284
                // Underflow? Zero.                                                                                  // 7285
                } else if ( x.e < MIN_EXP ) {                                                                        // 7286
                    x.c = [ x.e = 0 ];                                                                               // 7287
                }                                                                                                    // 7288
            }                                                                                                        // 7289
                                                                                                                     // 7290
            return x;                                                                                                // 7291
        }                                                                                                            // 7292
                                                                                                                     // 7293
                                                                                                                     // 7294
        // PROTOTYPE/INSTANCE METHODS                                                                                // 7295
                                                                                                                     // 7296
                                                                                                                     // 7297
        /*                                                                                                           // 7298
         * Return a new BigNumber whose value is the absolute value of this BigNumber.                               // 7299
         */                                                                                                          // 7300
        P.absoluteValue = P.abs = function () {                                                                      // 7301
            var x = new BigNumber(this);                                                                             // 7302
            if ( x.s < 0 ) x.s = 1;                                                                                  // 7303
            return x;                                                                                                // 7304
        };                                                                                                           // 7305
                                                                                                                     // 7306
                                                                                                                     // 7307
        /*                                                                                                           // 7308
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                      // 7309
         * number in the direction of Infinity.                                                                      // 7310
         */                                                                                                          // 7311
        P.ceil = function () {                                                                                       // 7312
            return round( new BigNumber(this), this.e + 1, 2 );                                                      // 7313
        };                                                                                                           // 7314
                                                                                                                     // 7315
                                                                                                                     // 7316
        /*                                                                                                           // 7317
         * Return                                                                                                    // 7318
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                            // 7319
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                              // 7320
         * 0 if they have the same value,                                                                            // 7321
         * or null if the value of either is NaN.                                                                    // 7322
         */                                                                                                          // 7323
        P.comparedTo = P.cmp = function ( y, b ) {                                                                   // 7324
            id = 1;                                                                                                  // 7325
            return compare( this, new BigNumber( y, b ) );                                                           // 7326
        };                                                                                                           // 7327
                                                                                                                     // 7328
                                                                                                                     // 7329
        /*                                                                                                           // 7330
         * Return the number of decimal places of the value of this BigNumber, or null if the value                  // 7331
         * of this BigNumber is ±Infinity or NaN.                                                                    // 7332
         */                                                                                                          // 7333
        P.decimalPlaces = P.dp = function () {                                                                       // 7334
            var n, v,                                                                                                // 7335
                c = this.c;                                                                                          // 7336
                                                                                                                     // 7337
            if ( !c ) return null;                                                                                   // 7338
            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                 // 7339
                                                                                                                     // 7340
            // Subtract the number of trailing zeros of the last number.                                             // 7341
            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                     // 7342
            if ( n < 0 ) n = 0;                                                                                      // 7343
                                                                                                                     // 7344
            return n;                                                                                                // 7345
        };                                                                                                           // 7346
                                                                                                                     // 7347
                                                                                                                     // 7348
        /*                                                                                                           // 7349
         *  n / 0 = I                                                                                                // 7350
         *  n / N = N                                                                                                // 7351
         *  n / I = 0                                                                                                // 7352
         *  0 / n = 0                                                                                                // 7353
         *  0 / 0 = N                                                                                                // 7354
         *  0 / N = N                                                                                                // 7355
         *  0 / I = 0                                                                                                // 7356
         *  N / n = N                                                                                                // 7357
         *  N / 0 = N                                                                                                // 7358
         *  N / N = N                                                                                                // 7359
         *  N / I = N                                                                                                // 7360
         *  I / n = I                                                                                                // 7361
         *  I / 0 = I                                                                                                // 7362
         *  I / N = N                                                                                                // 7363
         *  I / I = N                                                                                                // 7364
         *                                                                                                           // 7365
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                 // 7366
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                   // 7367
         */                                                                                                          // 7368
        P.dividedBy = P.div = function ( y, b ) {                                                                    // 7369
            id = 3;                                                                                                  // 7370
            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                // 7371
        };                                                                                                           // 7372
                                                                                                                     // 7373
                                                                                                                     // 7374
        /*                                                                                                           // 7375
         * Return a new BigNumber whose value is the integer part of dividing the value of this                      // 7376
         * BigNumber by the value of BigNumber(y, b).                                                                // 7377
         */                                                                                                          // 7378
        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                      // 7379
            id = 4;                                                                                                  // 7380
            return div( this, new BigNumber( y, b ), 0, 1 );                                                         // 7381
        };                                                                                                           // 7382
                                                                                                                     // 7383
                                                                                                                     // 7384
        /*                                                                                                           // 7385
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                      // 7386
         * otherwise returns false.                                                                                  // 7387
         */                                                                                                          // 7388
        P.equals = P.eq = function ( y, b ) {                                                                        // 7389
            id = 5;                                                                                                  // 7390
            return compare( this, new BigNumber( y, b ) ) === 0;                                                     // 7391
        };                                                                                                           // 7392
                                                                                                                     // 7393
                                                                                                                     // 7394
        /*                                                                                                           // 7395
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                      // 7396
         * number in the direction of -Infinity.                                                                     // 7397
         */                                                                                                          // 7398
        P.floor = function () {                                                                                      // 7399
            return round( new BigNumber(this), this.e + 1, 3 );                                                      // 7400
        };                                                                                                           // 7401
                                                                                                                     // 7402
                                                                                                                     // 7403
        /*                                                                                                           // 7404
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                  // 7405
         * otherwise returns false.                                                                                  // 7406
         */                                                                                                          // 7407
        P.greaterThan = P.gt = function ( y, b ) {                                                                   // 7408
            id = 6;                                                                                                  // 7409
            return compare( this, new BigNumber( y, b ) ) > 0;                                                       // 7410
        };                                                                                                           // 7411
                                                                                                                     // 7412
                                                                                                                     // 7413
        /*                                                                                                           // 7414
         * Return true if the value of this BigNumber is greater than or equal to the value of                       // 7415
         * BigNumber(y, b), otherwise returns false.                                                                 // 7416
         */                                                                                                          // 7417
        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                         // 7418
            id = 7;                                                                                                  // 7419
            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                  // 7420
                                                                                                                     // 7421
        };                                                                                                           // 7422
                                                                                                                     // 7423
                                                                                                                     // 7424
        /*                                                                                                           // 7425
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                   // 7426
         */                                                                                                          // 7427
        P.isFinite = function () {                                                                                   // 7428
            return !!this.c;                                                                                         // 7429
        };                                                                                                           // 7430
                                                                                                                     // 7431
                                                                                                                     // 7432
        /*                                                                                                           // 7433
         * Return true if the value of this BigNumber is an integer, otherwise return false.                         // 7434
         */                                                                                                          // 7435
        P.isInteger = P.isInt = function () {                                                                        // 7436
            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                    // 7437
        };                                                                                                           // 7438
                                                                                                                     // 7439
                                                                                                                     // 7440
        /*                                                                                                           // 7441
         * Return true if the value of this BigNumber is NaN, otherwise returns false.                               // 7442
         */                                                                                                          // 7443
        P.isNaN = function () {                                                                                      // 7444
            return !this.s;                                                                                          // 7445
        };                                                                                                           // 7446
                                                                                                                     // 7447
                                                                                                                     // 7448
        /*                                                                                                           // 7449
         * Return true if the value of this BigNumber is negative, otherwise returns false.                          // 7450
         */                                                                                                          // 7451
        P.isNegative = P.isNeg = function () {                                                                       // 7452
            return this.s < 0;                                                                                       // 7453
        };                                                                                                           // 7454
                                                                                                                     // 7455
                                                                                                                     // 7456
        /*                                                                                                           // 7457
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                           // 7458
         */                                                                                                          // 7459
        P.isZero = function () {                                                                                     // 7460
            return !!this.c && this.c[0] == 0;                                                                       // 7461
        };                                                                                                           // 7462
                                                                                                                     // 7463
                                                                                                                     // 7464
        /*                                                                                                           // 7465
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                     // 7466
         * otherwise returns false.                                                                                  // 7467
         */                                                                                                          // 7468
        P.lessThan = P.lt = function ( y, b ) {                                                                      // 7469
            id = 8;                                                                                                  // 7470
            return compare( this, new BigNumber( y, b ) ) < 0;                                                       // 7471
        };                                                                                                           // 7472
                                                                                                                     // 7473
                                                                                                                     // 7474
        /*                                                                                                           // 7475
         * Return true if the value of this BigNumber is less than or equal to the value of                          // 7476
         * BigNumber(y, b), otherwise returns false.                                                                 // 7477
         */                                                                                                          // 7478
        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                            // 7479
            id = 9;                                                                                                  // 7480
            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                 // 7481
        };                                                                                                           // 7482
                                                                                                                     // 7483
                                                                                                                     // 7484
        /*                                                                                                           // 7485
         *  n - 0 = n                                                                                                // 7486
         *  n - N = N                                                                                                // 7487
         *  n - I = -I                                                                                               // 7488
         *  0 - n = -n                                                                                               // 7489
         *  0 - 0 = 0                                                                                                // 7490
         *  0 - N = N                                                                                                // 7491
         *  0 - I = -I                                                                                               // 7492
         *  N - n = N                                                                                                // 7493
         *  N - 0 = N                                                                                                // 7494
         *  N - N = N                                                                                                // 7495
         *  N - I = N                                                                                                // 7496
         *  I - n = I                                                                                                // 7497
         *  I - 0 = I                                                                                                // 7498
         *  I - N = N                                                                                                // 7499
         *  I - I = N                                                                                                // 7500
         *                                                                                                           // 7501
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                      // 7502
         * BigNumber(y, b).                                                                                          // 7503
         */                                                                                                          // 7504
        P.minus = P.sub = function ( y, b ) {                                                                        // 7505
            var i, j, t, xLTy,                                                                                       // 7506
                x = this,                                                                                            // 7507
                a = x.s;                                                                                             // 7508
                                                                                                                     // 7509
            id = 10;                                                                                                 // 7510
            y = new BigNumber( y, b );                                                                               // 7511
            b = y.s;                                                                                                 // 7512
                                                                                                                     // 7513
            // Either NaN?                                                                                           // 7514
            if ( !a || !b ) return new BigNumber(NaN);                                                               // 7515
                                                                                                                     // 7516
            // Signs differ?                                                                                         // 7517
            if ( a != b ) {                                                                                          // 7518
                y.s = -b;                                                                                            // 7519
                return x.plus(y);                                                                                    // 7520
            }                                                                                                        // 7521
                                                                                                                     // 7522
            var xe = x.e / LOG_BASE,                                                                                 // 7523
                ye = y.e / LOG_BASE,                                                                                 // 7524
                xc = x.c,                                                                                            // 7525
                yc = y.c;                                                                                            // 7526
                                                                                                                     // 7527
            if ( !xe || !ye ) {                                                                                      // 7528
                                                                                                                     // 7529
                // Either Infinity?                                                                                  // 7530
                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                       // 7531
                                                                                                                     // 7532
                // Either zero?                                                                                      // 7533
                if ( !xc[0] || !yc[0] ) {                                                                            // 7534
                                                                                                                     // 7535
                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                      // 7536
                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                      // 7537
                                                                                                                     // 7538
                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                  // 7539
                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                 // 7540
                }                                                                                                    // 7541
            }                                                                                                        // 7542
                                                                                                                     // 7543
            xe = bitFloor(xe);                                                                                       // 7544
            ye = bitFloor(ye);                                                                                       // 7545
            xc = xc.slice();                                                                                         // 7546
                                                                                                                     // 7547
            // Determine which is the bigger number.                                                                 // 7548
            if ( a = xe - ye ) {                                                                                     // 7549
                                                                                                                     // 7550
                if ( xLTy = a < 0 ) {                                                                                // 7551
                    a = -a;                                                                                          // 7552
                    t = xc;                                                                                          // 7553
                } else {                                                                                             // 7554
                    ye = xe;                                                                                         // 7555
                    t = yc;                                                                                          // 7556
                }                                                                                                    // 7557
                                                                                                                     // 7558
                t.reverse();                                                                                         // 7559
                                                                                                                     // 7560
                // Prepend zeros to equalise exponents.                                                              // 7561
                for ( b = a; b--; t.push(0) );                                                                       // 7562
                t.reverse();                                                                                         // 7563
            } else {                                                                                                 // 7564
                                                                                                                     // 7565
                // Exponents equal. Check digit by digit.                                                            // 7566
                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                        // 7567
                                                                                                                     // 7568
                for ( a = b = 0; b < j; b++ ) {                                                                      // 7569
                                                                                                                     // 7570
                    if ( xc[b] != yc[b] ) {                                                                          // 7571
                        xLTy = xc[b] < yc[b];                                                                        // 7572
                        break;                                                                                       // 7573
                    }                                                                                                // 7574
                }                                                                                                    // 7575
            }                                                                                                        // 7576
                                                                                                                     // 7577
            // x < y? Point xc to the array of the bigger number.                                                    // 7578
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                           // 7579
                                                                                                                     // 7580
            b = ( j = yc.length ) - ( i = xc.length );                                                               // 7581
                                                                                                                     // 7582
            // Append zeros to xc if shorter.                                                                        // 7583
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                   // 7584
            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                 // 7585
            b = BASE - 1;                                                                                            // 7586
                                                                                                                     // 7587
            // Subtract yc from xc.                                                                                  // 7588
            for ( ; j > a; ) {                                                                                       // 7589
                                                                                                                     // 7590
                if ( xc[--j] < yc[j] ) {                                                                             // 7591
                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                         // 7592
                    --xc[i];                                                                                         // 7593
                    xc[j] += BASE;                                                                                   // 7594
                }                                                                                                    // 7595
                                                                                                                     // 7596
                xc[j] -= yc[j];                                                                                      // 7597
            }                                                                                                        // 7598
                                                                                                                     // 7599
            // Remove leading zeros and adjust exponent accordingly.                                                 // 7600
            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                  // 7601
                                                                                                                     // 7602
            // Zero?                                                                                                 // 7603
            if ( !xc[0] ) {                                                                                          // 7604
                                                                                                                     // 7605
                // Following IEEE 754 (2008) 6.3,                                                                    // 7606
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                     // 7607
                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                   // 7608
                y.c = [ y.e = 0 ];                                                                                   // 7609
                return y;                                                                                            // 7610
            }                                                                                                        // 7611
                                                                                                                     // 7612
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                           // 7613
            // for finite x and y.                                                                                   // 7614
            return normalise( y, xc, ye );                                                                           // 7615
        };                                                                                                           // 7616
                                                                                                                     // 7617
                                                                                                                     // 7618
        /*                                                                                                           // 7619
         *   n % 0 =  N                                                                                              // 7620
         *   n % N =  N                                                                                              // 7621
         *   n % I =  n                                                                                              // 7622
         *   0 % n =  0                                                                                              // 7623
         *  -0 % n = -0                                                                                              // 7624
         *   0 % 0 =  N                                                                                              // 7625
         *   0 % N =  N                                                                                              // 7626
         *   0 % I =  0                                                                                              // 7627
         *   N % n =  N                                                                                              // 7628
         *   N % 0 =  N                                                                                              // 7629
         *   N % N =  N                                                                                              // 7630
         *   N % I =  N                                                                                              // 7631
         *   I % n =  N                                                                                              // 7632
         *   I % 0 =  N                                                                                              // 7633
         *   I % N =  N                                                                                              // 7634
         *   I % I =  N                                                                                              // 7635
         *                                                                                                           // 7636
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                     // 7637
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                          // 7638
         */                                                                                                          // 7639
        P.modulo = P.mod = function ( y, b ) {                                                                       // 7640
            var q, s,                                                                                                // 7641
                x = this;                                                                                            // 7642
                                                                                                                     // 7643
            id = 11;                                                                                                 // 7644
            y = new BigNumber( y, b );                                                                               // 7645
                                                                                                                     // 7646
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                              // 7647
            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                  // 7648
                return new BigNumber(NaN);                                                                           // 7649
                                                                                                                     // 7650
            // Return x if y is Infinity or x is zero.                                                               // 7651
            } else if ( !y.c || x.c && !x.c[0] ) {                                                                   // 7652
                return new BigNumber(x);                                                                             // 7653
            }                                                                                                        // 7654
                                                                                                                     // 7655
            if ( MODULO_MODE == 9 ) {                                                                                // 7656
                                                                                                                     // 7657
                // Euclidian division: q = sign(y) * floor(x / abs(y))                                               // 7658
                // r = x - qy    where  0 <= r < abs(y)                                                              // 7659
                s = y.s;                                                                                             // 7660
                y.s = 1;                                                                                             // 7661
                q = div( x, y, 0, 3 );                                                                               // 7662
                y.s = s;                                                                                             // 7663
                q.s *= s;                                                                                            // 7664
            } else {                                                                                                 // 7665
                q = div( x, y, 0, MODULO_MODE );                                                                     // 7666
            }                                                                                                        // 7667
                                                                                                                     // 7668
            return x.minus( q.times(y) );                                                                            // 7669
        };                                                                                                           // 7670
                                                                                                                     // 7671
                                                                                                                     // 7672
        /*                                                                                                           // 7673
         * Return a new BigNumber whose value is the value of this BigNumber negated,                                // 7674
         * i.e. multiplied by -1.                                                                                    // 7675
         */                                                                                                          // 7676
        P.negated = P.neg = function () {                                                                            // 7677
            var x = new BigNumber(this);                                                                             // 7678
            x.s = -x.s || null;                                                                                      // 7679
            return x;                                                                                                // 7680
        };                                                                                                           // 7681
                                                                                                                     // 7682
                                                                                                                     // 7683
        /*                                                                                                           // 7684
         *  n + 0 = n                                                                                                // 7685
         *  n + N = N                                                                                                // 7686
         *  n + I = I                                                                                                // 7687
         *  0 + n = n                                                                                                // 7688
         *  0 + 0 = 0                                                                                                // 7689
         *  0 + N = N                                                                                                // 7690
         *  0 + I = I                                                                                                // 7691
         *  N + n = N                                                                                                // 7692
         *  N + 0 = N                                                                                                // 7693
         *  N + N = N                                                                                                // 7694
         *  N + I = N                                                                                                // 7695
         *  I + n = I                                                                                                // 7696
         *  I + 0 = I                                                                                                // 7697
         *  I + N = N                                                                                                // 7698
         *  I + I = I                                                                                                // 7699
         *                                                                                                           // 7700
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                       // 7701
         * BigNumber(y, b).                                                                                          // 7702
         */                                                                                                          // 7703
        P.plus = P.add = function ( y, b ) {                                                                         // 7704
            var t,                                                                                                   // 7705
                x = this,                                                                                            // 7706
                a = x.s;                                                                                             // 7707
                                                                                                                     // 7708
            id = 12;                                                                                                 // 7709
            y = new BigNumber( y, b );                                                                               // 7710
            b = y.s;                                                                                                 // 7711
                                                                                                                     // 7712
            // Either NaN?                                                                                           // 7713
            if ( !a || !b ) return new BigNumber(NaN);                                                               // 7714
                                                                                                                     // 7715
            // Signs differ?                                                                                         // 7716
             if ( a != b ) {                                                                                         // 7717
                y.s = -b;                                                                                            // 7718
                return x.minus(y);                                                                                   // 7719
            }                                                                                                        // 7720
                                                                                                                     // 7721
            var xe = x.e / LOG_BASE,                                                                                 // 7722
                ye = y.e / LOG_BASE,                                                                                 // 7723
                xc = x.c,                                                                                            // 7724
                yc = y.c;                                                                                            // 7725
                                                                                                                     // 7726
            if ( !xe || !ye ) {                                                                                      // 7727
                                                                                                                     // 7728
                // Return ±Infinity if either ±Infinity.                                                             // 7729
                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                     // 7730
                                                                                                                     // 7731
                // Either zero?                                                                                      // 7732
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                          // 7733
                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                       // 7734
            }                                                                                                        // 7735
                                                                                                                     // 7736
            xe = bitFloor(xe);                                                                                       // 7737
            ye = bitFloor(ye);                                                                                       // 7738
            xc = xc.slice();                                                                                         // 7739
                                                                                                                     // 7740
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                          // 7741
            if ( a = xe - ye ) {                                                                                     // 7742
                if ( a > 0 ) {                                                                                       // 7743
                    ye = xe;                                                                                         // 7744
                    t = yc;                                                                                          // 7745
                } else {                                                                                             // 7746
                    a = -a;                                                                                          // 7747
                    t = xc;                                                                                          // 7748
                }                                                                                                    // 7749
                                                                                                                     // 7750
                t.reverse();                                                                                         // 7751
                for ( ; a--; t.push(0) );                                                                            // 7752
                t.reverse();                                                                                         // 7753
            }                                                                                                        // 7754
                                                                                                                     // 7755
            a = xc.length;                                                                                           // 7756
            b = yc.length;                                                                                           // 7757
                                                                                                                     // 7758
            // Point xc to the longer array, and b to the shorter length.                                            // 7759
            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                         // 7760
                                                                                                                     // 7761
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                        // 7762
            for ( a = 0; b; ) {                                                                                      // 7763
                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                      // 7764
                xc[b] %= BASE;                                                                                       // 7765
            }                                                                                                        // 7766
                                                                                                                     // 7767
            if (a) {                                                                                                 // 7768
                xc.unshift(a);                                                                                       // 7769
                ++ye;                                                                                                // 7770
            }                                                                                                        // 7771
                                                                                                                     // 7772
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                            // 7773
            // ye = MAX_EXP + 1 possible                                                                             // 7774
            return normalise( y, xc, ye );                                                                           // 7775
        };                                                                                                           // 7776
                                                                                                                     // 7777
                                                                                                                     // 7778
        /*                                                                                                           // 7779
         * Return the number of significant digits of the value of this BigNumber.                                   // 7780
         *                                                                                                           // 7781
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                   // 7782
         */                                                                                                          // 7783
        P.precision = P.sd = function (z) {                                                                          // 7784
            var n, v,                                                                                                // 7785
                x = this,                                                                                            // 7786
                c = x.c;                                                                                             // 7787
                                                                                                                     // 7788
            // 'precision() argument not a boolean or binary digit: {z}'                                             // 7789
            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                    // 7790
                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                    // 7791
                if ( z != !!z ) z = null;                                                                            // 7792
            }                                                                                                        // 7793
                                                                                                                     // 7794
            if ( !c ) return null;                                                                                   // 7795
            v = c.length - 1;                                                                                        // 7796
            n = v * LOG_BASE + 1;                                                                                    // 7797
                                                                                                                     // 7798
            if ( v = c[v] ) {                                                                                        // 7799
                                                                                                                     // 7800
                // Subtract the number of trailing zeros of the last element.                                        // 7801
                for ( ; v % 10 == 0; v /= 10, n-- );                                                                 // 7802
                                                                                                                     // 7803
                // Add the number of digits of the first element.                                                    // 7804
                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                             // 7805
            }                                                                                                        // 7806
                                                                                                                     // 7807
            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                     // 7808
                                                                                                                     // 7809
            return n;                                                                                                // 7810
        };                                                                                                           // 7811
                                                                                                                     // 7812
                                                                                                                     // 7813
        /*                                                                                                           // 7814
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                 // 7815
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                       // 7816
         * omitted.                                                                                                  // 7817
         *                                                                                                           // 7818
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                // 7819
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                   // 7820
         *                                                                                                           // 7821
         * 'round() decimal places out of range: {dp}'                                                               // 7822
         * 'round() decimal places not an integer: {dp}'                                                             // 7823
         * 'round() rounding mode not an integer: {rm}'                                                              // 7824
         * 'round() rounding mode out of range: {rm}'                                                                // 7825
         */                                                                                                          // 7826
        P.round = function ( dp, rm ) {                                                                              // 7827
            var n = new BigNumber(this);                                                                             // 7828
                                                                                                                     // 7829
            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                      // 7830
                round( n, ~~dp + this.e + 1, rm == null ||                                                           // 7831
                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                              // 7832
            }                                                                                                        // 7833
                                                                                                                     // 7834
            return n;                                                                                                // 7835
        };                                                                                                           // 7836
                                                                                                                     // 7837
                                                                                                                     // 7838
        /*                                                                                                           // 7839
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                     // 7840
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                    // 7841
         *                                                                                                           // 7842
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                      // 7843
         *                                                                                                           // 7844
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                    // 7845
         * otherwise.                                                                                                // 7846
         *                                                                                                           // 7847
         * 'shift() argument not an integer: {k}'                                                                    // 7848
         * 'shift() argument out of range: {k}'                                                                      // 7849
         */                                                                                                          // 7850
        P.shift = function (k) {                                                                                     // 7851
            var n = this;                                                                                            // 7852
            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                              // 7853
                                                                                                                     // 7854
              // k < 1e+21, or truncate(k) will produce exponential notation.                                        // 7855
              ? n.times( '1e' + truncate(k) )                                                                        // 7856
              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                    // 7857
                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                        // 7858
                : n );                                                                                               // 7859
        };                                                                                                           // 7860
                                                                                                                     // 7861
                                                                                                                     // 7862
        /*                                                                                                           // 7863
         *  sqrt(-n) =  N                                                                                            // 7864
         *  sqrt( N) =  N                                                                                            // 7865
         *  sqrt(-I) =  N                                                                                            // 7866
         *  sqrt( I) =  I                                                                                            // 7867
         *  sqrt( 0) =  0                                                                                            // 7868
         *  sqrt(-0) = -0                                                                                            // 7869
         *                                                                                                           // 7870
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                     // 7871
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                    // 7872
         */                                                                                                          // 7873
        P.squareRoot = P.sqrt = function () {                                                                        // 7874
            var m, n, r, rep, t,                                                                                     // 7875
                x = this,                                                                                            // 7876
                c = x.c,                                                                                             // 7877
                s = x.s,                                                                                             // 7878
                e = x.e,                                                                                             // 7879
                dp = DECIMAL_PLACES + 4,                                                                             // 7880
                half = new BigNumber('0.5');                                                                         // 7881
                                                                                                                     // 7882
            // Negative/NaN/Infinity/zero?                                                                           // 7883
            if ( s !== 1 || !c || !c[0] ) {                                                                          // 7884
                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                         // 7885
            }                                                                                                        // 7886
                                                                                                                     // 7887
            // Initial estimate.                                                                                     // 7888
            s = Math.sqrt( +x );                                                                                     // 7889
                                                                                                                     // 7890
            // Math.sqrt underflow/overflow?                                                                         // 7891
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                               // 7892
            if ( s == 0 || s == 1 / 0 ) {                                                                            // 7893
                n = coeffToString(c);                                                                                // 7894
                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                           // 7895
                s = Math.sqrt(n);                                                                                    // 7896
                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                  // 7897
                                                                                                                     // 7898
                if ( s == 1 / 0 ) {                                                                                  // 7899
                    n = '1e' + e;                                                                                    // 7900
                } else {                                                                                             // 7901
                    n = s.toExponential();                                                                           // 7902
                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                        // 7903
                }                                                                                                    // 7904
                                                                                                                     // 7905
                r = new BigNumber(n);                                                                                // 7906
            } else {                                                                                                 // 7907
                r = new BigNumber( s + '' );                                                                         // 7908
            }                                                                                                        // 7909
                                                                                                                     // 7910
            // Check for zero.                                                                                       // 7911
            // r could be zero if MIN_EXP is changed after the this value was created.                               // 7912
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                 // 7913
            // coeffToString to throw.                                                                               // 7914
            if ( r.c[0] ) {                                                                                          // 7915
                e = r.e;                                                                                             // 7916
                s = e + dp;                                                                                          // 7917
                if ( s < 3 ) s = 0;                                                                                  // 7918
                                                                                                                     // 7919
                // Newton-Raphson iteration.                                                                         // 7920
                for ( ; ; ) {                                                                                        // 7921
                    t = r;                                                                                           // 7922
                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                  // 7923
                                                                                                                     // 7924
                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                              // 7925
                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                    // 7926
                                                                                                                     // 7927
                        // The exponent of r may here be one less than the final result exponent,                    // 7928
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                   // 7929
                        // are indexed correctly.                                                                    // 7930
                        if ( r.e < e ) --s;                                                                          // 7931
                        n = n.slice( s - 3, s + 1 );                                                                 // 7932
                                                                                                                     // 7933
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                  // 7934
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                      // 7935
                        // iteration.                                                                                // 7936
                        if ( n == '9999' || !rep && n == '4999' ) {                                                  // 7937
                                                                                                                     // 7938
                            // On the first iteration only, check to see if rounding up gives the                    // 7939
                            // exact result as the nines may infinitely repeat.                                      // 7940
                            if ( !rep ) {                                                                            // 7941
                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                             // 7942
                                                                                                                     // 7943
                                if ( t.times(t).eq(x) ) {                                                            // 7944
                                    r = t;                                                                           // 7945
                                    break;                                                                           // 7946
                                }                                                                                    // 7947
                            }                                                                                        // 7948
                                                                                                                     // 7949
                            dp += 4;                                                                                 // 7950
                            s += 4;                                                                                  // 7951
                            rep = 1;                                                                                 // 7952
                        } else {                                                                                     // 7953
                                                                                                                     // 7954
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                       // 7955
                            // result. If not, then there are further digits and m will be truthy.                   // 7956
                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                       // 7957
                                                                                                                     // 7958
                                // Truncate to the first rounding digit.                                             // 7959
                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                             // 7960
                                m = !r.times(r).eq(x);                                                               // 7961
                            }                                                                                        // 7962
                                                                                                                     // 7963
                            break;                                                                                   // 7964
                        }                                                                                            // 7965
                    }                                                                                                // 7966
                }                                                                                                    // 7967
            }                                                                                                        // 7968
                                                                                                                     // 7969
            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                           // 7970
        };                                                                                                           // 7971
                                                                                                                     // 7972
                                                                                                                     // 7973
        /*                                                                                                           // 7974
         *  n * 0 = 0                                                                                                // 7975
         *  n * N = N                                                                                                // 7976
         *  n * I = I                                                                                                // 7977
         *  0 * n = 0                                                                                                // 7978
         *  0 * 0 = 0                                                                                                // 7979
         *  0 * N = N                                                                                                // 7980
         *  0 * I = N                                                                                                // 7981
         *  N * n = N                                                                                                // 7982
         *  N * 0 = N                                                                                                // 7983
         *  N * N = N                                                                                                // 7984
         *  N * I = N                                                                                                // 7985
         *  I * n = I                                                                                                // 7986
         *  I * 0 = N                                                                                                // 7987
         *  I * N = N                                                                                                // 7988
         *  I * I = I                                                                                                // 7989
         *                                                                                                           // 7990
         * Return a new BigNumber whose value is the value of this BigNumber times the value of                      // 7991
         * BigNumber(y, b).                                                                                          // 7992
         */                                                                                                          // 7993
        P.times = P.mul = function ( y, b ) {                                                                        // 7994
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                  // 7995
                base, sqrtBase,                                                                                      // 7996
                x = this,                                                                                            // 7997
                xc = x.c,                                                                                            // 7998
                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                       // 7999
                                                                                                                     // 8000
            // Either NaN, ±Infinity or ±0?                                                                          // 8001
            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                  // 8002
                                                                                                                     // 8003
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                               // 8004
                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                  // 8005
                    y.c = y.e = y.s = null;                                                                          // 8006
                } else {                                                                                             // 8007
                    y.s *= x.s;                                                                                      // 8008
                                                                                                                     // 8009
                    // Return ±Infinity if either is ±Infinity.                                                      // 8010
                    if ( !xc || !yc ) {                                                                              // 8011
                        y.c = y.e = null;                                                                            // 8012
                                                                                                                     // 8013
                    // Return ±0 if either is ±0.                                                                    // 8014
                    } else {                                                                                         // 8015
                        y.c = [0];                                                                                   // 8016
                        y.e = 0;                                                                                     // 8017
                    }                                                                                                // 8018
                }                                                                                                    // 8019
                                                                                                                     // 8020
                return y;                                                                                            // 8021
            }                                                                                                        // 8022
                                                                                                                     // 8023
            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                             // 8024
            y.s *= x.s;                                                                                              // 8025
            xcL = xc.length;                                                                                         // 8026
            ycL = yc.length;                                                                                         // 8027
                                                                                                                     // 8028
            // Ensure xc points to longer array and xcL to its length.                                               // 8029
            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                 // 8030
                                                                                                                     // 8031
            // Initialise the result array with zeros.                                                               // 8032
            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                         // 8033
                                                                                                                     // 8034
            base = BASE;                                                                                             // 8035
            sqrtBase = SQRT_BASE;                                                                                    // 8036
                                                                                                                     // 8037
            for ( i = ycL; --i >= 0; ) {                                                                             // 8038
                c = 0;                                                                                               // 8039
                ylo = yc[i] % sqrtBase;                                                                              // 8040
                yhi = yc[i] / sqrtBase | 0;                                                                          // 8041
                                                                                                                     // 8042
                for ( k = xcL, j = i + k; j > i; ) {                                                                 // 8043
                    xlo = xc[--k] % sqrtBase;                                                                        // 8044
                    xhi = xc[k] / sqrtBase | 0;                                                                      // 8045
                    m = yhi * xlo + xhi * ylo;                                                                       // 8046
                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                   // 8047
                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                       // 8048
                    zc[j--] = xlo % base;                                                                            // 8049
                }                                                                                                    // 8050
                                                                                                                     // 8051
                zc[j] = c;                                                                                           // 8052
            }                                                                                                        // 8053
                                                                                                                     // 8054
            if (c) {                                                                                                 // 8055
                ++e;                                                                                                 // 8056
            } else {                                                                                                 // 8057
                zc.shift();                                                                                          // 8058
            }                                                                                                        // 8059
                                                                                                                     // 8060
            return normalise( y, zc, e );                                                                            // 8061
        };                                                                                                           // 8062
                                                                                                                     // 8063
                                                                                                                     // 8064
        /*                                                                                                           // 8065
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                 // 8066
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                          // 8067
         *                                                                                                           // 8068
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                            // 8069
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                   // 8070
         *                                                                                                           // 8071
         * 'toDigits() precision out of range: {sd}'                                                                 // 8072
         * 'toDigits() precision not an integer: {sd}'                                                               // 8073
         * 'toDigits() rounding mode not an integer: {rm}'                                                           // 8074
         * 'toDigits() rounding mode out of range: {rm}'                                                             // 8075
         */                                                                                                          // 8076
        P.toDigits = function ( sd, rm ) {                                                                           // 8077
            var n = new BigNumber(this);                                                                             // 8078
            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                           // 8079
            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                   // 8080
            return sd ? round( n, sd, rm ) : n;                                                                      // 8081
        };                                                                                                           // 8082
                                                                                                                     // 8083
                                                                                                                     // 8084
        /*                                                                                                           // 8085
         * Return a string representing the value of this BigNumber in exponential notation and                      // 8086
         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                   // 8087
         *                                                                                                           // 8088
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                // 8089
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                   // 8090
         *                                                                                                           // 8091
         * 'toExponential() decimal places not an integer: {dp}'                                                     // 8092
         * 'toExponential() decimal places out of range: {dp}'                                                       // 8093
         * 'toExponential() rounding mode not an integer: {rm}'                                                      // 8094
         * 'toExponential() rounding mode out of range: {rm}'                                                        // 8095
         */                                                                                                          // 8096
        P.toExponential = function ( dp, rm ) {                                                                      // 8097
            return format( this,                                                                                     // 8098
              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                // 8099
        };                                                                                                           // 8100
                                                                                                                     // 8101
                                                                                                                     // 8102
        /*                                                                                                           // 8103
         * Return a string representing the value of this BigNumber in fixed-point notation rounding                 // 8104
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                     // 8105
         *                                                                                                           // 8106
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                           // 8107
         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                   // 8108
         *                                                                                                           // 8109
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                // 8110
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                   // 8111
         *                                                                                                           // 8112
         * 'toFixed() decimal places not an integer: {dp}'                                                           // 8113
         * 'toFixed() decimal places out of range: {dp}'                                                             // 8114
         * 'toFixed() rounding mode not an integer: {rm}'                                                            // 8115
         * 'toFixed() rounding mode out of range: {rm}'                                                              // 8116
         */                                                                                                          // 8117
        P.toFixed = function ( dp, rm ) {                                                                            // 8118
            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                          // 8119
              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                  // 8120
        };                                                                                                           // 8121
                                                                                                                     // 8122
                                                                                                                     // 8123
        /*                                                                                                           // 8124
         * Return a string representing the value of this BigNumber in fixed-point notation rounded                  // 8125
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                 // 8126
         * of the FORMAT object (see BigNumber.config).                                                              // 8127
         *                                                                                                           // 8128
         * FORMAT = {                                                                                                // 8129
         *      decimalSeparator : '.',                                                                              // 8130
         *      groupSeparator : ',',                                                                                // 8131
         *      groupSize : 3,                                                                                       // 8132
         *      secondaryGroupSize : 0,                                                                              // 8133
         *      fractionGroupSeparator : '\xA0',    // non-breaking space                                            // 8134
         *      fractionGroupSize : 0                                                                                // 8135
         * };                                                                                                        // 8136
         *                                                                                                           // 8137
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                // 8138
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                   // 8139
         *                                                                                                           // 8140
         * 'toFormat() decimal places not an integer: {dp}'                                                          // 8141
         * 'toFormat() decimal places out of range: {dp}'                                                            // 8142
         * 'toFormat() rounding mode not an integer: {rm}'                                                           // 8143
         * 'toFormat() rounding mode out of range: {rm}'                                                             // 8144
         */                                                                                                          // 8145
        P.toFormat = function ( dp, rm ) {                                                                           // 8146
            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                       // 8147
              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                  // 8148
                                                                                                                     // 8149
            if ( this.c ) {                                                                                          // 8150
                var i,                                                                                               // 8151
                    arr = str.split('.'),                                                                            // 8152
                    g1 = +FORMAT.groupSize,                                                                          // 8153
                    g2 = +FORMAT.secondaryGroupSize,                                                                 // 8154
                    groupSeparator = FORMAT.groupSeparator,                                                          // 8155
                    intPart = arr[0],                                                                                // 8156
                    fractionPart = arr[1],                                                                           // 8157
                    isNeg = this.s < 0,                                                                              // 8158
                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                  // 8159
                    len = intDigits.length;                                                                          // 8160
                                                                                                                     // 8161
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                           // 8162
                                                                                                                     // 8163
                if ( g1 > 0 && len > 0 ) {                                                                           // 8164
                    i = len % g1 || g1;                                                                              // 8165
                    intPart = intDigits.substr( 0, i );                                                              // 8166
                                                                                                                     // 8167
                    for ( ; i < len; i += g1 ) {                                                                     // 8168
                        intPart += groupSeparator + intDigits.substr( i, g1 );                                       // 8169
                    }                                                                                                // 8170
                                                                                                                     // 8171
                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                    // 8172
                    if (isNeg) intPart = '-' + intPart;                                                              // 8173
                }                                                                                                    // 8174
                                                                                                                     // 8175
                str = fractionPart                                                                                   // 8176
                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                         // 8177
                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),                                 // 8178
                      '$&' + FORMAT.fractionGroupSeparator )                                                         // 8179
                    : fractionPart )                                                                                 // 8180
                  : intPart;                                                                                         // 8181
            }                                                                                                        // 8182
                                                                                                                     // 8183
            return str;                                                                                              // 8184
        };                                                                                                           // 8185
                                                                                                                     // 8186
                                                                                                                     // 8187
        /*                                                                                                           // 8188
         * Return a string array representing the value of this BigNumber as a simple fraction with                  // 8189
         * an integer numerator and an integer denominator. The denominator will be a positive                       // 8190
         * non-zero value less than or equal to the specified maximum denominator. If a maximum                      // 8191
         * denominator is not specified, the denominator will be the lowest value necessary to                       // 8192
         * represent the number exactly.                                                                             // 8193
         *                                                                                                           // 8194
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                      // 8195
         *                                                                                                           // 8196
         * 'toFraction() max denominator not an integer: {md}'                                                       // 8197
         * 'toFraction() max denominator out of range: {md}'                                                         // 8198
         */                                                                                                          // 8199
        P.toFraction = function (md) {                                                                               // 8200
            var arr, d0, d2, e, exp, n, n0, q, s,                                                                    // 8201
                k = ERRORS,                                                                                          // 8202
                x = this,                                                                                            // 8203
                xc = x.c,                                                                                            // 8204
                d = new BigNumber(ONE),                                                                              // 8205
                n1 = d0 = new BigNumber(ONE),                                                                        // 8206
                d1 = n0 = new BigNumber(ONE);                                                                        // 8207
                                                                                                                     // 8208
            if ( md != null ) {                                                                                      // 8209
                ERRORS = false;                                                                                      // 8210
                n = new BigNumber(md);                                                                               // 8211
                ERRORS = k;                                                                                          // 8212
                                                                                                                     // 8213
                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                             // 8214
                                                                                                                     // 8215
                    if (ERRORS) {                                                                                    // 8216
                        raise( 22,                                                                                   // 8217
                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                      // 8218
                    }                                                                                                // 8219
                                                                                                                     // 8220
                    // ERRORS is false:                                                                              // 8221
                    // If md is a finite non-integer >= 1, round it to an integer and use it.                        // 8222
                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                    // 8223
                }                                                                                                    // 8224
            }                                                                                                        // 8225
                                                                                                                     // 8226
            if ( !xc ) return x.toString();                                                                          // 8227
            s = coeffToString(xc);                                                                                   // 8228
                                                                                                                     // 8229
            // Determine initial denominator.                                                                        // 8230
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                  // 8231
            e = d.e = s.length - x.e - 1;                                                                            // 8232
            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                  // 8233
            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                       // 8234
                                                                                                                     // 8235
            exp = MAX_EXP;                                                                                           // 8236
            MAX_EXP = 1 / 0;                                                                                         // 8237
            n = new BigNumber(s);                                                                                    // 8238
                                                                                                                     // 8239
            // n0 = d1 = 0                                                                                           // 8240
            n0.c[0] = 0;                                                                                             // 8241
                                                                                                                     // 8242
            for ( ; ; )  {                                                                                           // 8243
                q = div( n, d, 0, 1 );                                                                               // 8244
                d2 = d0.plus( q.times(d1) );                                                                         // 8245
                if ( d2.cmp(md) == 1 ) break;                                                                        // 8246
                d0 = d1;                                                                                             // 8247
                d1 = d2;                                                                                             // 8248
                n1 = n0.plus( q.times( d2 = n1 ) );                                                                  // 8249
                n0 = d2;                                                                                             // 8250
                d = n.minus( q.times( d2 = d ) );                                                                    // 8251
                n = d2;                                                                                              // 8252
            }                                                                                                        // 8253
                                                                                                                     // 8254
            d2 = div( md.minus(d0), d1, 0, 1 );                                                                      // 8255
            n0 = n0.plus( d2.times(n1) );                                                                            // 8256
            d0 = d0.plus( d2.times(d1) );                                                                            // 8257
            n0.s = n1.s = x.s;                                                                                       // 8258
            e *= 2;                                                                                                  // 8259
                                                                                                                     // 8260
            // Determine which fraction is closer to x, n0/d0 or n1/d1                                               // 8261
            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                // 8262
                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                               // 8263
                    ? [ n1.toString(), d1.toString() ]                                                               // 8264
                    : [ n0.toString(), d0.toString() ];                                                              // 8265
                                                                                                                     // 8266
            MAX_EXP = exp;                                                                                           // 8267
            return arr;                                                                                              // 8268
        };                                                                                                           // 8269
                                                                                                                     // 8270
                                                                                                                     // 8271
        /*                                                                                                           // 8272
         * Return the value of this BigNumber converted to a number primitive.                                       // 8273
         */                                                                                                          // 8274
        P.toNumber = function () {                                                                                   // 8275
            var x = this;                                                                                            // 8276
                                                                                                                     // 8277
            // Ensure zero has correct sign.                                                                         // 8278
            return +x || ( x.s ? x.s * 0 : NaN );                                                                    // 8279
        };                                                                                                           // 8280
                                                                                                                     // 8281
                                                                                                                     // 8282
        /*                                                                                                           // 8283
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                      // 8284
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 8285
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                    // 8286
         *                                                                                                           // 8287
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                      // 8288
         * (Performs 54 loop iterations for n of 9007199254740992.)                                                  // 8289
         *                                                                                                           // 8290
         * 'pow() exponent not an integer: {n}'                                                                      // 8291
         * 'pow() exponent out of range: {n}'                                                                        // 8292
         */                                                                                                          // 8293
        P.toPower = P.pow = function (n) {                                                                           // 8294
            var k, y,                                                                                                // 8295
                i = mathfloor( n < 0 ? -n : +n ),                                                                    // 8296
                x = this;                                                                                            // 8297
                                                                                                                     // 8298
            // Pass ±Infinity to Math.pow if exponent is out of range.                                               // 8299
            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                            // 8300
              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                // 8301
                parseFloat(n) != n && !( n = NaN ) ) ) {                                                             // 8302
                return new BigNumber( Math.pow( +x, n ) );                                                           // 8303
            }                                                                                                        // 8304
                                                                                                                     // 8305
            // Truncating each coefficient array to a length of k after each multiplication equates                  // 8306
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                    // 8307
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                   // 8308
            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                        // 8309
            y = new BigNumber(ONE);                                                                                  // 8310
                                                                                                                     // 8311
            for ( ; ; ) {                                                                                            // 8312
                                                                                                                     // 8313
                if ( i % 2 ) {                                                                                       // 8314
                    y = y.times(x);                                                                                  // 8315
                    if ( !y.c ) break;                                                                               // 8316
                    if ( k && y.c.length > k ) y.c.length = k;                                                       // 8317
                }                                                                                                    // 8318
                                                                                                                     // 8319
                i = mathfloor( i / 2 );                                                                              // 8320
                if ( !i ) break;                                                                                     // 8321
                                                                                                                     // 8322
                x = x.times(x);                                                                                      // 8323
                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                    // 8324
            }                                                                                                        // 8325
                                                                                                                     // 8326
            if ( n < 0 ) y = ONE.div(y);                                                                             // 8327
            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                 // 8328
        };                                                                                                           // 8329
                                                                                                                     // 8330
                                                                                                                     // 8331
        /*                                                                                                           // 8332
         * Return a string representing the value of this BigNumber rounded to sd significant digits                 // 8333
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                          // 8334
         * necessary to represent the integer part of the value in fixed-point notation, then use                    // 8335
         * exponential notation.                                                                                     // 8336
         *                                                                                                           // 8337
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                            // 8338
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                   // 8339
         *                                                                                                           // 8340
         * 'toPrecision() precision not an integer: {sd}'                                                            // 8341
         * 'toPrecision() precision out of range: {sd}'                                                              // 8342
         * 'toPrecision() rounding mode not an integer: {rm}'                                                        // 8343
         * 'toPrecision() rounding mode out of range: {rm}'                                                          // 8344
         */                                                                                                          // 8345
        P.toPrecision = function ( sd, rm ) {                                                                        // 8346
            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                             // 8347
              ? sd | 0 : null, rm, 24 );                                                                             // 8348
        };                                                                                                           // 8349
                                                                                                                     // 8350
                                                                                                                     // 8351
        /*                                                                                                           // 8352
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                    // 8353
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                 // 8354
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                     // 8355
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                 // 8356
         * TO_EXP_NEG, return exponential notation.                                                                  // 8357
         *                                                                                                           // 8358
         * [b] {number} Integer, 2 to 64 inclusive.                                                                  // 8359
         *                                                                                                           // 8360
         * 'toString() base not an integer: {b}'                                                                     // 8361
         * 'toString() base out of range: {b}'                                                                       // 8362
         */                                                                                                          // 8363
        P.toString = function (b) {                                                                                  // 8364
            var str,                                                                                                 // 8365
                n = this,                                                                                            // 8366
                s = n.s,                                                                                             // 8367
                e = n.e;                                                                                             // 8368
                                                                                                                     // 8369
            // Infinity or NaN?                                                                                      // 8370
            if ( e === null ) {                                                                                      // 8371
                                                                                                                     // 8372
                if (s) {                                                                                             // 8373
                    str = 'Infinity';                                                                                // 8374
                    if ( s < 0 ) str = '-' + str;                                                                    // 8375
                } else {                                                                                             // 8376
                    str = 'NaN';                                                                                     // 8377
                }                                                                                                    // 8378
            } else {                                                                                                 // 8379
                str = coeffToString( n.c );                                                                          // 8380
                                                                                                                     // 8381
                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                            // 8382
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                         // 8383
                      ? toExponential( str, e )                                                                      // 8384
                      : toFixedPoint( str, e );                                                                      // 8385
                } else {                                                                                             // 8386
                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                       // 8387
                }                                                                                                    // 8388
                                                                                                                     // 8389
                if ( s < 0 && n.c[0] ) str = '-' + str;                                                              // 8390
            }                                                                                                        // 8391
                                                                                                                     // 8392
            return str;                                                                                              // 8393
        };                                                                                                           // 8394
                                                                                                                     // 8395
                                                                                                                     // 8396
        /*                                                                                                           // 8397
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                    // 8398
         * number.                                                                                                   // 8399
         */                                                                                                          // 8400
        P.truncated = P.trunc = function () {                                                                        // 8401
            return round( new BigNumber(this), this.e + 1, 1 );                                                      // 8402
        };                                                                                                           // 8403
                                                                                                                     // 8404
                                                                                                                     // 8405
                                                                                                                     // 8406
        /*                                                                                                           // 8407
         * Return as toString, but do not accept a base argument.                                                    // 8408
         */                                                                                                          // 8409
        P.valueOf = P.toJSON = function () {                                                                         // 8410
            return this.toString();                                                                                  // 8411
        };                                                                                                           // 8412
                                                                                                                     // 8413
                                                                                                                     // 8414
        // Aliases for BigDecimal methods.                                                                           // 8415
        //P.add = P.plus;         // P.add included above                                                            // 8416
        //P.subtract = P.minus;   // P.sub included above                                                            // 8417
        //P.multiply = P.times;   // P.mul included above                                                            // 8418
        //P.divide = P.div;                                                                                          // 8419
        //P.remainder = P.mod;                                                                                       // 8420
        //P.compareTo = P.cmp;                                                                                       // 8421
        //P.negate = P.neg;                                                                                          // 8422
                                                                                                                     // 8423
                                                                                                                     // 8424
        if ( configObj != null ) BigNumber.config(configObj);                                                        // 8425
                                                                                                                     // 8426
        return BigNumber;                                                                                            // 8427
    }                                                                                                                // 8428
                                                                                                                     // 8429
                                                                                                                     // 8430
    // PRIVATE HELPER FUNCTIONS                                                                                      // 8431
                                                                                                                     // 8432
                                                                                                                     // 8433
    function bitFloor(n) {                                                                                           // 8434
        var i = n | 0;                                                                                               // 8435
        return n > 0 || n === i ? i : i - 1;                                                                         // 8436
    }                                                                                                                // 8437
                                                                                                                     // 8438
                                                                                                                     // 8439
    // Return a coefficient array as a string of base 10 digits.                                                     // 8440
    function coeffToString(a) {                                                                                      // 8441
        var s, z,                                                                                                    // 8442
            i = 1,                                                                                                   // 8443
            j = a.length,                                                                                            // 8444
            r = a[0] + '';                                                                                           // 8445
                                                                                                                     // 8446
        for ( ; i < j; ) {                                                                                           // 8447
            s = a[i++] + '';                                                                                         // 8448
            z = LOG_BASE - s.length;                                                                                 // 8449
            for ( ; z--; s = '0' + s );                                                                              // 8450
            r += s;                                                                                                  // 8451
        }                                                                                                            // 8452
                                                                                                                     // 8453
        // Determine trailing zeros.                                                                                 // 8454
        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                             // 8455
        return r.slice( 0, j + 1 || 1 );                                                                             // 8456
    }                                                                                                                // 8457
                                                                                                                     // 8458
                                                                                                                     // 8459
    // Compare the value of BigNumbers x and y.                                                                      // 8460
    function compare( x, y ) {                                                                                       // 8461
        var a, b,                                                                                                    // 8462
            xc = x.c,                                                                                                // 8463
            yc = y.c,                                                                                                // 8464
            i = x.s,                                                                                                 // 8465
            j = y.s,                                                                                                 // 8466
            k = x.e,                                                                                                 // 8467
            l = y.e;                                                                                                 // 8468
                                                                                                                     // 8469
        // Either NaN?                                                                                               // 8470
        if ( !i || !j ) return null;                                                                                 // 8471
                                                                                                                     // 8472
        a = xc && !xc[0];                                                                                            // 8473
        b = yc && !yc[0];                                                                                            // 8474
                                                                                                                     // 8475
        // Either zero?                                                                                              // 8476
        if ( a || b ) return a ? b ? 0 : -j : i;                                                                     // 8477
                                                                                                                     // 8478
        // Signs differ?                                                                                             // 8479
        if ( i != j ) return i;                                                                                      // 8480
                                                                                                                     // 8481
        a = i < 0;                                                                                                   // 8482
        b = k == l;                                                                                                  // 8483
                                                                                                                     // 8484
        // Either Infinity?                                                                                          // 8485
        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                           // 8486
                                                                                                                     // 8487
        // Compare exponents.                                                                                        // 8488
        if ( !b ) return k > l ^ a ? 1 : -1;                                                                         // 8489
                                                                                                                     // 8490
        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                           // 8491
                                                                                                                     // 8492
        // Compare digit by digit.                                                                                   // 8493
        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                           // 8494
                                                                                                                     // 8495
        // Compare lengths.                                                                                          // 8496
        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                      // 8497
    }                                                                                                                // 8498
                                                                                                                     // 8499
                                                                                                                     // 8500
    /*                                                                                                               // 8501
     * Return true if n is a valid number in range, otherwise false.                                                 // 8502
     * Use for argument validation when ERRORS is false.                                                             // 8503
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                     // 8504
     */                                                                                                              // 8505
    function intValidatorNoErrors( n, min, max ) {                                                                   // 8506
        return ( n = truncate(n) ) >= min && n <= max;                                                               // 8507
    }                                                                                                                // 8508
                                                                                                                     // 8509
                                                                                                                     // 8510
    function isArray(obj) {                                                                                          // 8511
        return Object.prototype.toString.call(obj) == '[object Array]';                                              // 8512
    }                                                                                                                // 8513
                                                                                                                     // 8514
                                                                                                                     // 8515
    /*                                                                                                               // 8516
     * Convert string of baseIn to an array of numbers of baseOut.                                                   // 8517
     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                              // 8518
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                              // 8519
     */                                                                                                              // 8520
    function toBaseOut( str, baseIn, baseOut ) {                                                                     // 8521
        var j,                                                                                                       // 8522
            arr = [0],                                                                                               // 8523
            arrL,                                                                                                    // 8524
            i = 0,                                                                                                   // 8525
            len = str.length;                                                                                        // 8526
                                                                                                                     // 8527
        for ( ; i < len; ) {                                                                                         // 8528
            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                  // 8529
            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                   // 8530
                                                                                                                     // 8531
            for ( ; j < arr.length; j++ ) {                                                                          // 8532
                                                                                                                     // 8533
                if ( arr[j] > baseOut - 1 ) {                                                                        // 8534
                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                        // 8535
                    arr[j + 1] += arr[j] / baseOut | 0;                                                              // 8536
                    arr[j] %= baseOut;                                                                               // 8537
                }                                                                                                    // 8538
            }                                                                                                        // 8539
        }                                                                                                            // 8540
                                                                                                                     // 8541
        return arr.reverse();                                                                                        // 8542
    }                                                                                                                // 8543
                                                                                                                     // 8544
                                                                                                                     // 8545
    function toExponential( str, e ) {                                                                               // 8546
        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                       // 8547
          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                // 8548
    }                                                                                                                // 8549
                                                                                                                     // 8550
                                                                                                                     // 8551
    function toFixedPoint( str, e ) {                                                                                // 8552
        var len, z;                                                                                                  // 8553
                                                                                                                     // 8554
        // Negative exponent?                                                                                        // 8555
        if ( e < 0 ) {                                                                                               // 8556
                                                                                                                     // 8557
            // Prepend zeros.                                                                                        // 8558
            for ( z = '0.'; ++e; z += '0' );                                                                         // 8559
            str = z + str;                                                                                           // 8560
                                                                                                                     // 8561
        // Positive exponent                                                                                         // 8562
        } else {                                                                                                     // 8563
            len = str.length;                                                                                        // 8564
                                                                                                                     // 8565
            // Append zeros.                                                                                         // 8566
            if ( ++e > len ) {                                                                                       // 8567
                for ( z = '0', e -= len; --e; z += '0' );                                                            // 8568
                str += z;                                                                                            // 8569
            } else if ( e < len ) {                                                                                  // 8570
                str = str.slice( 0, e ) + '.' + str.slice(e);                                                        // 8571
            }                                                                                                        // 8572
        }                                                                                                            // 8573
                                                                                                                     // 8574
        return str;                                                                                                  // 8575
    }                                                                                                                // 8576
                                                                                                                     // 8577
                                                                                                                     // 8578
    function truncate(n) {                                                                                           // 8579
        n = parseFloat(n);                                                                                           // 8580
        return n < 0 ? mathceil(n) : mathfloor(n);                                                                   // 8581
    }                                                                                                                // 8582
                                                                                                                     // 8583
                                                                                                                     // 8584
    // EXPORT                                                                                                        // 8585
                                                                                                                     // 8586
                                                                                                                     // 8587
    BigNumber = another();                                                                                           // 8588
                                                                                                                     // 8589
    // AMD.                                                                                                          // 8590
    if ( typeof define == 'function' && define.amd ) {                                                               // 8591
        define( function () { return BigNumber; } );                                                                 // 8592
                                                                                                                     // 8593
    // Node and other environments that support module.exports.                                                      // 8594
    } else if ( typeof module != 'undefined' && module.exports ) {                                                   // 8595
        module.exports = BigNumber;                                                                                  // 8596
        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                              // 8597
                                                                                                                     // 8598
    // Browser.                                                                                                      // 8599
    } else {                                                                                                         // 8600
        global.BigNumber = BigNumber;                                                                                // 8601
    }                                                                                                                // 8602
})(this);                                                                                                            // 8603
                                                                                                                     // 8604
},{"crypto":32}],"web3":[function(require,module,exports){                                                           // 8605
var web3 = require('./lib/web3');                                                                                    // 8606
web3.providers.HttpProvider = require('./lib/web3/httpprovider');                                                    // 8607
web3.providers.QtSyncProvider = require('./lib/web3/qtsync');                                                        // 8608
web3.eth.contract = require('./lib/web3/contract');                                                                  // 8609
web3.eth.namereg = require('./lib/web3/namereg');                                                                    // 8610
web3.eth.sendIBANTransaction = require('./lib/web3/transfer');                                                       // 8611
                                                                                                                     // 8612
// dont override global variable                                                                                     // 8613
if (typeof window !== 'undefined' && typeof window.web3 === 'undefined') {                                           // 8614
    window.web3 = web3;                                                                                              // 8615
}                                                                                                                    // 8616
                                                                                                                     // 8617
module.exports = web3;                                                                                               // 8618
                                                                                                                     // 8619
                                                                                                                     // 8620
},{"./lib/web3":9,"./lib/web3/contract":12,"./lib/web3/httpprovider":20,"./lib/web3/namereg":24,"./lib/web3/qtsync":27,"./lib/web3/transfer":30}]},{},["web3"])
//# sourceMappingURL=web3.js.map                                                                                     // 8622
                                                                                                                     // 8623
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/ethereum:web3/package-init.js                                                                            //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* jshint ignore:start */                                                                                            // 1
                                                                                                                     // 2
                                                                                                                     // 3
// Browser environment                                                                                               // 4
if(typeof window !== 'undefined') {                                                                                  // 5
    web3 = (typeof window.web3 !== 'undefined') ? window.web3 : require('web3');                                     // 6
    BigNumber = (typeof window.BigNumber !== 'undefined') ? window.BigNumber : require('bignumber.js');              // 7
}                                                                                                                    // 8
                                                                                                                     // 9
                                                                                                                     // 10
// Node environment                                                                                                  // 11
if(typeof global !== 'undefined') {                                                                                  // 12
    web3 = (typeof global.web3 !== 'undefined') ? global.web3 : require('web3');                                     // 13
    BigNumber = (typeof global.BigNumber !== 'undefined') ? global.BigNumber : require('bignumber.js');              // 14
}                                                                                                                    // 15
                                                                                                                     // 16
/* jshint ignore:end */                                                                                              // 17
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ethereum:web3'] = {
  web3: web3,
  BigNumber: BigNumber
};

})();
